/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDtoForGroup } from './UserDtoForGroup';
import {
    UserDtoForGroupFromJSON,
    UserDtoForGroupFromJSONTyped,
    UserDtoForGroupToJSON,
} from './UserDtoForGroup';

/**
 * 
 * @export
 * @interface FileAttachDto
 */
export interface FileAttachDto {
    /**
     * 
     * @type {number}
     * @memberof FileAttachDto
     */
    fileId?: number;
    /**
     * 
     * @type {string}
     * @memberof FileAttachDto
     */
    extension?: string;
    /**
     * 
     * @type {string}
     * @memberof FileAttachDto
     */
    fileType?: string;
    /**
     * 
     * @type {string}
     * @memberof FileAttachDto
     */
    mimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof FileAttachDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof FileAttachDto
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof FileAttachDto
     */
    detail?: string;
    /**
     * 
     * @type {number}
     * @memberof FileAttachDto
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof FileAttachDto
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof FileAttachDto
     */
    size?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FileAttachDto
     */
    inMediaBox?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FileAttachDto
     */
    regisAt?: string;
    /**
     * 
     * @type {UserDtoForGroup}
     * @memberof FileAttachDto
     */
    register?: UserDtoForGroup;
}

/**
 * Check if a given object implements the FileAttachDto interface.
 */
export function instanceOfFileAttachDto(value: object): value is FileAttachDto {
    return true;
}

export function FileAttachDtoFromJSON(json: any): FileAttachDto {
    return FileAttachDtoFromJSONTyped(json, false);
}

export function FileAttachDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileAttachDto {
    if (json == null) {
        return json;
    }
    return {
        
        'fileId': json['fileId'] == null ? undefined : json['fileId'],
        'extension': json['extension'] == null ? undefined : json['extension'],
        'fileType': json['fileType'] == null ? undefined : json['fileType'],
        'mimeType': json['mimeType'] == null ? undefined : json['mimeType'],
        'name': json['name'] == null ? undefined : json['name'],
        'path': json['path'] == null ? undefined : json['path'],
        'detail': json['detail'] == null ? undefined : json['detail'],
        'width': json['width'] == null ? undefined : json['width'],
        'height': json['height'] == null ? undefined : json['height'],
        'size': json['size'] == null ? undefined : json['size'],
        'inMediaBox': json['inMediaBox'] == null ? undefined : json['inMediaBox'],
        'regisAt': json['regisAt'] == null ? undefined : json['regisAt'],
        'register': json['register'] == null ? undefined : UserDtoForGroupFromJSON(json['register']),
    };
}

export function FileAttachDtoToJSON(value?: FileAttachDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fileId': value['fileId'],
        'extension': value['extension'],
        'fileType': value['fileType'],
        'mimeType': value['mimeType'],
        'name': value['name'],
        'path': value['path'],
        'detail': value['detail'],
        'width': value['width'],
        'height': value['height'],
        'size': value['size'],
        'inMediaBox': value['inMediaBox'],
        'regisAt': value['regisAt'],
        'register': UserDtoForGroupToJSON(value['register']),
    };
}

