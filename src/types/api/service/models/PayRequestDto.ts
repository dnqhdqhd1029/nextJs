/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PayRequestDto
 */
export interface PayRequestDto {
    /**
     * 
     * @type {number}
     * @memberof PayRequestDto
     */
    payRequestId?: number;
    /**
     * 
     * @type {number}
     * @memberof PayRequestDto
     */
    companyId?: number;
    /**
     * 사용권ID
     * @type {number}
     * @memberof PayRequestDto
     */
    licenseId?: number;
    /**
     * 사용권
     * @type {string}
     * @memberof PayRequestDto
     */
    licenseName?: string;
    /**
     * 견적서ID
     * @type {number}
     * @memberof PayRequestDto
     */
    estimateId?: number;
    /**
     * 
     * @type {number}
     * @memberof PayRequestDto
     */
    customerId?: number;
    /**
     * 신청자 이름
     * @type {string}
     * @memberof PayRequestDto
     */
    customerName?: string;
    /**
     * 신청자 휴대전화
     * @type {string}
     * @memberof PayRequestDto
     */
    customerMobile?: string;
    /**
     * 신청자 부서
     * @type {string}
     * @memberof PayRequestDto
     */
    customerDepartment?: string;
    /**
     * 신청자 직책
     * @type {string}
     * @memberof PayRequestDto
     */
    customerPosition?: string;
    /**
     * 신청자 요청사항
     * @type {string}
     * @memberof PayRequestDto
     */
    customerMemo?: string;
    /**
     * 결제자 이름
     * @type {string}
     * @memberof PayRequestDto
     */
    payerName?: string;
    /**
     * 결제자 이메일
     * @type {string}
     * @memberof PayRequestDto
     */
    payerEmail?: string;
    /**
     * 결제 타입
     * @type {string}
     * @memberof PayRequestDto
     */
    purchaseType?: string;
    /**
     * 결제 방법, 공통코드 PAY_METHOD
     * @type {string}
     * @memberof PayRequestDto
     */
    payMethod?: string;
    /**
     * 계산서 코드, 공통코드 INVOICE_TYPE
     * @type {string}
     * @memberof PayRequestDto
     */
    invoiceType?: string;
    /**
     * 계산서 발행여부
     * @type {boolean}
     * @memberof PayRequestDto
     */
    isIssueInvoice?: boolean;
    /**
     * 결제일
     * @type {string}
     * @memberof PayRequestDto
     */
    depositedAt?: string;
    /**
     * 입금금액
     * @type {number}
     * @memberof PayRequestDto
     */
    depositedAmount?: number;
    /**
     * 견적금액
     * @type {number}
     * @memberof PayRequestDto
     */
    estimatedAmount?: number;
    /**
     * 환불금액
     * @type {number}
     * @memberof PayRequestDto
     */
    refundAmount?: number;
    /**
     * 결제상태, 공통코드 DEPOSITED_TYPE
     * @type {string}
     * @memberof PayRequestDto
     */
    depositedType?: string;
    /**
     * 구매자ID
     * @type {number}
     * @memberof PayRequestDto
     */
    userId?: number;
    /**
     * 구매자이름
     * @type {string}
     * @memberof PayRequestDto
     */
    userName?: string;
    /**
     * 등록자
     * @type {string}
     * @memberof PayRequestDto
     */
    reigsName?: string;
    /**
     * 등록일
     * @type {string}
     * @memberof PayRequestDto
     */
    regisAt?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PayRequestDto
     */
    productNameList?: Array<string>;
}

/**
 * Check if a given object implements the PayRequestDto interface.
 */
export function instanceOfPayRequestDto(value: object): value is PayRequestDto {
    return true;
}

export function PayRequestDtoFromJSON(json: any): PayRequestDto {
    return PayRequestDtoFromJSONTyped(json, false);
}

export function PayRequestDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayRequestDto {
    if (json == null) {
        return json;
    }
    return {
        
        'payRequestId': json['payRequestId'] == null ? undefined : json['payRequestId'],
        'companyId': json['companyId'] == null ? undefined : json['companyId'],
        'licenseId': json['licenseId'] == null ? undefined : json['licenseId'],
        'licenseName': json['licenseName'] == null ? undefined : json['licenseName'],
        'estimateId': json['estimateId'] == null ? undefined : json['estimateId'],
        'customerId': json['customerId'] == null ? undefined : json['customerId'],
        'customerName': json['customerName'] == null ? undefined : json['customerName'],
        'customerMobile': json['customerMobile'] == null ? undefined : json['customerMobile'],
        'customerDepartment': json['customerDepartment'] == null ? undefined : json['customerDepartment'],
        'customerPosition': json['customerPosition'] == null ? undefined : json['customerPosition'],
        'customerMemo': json['customerMemo'] == null ? undefined : json['customerMemo'],
        'payerName': json['payerName'] == null ? undefined : json['payerName'],
        'payerEmail': json['payerEmail'] == null ? undefined : json['payerEmail'],
        'purchaseType': json['purchaseType'] == null ? undefined : json['purchaseType'],
        'payMethod': json['payMethod'] == null ? undefined : json['payMethod'],
        'invoiceType': json['invoiceType'] == null ? undefined : json['invoiceType'],
        'isIssueInvoice': json['isIssueInvoice'] == null ? undefined : json['isIssueInvoice'],
        'depositedAt': json['depositedAt'] == null ? undefined : json['depositedAt'],
        'depositedAmount': json['depositedAmount'] == null ? undefined : json['depositedAmount'],
        'estimatedAmount': json['estimatedAmount'] == null ? undefined : json['estimatedAmount'],
        'refundAmount': json['refundAmount'] == null ? undefined : json['refundAmount'],
        'depositedType': json['depositedType'] == null ? undefined : json['depositedType'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'userName': json['userName'] == null ? undefined : json['userName'],
        'reigsName': json['reigsName'] == null ? undefined : json['reigsName'],
        'regisAt': json['regisAt'] == null ? undefined : json['regisAt'],
        'productNameList': json['productNameList'] == null ? undefined : json['productNameList'],
    };
}

export function PayRequestDtoToJSON(value?: PayRequestDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'payRequestId': value['payRequestId'],
        'companyId': value['companyId'],
        'licenseId': value['licenseId'],
        'licenseName': value['licenseName'],
        'estimateId': value['estimateId'],
        'customerId': value['customerId'],
        'customerName': value['customerName'],
        'customerMobile': value['customerMobile'],
        'customerDepartment': value['customerDepartment'],
        'customerPosition': value['customerPosition'],
        'customerMemo': value['customerMemo'],
        'payerName': value['payerName'],
        'payerEmail': value['payerEmail'],
        'purchaseType': value['purchaseType'],
        'payMethod': value['payMethod'],
        'invoiceType': value['invoiceType'],
        'isIssueInvoice': value['isIssueInvoice'],
        'depositedAt': value['depositedAt'],
        'depositedAmount': value['depositedAmount'],
        'estimatedAmount': value['estimatedAmount'],
        'refundAmount': value['refundAmount'],
        'depositedType': value['depositedType'],
        'userId': value['userId'],
        'userName': value['userName'],
        'reigsName': value['reigsName'],
        'regisAt': value['regisAt'],
        'productNameList': value['productNameList'],
    };
}

