/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDtoForSimple } from './UserDtoForSimple';
import {
    UserDtoForSimpleFromJSON,
    UserDtoForSimpleFromJSONTyped,
    UserDtoForSimpleToJSON,
} from './UserDtoForSimple';

/**
 * 
 * @export
 * @interface MediaUserDto
 */
export interface MediaUserDto {
    /**
     * 
     * @type {number}
     * @memberof MediaUserDto
     */
    mediaId?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaUserDto
     */
    categCode?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUserDto
     */
    subcategCode?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUserDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaUserDto
     */
    alias?: string;
    /**
     * 
     * @type {UserDtoForSimple}
     * @memberof MediaUserDto
     */
    updater?: UserDtoForSimple;
    /**
     * 
     * @type {string}
     * @memberof MediaUserDto
     */
    cuType?: string;
    /**
     * 
     * @type {Date}
     * @memberof MediaUserDto
     */
    regisAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaUserDto
     */
    updateAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof MediaUserDto
     */
    isSysInfo?: boolean;
}

/**
 * Check if a given object implements the MediaUserDto interface.
 */
export function instanceOfMediaUserDto(value: object): value is MediaUserDto {
    return true;
}

export function MediaUserDtoFromJSON(json: any): MediaUserDto {
    return MediaUserDtoFromJSONTyped(json, false);
}

export function MediaUserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaUserDto {
    if (json == null) {
        return json;
    }
    return {
        
        'mediaId': json['mediaId'] == null ? undefined : json['mediaId'],
        'categCode': json['categCode'] == null ? undefined : json['categCode'],
        'subcategCode': json['subcategCode'] == null ? undefined : json['subcategCode'],
        'name': json['name'] == null ? undefined : json['name'],
        'alias': json['alias'] == null ? undefined : json['alias'],
        'updater': json['updater'] == null ? undefined : UserDtoForSimpleFromJSON(json['updater']),
        'cuType': json['cuType'] == null ? undefined : json['cuType'],
        'regisAt': json['regisAt'] == null ? undefined : (new Date(json['regisAt'])),
        'updateAt': json['updateAt'] == null ? undefined : (new Date(json['updateAt'])),
        'isSysInfo': json['isSysInfo'] == null ? undefined : json['isSysInfo'],
    };
}

export function MediaUserDtoToJSON(value?: MediaUserDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'mediaId': value['mediaId'],
        'categCode': value['categCode'],
        'subcategCode': value['subcategCode'],
        'name': value['name'],
        'alias': value['alias'],
        'updater': UserDtoForSimpleToJSON(value['updater']),
        'cuType': value['cuType'],
        'regisAt': value['regisAt'] == null ? undefined : ((value['regisAt']).toISOString()),
        'updateAt': value['updateAt'] == null ? undefined : ((value['updateAt']).toISOString()),
        'isSysInfo': value['isSysInfo'],
    };
}

