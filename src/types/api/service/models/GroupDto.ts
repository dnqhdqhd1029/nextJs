/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDtoForGroup } from './UserDtoForGroup';
import {
    UserDtoForGroupFromJSON,
    UserDtoForGroupFromJSONTyped,
    UserDtoForGroupToJSON,
} from './UserDtoForGroup';

/**
 * 
 * @export
 * @interface GroupDto
 */
export interface GroupDto {
    /**
     * 
     * @type {number}
     * @memberof GroupDto
     */
    groupId?: number;
    /**
     * 
     * @type {string}
     * @memberof GroupDto
     */
    name?: string;
    /**
     * 
     * @type {Array<UserDtoForGroup>}
     * @memberof GroupDto
     */
    users?: Array<UserDtoForGroup>;
    /**
     * 
     * @type {boolean}
     * @memberof GroupDto
     */
    isDefault?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof GroupDto
     */
    regisAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof GroupDto
     */
    count?: number;
    /**
     * 
     * @type {UserDtoForGroup}
     * @memberof GroupDto
     */
    register?: UserDtoForGroup;
}

/**
 * Check if a given object implements the GroupDto interface.
 */
export function instanceOfGroupDto(value: object): value is GroupDto {
    return true;
}

export function GroupDtoFromJSON(json: any): GroupDto {
    return GroupDtoFromJSONTyped(json, false);
}

export function GroupDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupDto {
    if (json == null) {
        return json;
    }
    return {
        
        'groupId': json['groupId'] == null ? undefined : json['groupId'],
        'name': json['name'] == null ? undefined : json['name'],
        'users': json['users'] == null ? undefined : ((json['users'] as Array<any>).map(UserDtoForGroupFromJSON)),
        'isDefault': json['isDefault'] == null ? undefined : json['isDefault'],
        'regisAt': json['regisAt'] == null ? undefined : (new Date(json['regisAt'])),
        'count': json['count'] == null ? undefined : json['count'],
        'register': json['register'] == null ? undefined : UserDtoForGroupFromJSON(json['register']),
    };
}

export function GroupDtoToJSON(value?: GroupDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'groupId': value['groupId'],
        'name': value['name'],
        'users': value['users'] == null ? undefined : ((value['users'] as Array<any>).map(UserDtoForGroupToJSON)),
        'isDefault': value['isDefault'],
        'regisAt': value['regisAt'] == null ? undefined : ((value['regisAt']).toISOString()),
        'count': value['count'],
        'register': UserDtoForGroupToJSON(value['register']),
    };
}

