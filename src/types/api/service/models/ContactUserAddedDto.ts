/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDtoForGroup } from './UserDtoForGroup';
import {
    UserDtoForGroupFromJSON,
    UserDtoForGroupFromJSONTyped,
    UserDtoForGroupToJSON,
} from './UserDtoForGroup';

/**
 * 
 * @export
 * @interface ContactUserAddedDto
 */
export interface ContactUserAddedDto {
    /**
     * 개인적연락처ID
     * @type {number}
     * @memberof ContactUserAddedDto
     */
    contactUserAddedId?: number;
    /**
     * 미디어ID
     * @type {number}
     * @memberof ContactUserAddedDto
     */
    mediaId?: number;
    /**
     * 언론인ID
     * @type {number}
     * @memberof ContactUserAddedDto
     */
    journalistId?: number;
    /**
     * 웹사이트
     * @type {string}
     * @memberof ContactUserAddedDto
     */
    wsite?: string;
    /**
     * 이메일
     * @type {string}
     * @memberof ContactUserAddedDto
     */
    email?: string;
    /**
     * 전화
     * @type {string}
     * @memberof ContactUserAddedDto
     */
    phone?: string;
    /**
     * 휴대전화
     * @type {string}
     * @memberof ContactUserAddedDto
     */
    mobile?: string;
    /**
     * 팩스
     * @type {string}
     * @memberof ContactUserAddedDto
     */
    fax?: string;
    /**
     * 주소
     * @type {string}
     * @memberof ContactUserAddedDto
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUserAddedDto
     */
    updateAt?: string;
    /**
     * 
     * @type {UserDtoForGroup}
     * @memberof ContactUserAddedDto
     */
    updater?: UserDtoForGroup;
}

/**
 * Check if a given object implements the ContactUserAddedDto interface.
 */
export function instanceOfContactUserAddedDto(value: object): value is ContactUserAddedDto {
    return true;
}

export function ContactUserAddedDtoFromJSON(json: any): ContactUserAddedDto {
    return ContactUserAddedDtoFromJSONTyped(json, false);
}

export function ContactUserAddedDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContactUserAddedDto {
    if (json == null) {
        return json;
    }
    return {
        
        'contactUserAddedId': json['contactUserAddedId'] == null ? undefined : json['contactUserAddedId'],
        'mediaId': json['mediaId'] == null ? undefined : json['mediaId'],
        'journalistId': json['journalistId'] == null ? undefined : json['journalistId'],
        'wsite': json['wsite'] == null ? undefined : json['wsite'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'mobile': json['mobile'] == null ? undefined : json['mobile'],
        'fax': json['fax'] == null ? undefined : json['fax'],
        'address': json['address'] == null ? undefined : json['address'],
        'updateAt': json['updateAt'] == null ? undefined : json['updateAt'],
        'updater': json['updater'] == null ? undefined : UserDtoForGroupFromJSON(json['updater']),
    };
}

export function ContactUserAddedDtoToJSON(value?: ContactUserAddedDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'contactUserAddedId': value['contactUserAddedId'],
        'mediaId': value['mediaId'],
        'journalistId': value['journalistId'],
        'wsite': value['wsite'],
        'email': value['email'],
        'phone': value['phone'],
        'mobile': value['mobile'],
        'fax': value['fax'],
        'address': value['address'],
        'updateAt': value['updateAt'],
        'updater': UserDtoForGroupToJSON(value['updater']),
    };
}

