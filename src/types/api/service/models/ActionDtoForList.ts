/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResponseTagDto } from './ResponseTagDto';
import {
    ResponseTagDtoFromJSON,
    ResponseTagDtoFromJSONTyped,
    ResponseTagDtoToJSON,
} from './ResponseTagDto';
import type { UserDtoForSimple } from './UserDtoForSimple';
import {
    UserDtoForSimpleFromJSON,
    UserDtoForSimpleFromJSONTyped,
    UserDtoForSimpleToJSON,
} from './UserDtoForSimple';

/**
 * 
 * @export
 * @interface ActionDtoForList
 */
export interface ActionDtoForList {
    /**
     * 
     * @type {number}
     * @memberof ActionDtoForList
     */
    actionId?: number;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    state_filter?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    shareCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ActionDtoForList
     */
    commentCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ActionDtoForList
     */
    mailingId?: number;
    /**
     * 
     * @type {number}
     * @memberof ActionDtoForList
     */
    nwReleaseId?: number;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    regisAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    updateAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    content?: string;
    /**
     * 
     * @type {Array<ResponseTagDto>}
     * @memberof ActionDtoForList
     */
    tagList?: Array<ResponseTagDto>;
    /**
     * 
     * @type {UserDtoForSimple}
     * @memberof ActionDtoForList
     */
    register?: UserDtoForSimple;
    /**
     * 
     * @type {UserDtoForSimple}
     * @memberof ActionDtoForList
     */
    owner?: UserDtoForSimple;
    /**
     * 
     * @type {UserDtoForSimple}
     * @memberof ActionDtoForList
     */
    cuUser?: UserDtoForSimple;
    /**
     * 
     * @type {string}
     * @memberof ActionDtoForList
     */
    cuType?: string;
}

/**
 * Check if a given object implements the ActionDtoForList interface.
 */
export function instanceOfActionDtoForList(value: object): value is ActionDtoForList {
    return true;
}

export function ActionDtoForListFromJSON(json: any): ActionDtoForList {
    return ActionDtoForListFromJSONTyped(json, false);
}

export function ActionDtoForListFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActionDtoForList {
    if (json == null) {
        return json;
    }
    return {
        
        'actionId': json['actionId'] == null ? undefined : json['actionId'],
        'category': json['category'] == null ? undefined : json['category'],
        'state_filter': json['state_filter'] == null ? undefined : json['state_filter'],
        'state': json['state'] == null ? undefined : json['state'],
        'shareCode': json['shareCode'] == null ? undefined : json['shareCode'],
        'commentCount': json['commentCount'] == null ? undefined : json['commentCount'],
        'mailingId': json['mailingId'] == null ? undefined : json['mailingId'],
        'nwReleaseId': json['nwReleaseId'] == null ? undefined : json['nwReleaseId'],
        'regisAt': json['regisAt'] == null ? undefined : json['regisAt'],
        'updateAt': json['updateAt'] == null ? undefined : json['updateAt'],
        'title': json['title'] == null ? undefined : json['title'],
        'content': json['content'] == null ? undefined : json['content'],
        'tagList': json['tagList'] == null ? undefined : ((json['tagList'] as Array<any>).map(ResponseTagDtoFromJSON)),
        'register': json['register'] == null ? undefined : UserDtoForSimpleFromJSON(json['register']),
        'owner': json['owner'] == null ? undefined : UserDtoForSimpleFromJSON(json['owner']),
        'cuUser': json['cuUser'] == null ? undefined : UserDtoForSimpleFromJSON(json['cuUser']),
        'cuType': json['cuType'] == null ? undefined : json['cuType'],
    };
}

export function ActionDtoForListToJSON(value?: ActionDtoForList | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'actionId': value['actionId'],
        'category': value['category'],
        'state_filter': value['state_filter'],
        'state': value['state'],
        'shareCode': value['shareCode'],
        'commentCount': value['commentCount'],
        'mailingId': value['mailingId'],
        'nwReleaseId': value['nwReleaseId'],
        'regisAt': value['regisAt'],
        'updateAt': value['updateAt'],
        'title': value['title'],
        'content': value['content'],
        'tagList': value['tagList'] == null ? undefined : ((value['tagList'] as Array<any>).map(ResponseTagDtoToJSON)),
        'register': UserDtoForSimpleToJSON(value['register']),
        'owner': UserDtoForSimpleToJSON(value['owner']),
        'cuUser': UserDtoForSimpleToJSON(value['cuUser']),
        'cuType': value['cuType'],
    };
}

