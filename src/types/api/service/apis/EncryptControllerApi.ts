/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonString,
  RequestEncDto,
} from '../models/index';
import {
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    RequestEncDtoFromJSON,
    RequestEncDtoToJSON,
} from '../models/index';

export interface DecryptRequest {
    requestEncDto: RequestEncDto;
}

export interface EncryptRequest {
    requestEncDto: RequestEncDto;
}

export interface MpBaseDecRequest {
    requestEncDto: RequestEncDto;
}

export interface MpBaseEncRequest {
    requestEncDto: RequestEncDto;
}

export interface MpReplaceDecRequest {
    requestEncDto: RequestEncDto;
}

export interface MpReplaceEncRequest {
    requestEncDto: RequestEncDto;
}

/**
 * 
 */
export class EncryptControllerApi extends runtime.BaseAPI {

    /**
     * 미디어비 복호화 
     * 미디어비 복호화 
     */
    async decryptRaw(requestParameters: DecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestEncDto'] == null) {
            throw new runtime.RequiredError(
                'requestEncDto',
                'Required parameter "requestEncDto" was null or undefined when calling decrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/decrypt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEncDtoToJSON(requestParameters['requestEncDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어비 복호화 
     * 미디어비 복호화 
     */
    async decrypt(requestParameters: DecryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.decryptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어비 암호화 
     * 미디어비 암호화 
     */
    async encryptRaw(requestParameters: EncryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestEncDto'] == null) {
            throw new runtime.RequiredError(
                'requestEncDto',
                'Required parameter "requestEncDto" was null or undefined when calling encrypt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/encrypt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEncDtoToJSON(requestParameters['requestEncDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어비 암호화 
     * 미디어비 암호화 
     */
    async encrypt(requestParameters: EncryptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.encryptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어패스 복호화(언론인/미디어 이메일,전화번호) 
     * 미디어패스 복호화(이메일,전화번호)
     */
    async mpBaseDecRaw(requestParameters: MpBaseDecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestEncDto'] == null) {
            throw new runtime.RequiredError(
                'requestEncDto',
                'Required parameter "requestEncDto" was null or undefined when calling mpBaseDec().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/mpdec/base`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEncDtoToJSON(requestParameters['requestEncDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어패스 복호화(언론인/미디어 이메일,전화번호) 
     * 미디어패스 복호화(이메일,전화번호)
     */
    async mpBaseDec(requestParameters: MpBaseDecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.mpBaseDecRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어비DB에는 미디어비 암호화 적용되어있음. 이 암호화는 사용안함 
     * 미디어패스DB 암호화(이메일,전화번호) 
     */
    async mpBaseEncRaw(requestParameters: MpBaseEncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestEncDto'] == null) {
            throw new runtime.RequiredError(
                'requestEncDto',
                'Required parameter "requestEncDto" was null or undefined when calling mpBaseEnc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/mpenc/base`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEncDtoToJSON(requestParameters['requestEncDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어비DB에는 미디어비 암호화 적용되어있음. 이 암호화는 사용안함 
     * 미디어패스DB 암호화(이메일,전화번호) 
     */
    async mpBaseEnc(requestParameters: MpBaseEncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.mpBaseEncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어패스 복호화(이름) 
     * 미디어패스 복호화(이름) OR Elasticsearch 
     */
    async mpReplaceDecRaw(requestParameters: MpReplaceDecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestEncDto'] == null) {
            throw new runtime.RequiredError(
                'requestEncDto',
                'Required parameter "requestEncDto" was null or undefined when calling mpReplaceDec().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/mpdec/rep`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEncDtoToJSON(requestParameters['requestEncDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어패스 복호화(이름) 
     * 미디어패스 복호화(이름) OR Elasticsearch 
     */
    async mpReplaceDec(requestParameters: MpReplaceDecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.mpReplaceDecRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어패스 암호화(이름) 
     * 미디어패스 암호화(이름) 
     */
    async mpReplaceEncRaw(requestParameters: MpReplaceEncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestEncDto'] == null) {
            throw new runtime.RequiredError(
                'requestEncDto',
                'Required parameter "requestEncDto" was null or undefined when calling mpReplaceEnc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auth/mpenc/rep`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEncDtoToJSON(requestParameters['requestEncDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어패스 암호화(이름) 
     * 미디어패스 암호화(이름) 
     */
    async mpReplaceEnc(requestParameters: MpReplaceEncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.mpReplaceEncRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
