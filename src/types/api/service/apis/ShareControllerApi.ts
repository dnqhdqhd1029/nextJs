/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonInteger,
  BaseResponseCommonLong,
  SendShareMail1Request,
} from '../models/index';
import {
    BaseResponseCommonIntegerFromJSON,
    BaseResponseCommonIntegerToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    SendShareMail1RequestFromJSON,
    SendShareMail1RequestToJSON,
} from '../models/index';

export interface SendShareMailRequest {
    id: number;
}

export interface SendShareMail1OperationRequest {
    sendShareMail1Request?: SendShareMail1Request;
}

/**
 * 
 */
export class ShareControllerApi extends runtime.BaseAPI {

    /**
     * 공유하기 메일 발송 취소(30초 이내)
     * 공유하기 메일 발송 취소
     */
    async sendShareMailRaw(requestParameters: SendShareMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonInteger>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sendShareMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/share/mail/cancel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonIntegerFromJSON(jsonValue));
    }

    /**
     * 공유하기 메일 발송 취소(30초 이내)
     * 공유하기 메일 발송 취소
     */
    async sendShareMail(requestParameters: SendShareMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonInteger> {
        const response = await this.sendShareMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 공유하기 메일 보내기
     * 공유하기 메일 보내기
     */
    async sendShareMail1Raw(requestParameters: SendShareMail1OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/share/mail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendShareMail1RequestToJSON(requestParameters['sendShareMail1Request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 공유하기 메일 보내기
     * 공유하기 메일 보내기
     */
    async sendShareMail1(requestParameters: SendShareMail1OperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.sendShareMail1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
