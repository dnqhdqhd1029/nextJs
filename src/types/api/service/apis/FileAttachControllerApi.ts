/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddMediaFileRequest,
  BaseResponseCommonPageFileAttachDto,
  BaseResponseCommonString,
  PageableDto,
  RequestFileAttachDto,
  SearchFileAttachDto,
  UpdateImageFileRequest,
} from '../models/index';
import {
    AddMediaFileRequestFromJSON,
    AddMediaFileRequestToJSON,
    BaseResponseCommonPageFileAttachDtoFromJSON,
    BaseResponseCommonPageFileAttachDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RequestFileAttachDtoFromJSON,
    RequestFileAttachDtoToJSON,
    SearchFileAttachDtoFromJSON,
    SearchFileAttachDtoToJSON,
    UpdateImageFileRequestFromJSON,
    UpdateImageFileRequestToJSON,
} from '../models/index';

export interface AddMediaFileOperationRequest {
    addMediaFileRequest?: AddMediaFileRequest;
}

export interface AttachedDownlaodFilesRequest {
    id: number;
}

export interface DeleteMediaFileRequest {
    id: number;
}

export interface DownlaodFilesRequest {
    id: number;
    request: RequestFileAttachDto;
}

export interface FindAllMeidaFileRequest {
    searchDto: SearchFileAttachDto;
    pageableDto: PageableDto;
}

export interface UpdateFilesImageFileRequest {
    id: number;
    requestFileAttachDto: RequestFileAttachDto;
}

export interface UpdateImageFileOperationRequest {
    updateImageFileRequest?: UpdateImageFileRequest;
}

/**
 * 
 */
export class FileAttachControllerApi extends runtime.BaseAPI {

    /**
     * 미디어 자료실 파일 추가
     * 미디어 자료실 파일 추가
     */
    async addMediaFileRaw(requestParameters: AddMediaFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediafile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMediaFileRequestToJSON(requestParameters['addMediaFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어 자료실 파일 추가
     * 미디어 자료실 파일 추가
     */
    async addMediaFile(requestParameters: AddMediaFileOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addMediaFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 회사 관련(백오피스 관련)파일 다운로드 API
     * 회사 관련(백오피스 관련) 파일 다운로드
     */
    async attachedDownlaodFilesRaw(requestParameters: AttachedDownlaodFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling attachedDownlaodFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/attachedfiles/download/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 회사 관련(백오피스 관련)파일 다운로드 API
     * 회사 관련(백오피스 관련) 파일 다운로드
     */
    async attachedDownlaodFiles(requestParameters: AttachedDownlaodFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.attachedDownlaodFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * FileAttachId, 미디어 자료실 파일 삭제
     * 미디어 자료실 파일 삭제
     */
    async deleteMediaFileRaw(requestParameters: DeleteMediaFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediafile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * FileAttachId, 미디어 자료실 파일 삭제
     * 미디어 자료실 파일 삭제
     */
    async deleteMediaFile(requestParameters: DeleteMediaFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteMediaFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 자료실 파일 다운로드 API
     * 미디어 자료실 파일 다운로드
     */
    async downlaodFilesRaw(requestParameters: DownlaodFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling downlaodFiles().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling downlaodFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/files/download/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * 미디어 자료실 파일 다운로드 API
     * 미디어 자료실 파일 다운로드
     */
    async downlaodFiles(requestParameters: DownlaodFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downlaodFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 자료실 리스트
     * 미디어 자료실 리스트
     */
    async findAllMeidaFileRaw(requestParameters: FindAllMeidaFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageFileAttachDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllMeidaFile().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllMeidaFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediafile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageFileAttachDtoFromJSON(jsonValue));
    }

    /**
     * 미디어 자료실 리스트
     * 미디어 자료실 리스트
     */
    async findAllMeidaFile(requestParameters: FindAllMeidaFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageFileAttachDto> {
        const response = await this.findAllMeidaFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 자료실 파일 추가 후 Link 응답
     * 에디터에 미디어 자료실 파일 등록 추가
     */
    async updateFilesImageFileRaw(requestParameters: UpdateFilesImageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFilesImageFile().'
            );
        }

        if (requestParameters['requestFileAttachDto'] == null) {
            throw new runtime.RequiredError(
                'requestFileAttachDto',
                'Required parameter "requestFileAttachDto" was null or undefined when calling updateFilesImageFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/image/upload/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestFileAttachDtoToJSON(requestParameters['requestFileAttachDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어 자료실 파일 추가 후 Link 응답
     * 에디터에 미디어 자료실 파일 등록 추가
     */
    async updateFilesImageFile(requestParameters: UpdateFilesImageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.updateFilesImageFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 일반 이미지 파일 추가 후 Link 응답
     * 에디터 등 일반 이미지 파일 등록 추가
     */
    async updateImageFileRaw(requestParameters: UpdateImageFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/image/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateImageFileRequestToJSON(requestParameters['updateImageFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 일반 이미지 파일 추가 후 Link 응답
     * 에디터 등 일반 이미지 파일 등록 추가
     */
    async updateImageFile(requestParameters: UpdateImageFileOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.updateImageFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
