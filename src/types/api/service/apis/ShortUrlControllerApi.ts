/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonResponseShortUrlDto,
  BaseResponseCommonString,
} from '../models/index';
import {
    BaseResponseCommonResponseShortUrlDtoFromJSON,
    BaseResponseCommonResponseShortUrlDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
} from '../models/index';

export interface GetOriginalUrlRequest {
    encUrl: string;
}

export interface GetOriginalUrlRejectLetterRequest {
    encUrl: string;
    encEmail: string;
}

export interface TestBase62Request {
    body: number;
}

export interface TestBase64DecRequest {
    body: string;
}

export interface TestBase64EncRequest {
    body: string;
}

/**
 * 
 */
export class ShortUrlControllerApi extends runtime.BaseAPI {

    /**
     * 짦은 URL 복구, FIRST_REGISTER_USER, RESET_PASSWORD
     * 짧은URL을 복구
     */
    async getOriginalUrlRaw(requestParameters: GetOriginalUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseShortUrlDto>> {
        if (requestParameters['encUrl'] == null) {
            throw new runtime.RequiredError(
                'encUrl',
                'Required parameter "encUrl" was null or undefined when calling getOriginalUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/verification/email/{encUrl}`.replace(`{${"encUrl"}}`, encodeURIComponent(String(requestParameters['encUrl']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseShortUrlDtoFromJSON(jsonValue));
    }

    /**
     * 짦은 URL 복구, FIRST_REGISTER_USER, RESET_PASSWORD
     * 짧은URL을 복구
     */
    async getOriginalUrl(requestParameters: GetOriginalUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseShortUrlDto> {
        const response = await this.getOriginalUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 짦은 URL 복구, NEWS_LETTER_REJECT, 뉴스레터 거부, email 주소 포함
     * 짧은URL을 복구, 뉴스레터거부 이메일포함
     */
    async getOriginalUrlRejectLetterRaw(requestParameters: GetOriginalUrlRejectLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseShortUrlDto>> {
        if (requestParameters['encUrl'] == null) {
            throw new runtime.RequiredError(
                'encUrl',
                'Required parameter "encUrl" was null or undefined when calling getOriginalUrlRejectLetter().'
            );
        }

        if (requestParameters['encEmail'] == null) {
            throw new runtime.RequiredError(
                'encEmail',
                'Required parameter "encEmail" was null or undefined when calling getOriginalUrlRejectLetter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/verification/email/{encUrl}/{encEmail}`.replace(`{${"encUrl"}}`, encodeURIComponent(String(requestParameters['encUrl']))).replace(`{${"encEmail"}}`, encodeURIComponent(String(requestParameters['encEmail']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseShortUrlDtoFromJSON(jsonValue));
    }

    /**
     * 짦은 URL 복구, NEWS_LETTER_REJECT, 뉴스레터 거부, email 주소 포함
     * 짧은URL을 복구, 뉴스레터거부 이메일포함
     */
    async getOriginalUrlRejectLetter(requestParameters: GetOriginalUrlRejectLetterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseShortUrlDto> {
        const response = await this.getOriginalUrlRejectLetterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 짦은 URL 인코딩 테스트
     * Encoding 테스트
     */
    async testBase62Raw(requestParameters: TestBase62Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling testBase62().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/url/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 짦은 URL 인코딩 테스트
     * Encoding 테스트
     */
    async testBase62(requestParameters: TestBase62Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.testBase62Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base64 URL 디코 테스트
     * Decoding Base64 URL 테스트
     */
    async testBase64DecRaw(requestParameters: TestBase64DecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling testBase64Dec().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/url/test/base64/dec`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * Base64 URL 디코 테스트
     * Decoding Base64 URL 테스트
     */
    async testBase64Dec(requestParameters: TestBase64DecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.testBase64DecRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Base64 URL 인코딩 테스트
     * Encoding Base64 URL 테스트
     */
    async testBase64EncRaw(requestParameters: TestBase64EncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling testBase64Enc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/url/test/base64/enc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * Base64 URL 인코딩 테스트
     * Encoding Base64 URL 테스트
     */
    async testBase64Enc(requestParameters: TestBase64EncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.testBase64EncRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
