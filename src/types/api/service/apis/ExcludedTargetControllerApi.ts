/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonBoolean,
  BaseResponseCommonString,
  RequestExcludedTargetDto,
  SearchExcludedTargetDto,
} from '../models/index';
import {
    BaseResponseCommonBooleanFromJSON,
    BaseResponseCommonBooleanToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    RequestExcludedTargetDtoFromJSON,
    RequestExcludedTargetDtoToJSON,
    SearchExcludedTargetDtoFromJSON,
    SearchExcludedTargetDtoToJSON,
} from '../models/index';

export interface AddJournalistExcludedRequest {
    requestExcludedTargetDto: RequestExcludedTargetDto;
}

export interface AddMediaExcludedRequest {
    requestExcludedTargetDto: RequestExcludedTargetDto;
}

export interface DelJournalistExcludedRequest {
    id: number;
    searchExcludedTargetDto: SearchExcludedTargetDto;
}

export interface DelMediaExcludedRequest {
    id: number;
    searchExcludedTargetDto: SearchExcludedTargetDto;
}

export interface GetJournalistExcludedRequest {
    id: number;
    request: SearchExcludedTargetDto;
}

export interface GetMediaExcludedRequest {
    id: number;
    request: SearchExcludedTargetDto;
}

/**
 * 
 */
export class ExcludedTargetControllerApi extends runtime.BaseAPI {

    /**
     * 언론인 발송 차단
     * 언론인 차단
     */
    async addJournalistExcludedRaw(requestParameters: AddJournalistExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestExcludedTargetDto'] == null) {
            throw new runtime.RequiredError(
                'requestExcludedTargetDto',
                'Required parameter "requestExcludedTargetDto" was null or undefined when calling addJournalistExcluded().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/excluded/journalist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestExcludedTargetDtoToJSON(requestParameters['requestExcludedTargetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 언론인 발송 차단
     * 언론인 차단
     */
    async addJournalistExcluded(requestParameters: AddJournalistExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addJournalistExcludedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 발송 차단
     * 미디어 차단
     */
    async addMediaExcludedRaw(requestParameters: AddMediaExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestExcludedTargetDto'] == null) {
            throw new runtime.RequiredError(
                'requestExcludedTargetDto',
                'Required parameter "requestExcludedTargetDto" was null or undefined when calling addMediaExcluded().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/excluded/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestExcludedTargetDtoToJSON(requestParameters['requestExcludedTargetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어 발송 차단
     * 미디어 차단
     */
    async addMediaExcluded(requestParameters: AddMediaExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addMediaExcludedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 발송 차단 해제하기, 같은 그룹 내에서만 삭제 가능
     * 언론인 발송 차단 해제, id : 언론인ID
     */
    async delJournalistExcludedRaw(requestParameters: DelJournalistExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling delJournalistExcluded().'
            );
        }

        if (requestParameters['searchExcludedTargetDto'] == null) {
            throw new runtime.RequiredError(
                'searchExcludedTargetDto',
                'Required parameter "searchExcludedTargetDto" was null or undefined when calling delJournalistExcluded().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/excluded/journalist/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SearchExcludedTargetDtoToJSON(requestParameters['searchExcludedTargetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 언론인 발송 차단 해제하기, 같은 그룹 내에서만 삭제 가능
     * 언론인 발송 차단 해제, id : 언론인ID
     */
    async delJournalistExcluded(requestParameters: DelJournalistExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.delJournalistExcludedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 발송 차단 해제하기, 같은 그룹 내에서만 삭제 가능
     * 미디어 발송 차단 해제, id : 미디어ID
     */
    async delMediaExcludedRaw(requestParameters: DelMediaExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling delMediaExcluded().'
            );
        }

        if (requestParameters['searchExcludedTargetDto'] == null) {
            throw new runtime.RequiredError(
                'searchExcludedTargetDto',
                'Required parameter "searchExcludedTargetDto" was null or undefined when calling delMediaExcluded().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/excluded/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: SearchExcludedTargetDtoToJSON(requestParameters['searchExcludedTargetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어 발송 차단 해제하기, 같은 그룹 내에서만 삭제 가능
     * 미디어 발송 차단 해제, id : 미디어ID
     */
    async delMediaExcluded(requestParameters: DelMediaExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.delMediaExcludedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 발송 여부 확인 
     * 언론인 발송 차단 여부 확인, id = 언론인ID 
     */
    async getJournalistExcludedRaw(requestParameters: GetJournalistExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonBoolean>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getJournalistExcluded().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling getJournalistExcluded().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/excluded/journalist/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonBooleanFromJSON(jsonValue));
    }

    /**
     * 언론인 발송 여부 확인 
     * 언론인 발송 차단 여부 확인, id = 언론인ID 
     */
    async getJournalistExcluded(requestParameters: GetJournalistExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonBoolean> {
        const response = await this.getJournalistExcludedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 발송 여부 확인
     * 미디어 발송 차단 여부 확인, id = 미디어ID 
     */
    async getMediaExcludedRaw(requestParameters: GetMediaExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonBoolean>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMediaExcluded().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling getMediaExcluded().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/excluded/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonBooleanFromJSON(jsonValue));
    }

    /**
     * 미디어 발송 여부 확인
     * 미디어 발송 차단 여부 확인, id = 미디어ID 
     */
    async getMediaExcluded(requestParameters: GetMediaExcludedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonBoolean> {
        const response = await this.getMediaExcludedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
