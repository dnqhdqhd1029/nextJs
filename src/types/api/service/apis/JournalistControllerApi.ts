/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonJournalistDto,
  BaseResponseCommonListJournalistAutoCompleteDto,
  BaseResponseCommonListJournalistDto,
  BaseResponseCommonListNameCountDto,
  BaseResponseCommonLong,
  BaseResponseCommonPageJournalistDto,
  BaseResponseCommonString,
  CreateJournalistArrayDto,
  CreateJournalistDto,
  ModifyJournalistDto,
  PageableDto,
  SearchJournalistDto,
  SearchJournalistIdListDto,
  SearchNameDto,
  SearchNameEmailDto,
  SearchSimpleDto,
} from '../models/index';
import {
    BaseResponseCommonJournalistDtoFromJSON,
    BaseResponseCommonJournalistDtoToJSON,
    BaseResponseCommonListJournalistAutoCompleteDtoFromJSON,
    BaseResponseCommonListJournalistAutoCompleteDtoToJSON,
    BaseResponseCommonListJournalistDtoFromJSON,
    BaseResponseCommonListJournalistDtoToJSON,
    BaseResponseCommonListNameCountDtoFromJSON,
    BaseResponseCommonListNameCountDtoToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonPageJournalistDtoFromJSON,
    BaseResponseCommonPageJournalistDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CreateJournalistArrayDtoFromJSON,
    CreateJournalistArrayDtoToJSON,
    CreateJournalistDtoFromJSON,
    CreateJournalistDtoToJSON,
    ModifyJournalistDtoFromJSON,
    ModifyJournalistDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    SearchJournalistDtoFromJSON,
    SearchJournalistDtoToJSON,
    SearchJournalistIdListDtoFromJSON,
    SearchJournalistIdListDtoToJSON,
    SearchNameDtoFromJSON,
    SearchNameDtoToJSON,
    SearchNameEmailDtoFromJSON,
    SearchNameEmailDtoToJSON,
    SearchSimpleDtoFromJSON,
    SearchSimpleDtoToJSON,
} from '../models/index';

export interface AddJournalistRequest {
    createJournalistDto: CreateJournalistDto;
}

export interface AddJournalistArrayRequest {
    createJournalistArrayDto: CreateJournalistArrayDto;
}

export interface DelJournalistInfoRequest {
    id: number;
}

export interface DeleteJournalistPhotoRequest {
    id: number;
}

export interface FindAllJournalistsRequest {
    searchJournalistDto: SearchJournalistDto;
    pageableDto: PageableDto;
}

export interface FindAutoComplete1Request {
    searchDto: SearchNameDto;
    pageableDto: PageableDto;
}

export interface FindJournalistFieldSubRequest {
    searchDto: SearchNameDto;
}

export interface FindJournalistInfoByIdListRequest {
    searchJournalistIdListDto: SearchJournalistIdListDto;
}

export interface FindJournalistLocationSubRequest {
    searchDto: SearchNameDto;
}

export interface FindJournalistTypeAutoCompleteRequest {
    searchDto: SearchNameDto;
    pageableDto: PageableDto;
}

export interface FindMedia1Request {
    id: number;
}

export interface FindSimpleAutoComplete1Request {
    request: SearchSimpleDto;
    pageableDto: PageableDto;
}

export interface FindSystemJournalistRequest {
    searchNameEmailDto: SearchNameEmailDto;
}

export interface ModifyJournalistInfoRequest {
    id: number;
    modifyJournalistDto: ModifyJournalistDto;
}

export interface ModifyJournalistPhotoRequest {
    id: number;
    file: Blob;
}

/**
 * 
 */
export class JournalistControllerApi extends runtime.BaseAPI {

    /**
     * 사용자가 언론인을 추가합니다. 소셜TypeID 공통코드 JRNLST_SOCIAL_USER_ADD
     * 언론인 사용자 추가
     */
    async addJournalistRaw(requestParameters: AddJournalistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createJournalistDto'] == null) {
            throw new runtime.RequiredError(
                'createJournalistDto',
                'Required parameter "createJournalistDto" was null or undefined when calling addJournalist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateJournalistDtoToJSON(requestParameters['createJournalistDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 사용자가 언론인을 추가합니다. 소셜TypeID 공통코드 JRNLST_SOCIAL_USER_ADD
     * 언론인 사용자 추가
     */
    async addJournalist(requestParameters: AddJournalistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addJournalistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 언론인을 추가합니다.(배열로 여러개 추가) 소셜TypeID 공통코드 JRNLST_SOCIAL_USER_ADD
     * 언론인 사용자 추가(배열로 여러개 추가)
     */
    async addJournalistArrayRaw(requestParameters: AddJournalistArrayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createJournalistArrayDto'] == null) {
            throw new runtime.RequiredError(
                'createJournalistArrayDto',
                'Required parameter "createJournalistArrayDto" was null or undefined when calling addJournalistArray().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/array`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateJournalistArrayDtoToJSON(requestParameters['createJournalistArrayDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 사용자가 언론인을 추가합니다.(배열로 여러개 추가) 소셜TypeID 공통코드 JRNLST_SOCIAL_USER_ADD
     * 언론인 사용자 추가(배열로 여러개 추가)
     */
    async addJournalistArray(requestParameters: AddJournalistArrayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addJournalistArrayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 추가한 언론인 정보 삭제하기, 본인이 작성한 언론인만 가능
     * 사용자 추가 언론인 삭제하기
     */
    async delJournalistInfoRaw(requestParameters: DelJournalistInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling delJournalistInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자가 추가한 언론인 정보 삭제하기, 본인이 작성한 언론인만 가능
     * 사용자 추가 언론인 삭제하기
     */
    async delJournalistInfo(requestParameters: DelJournalistInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.delJournalistInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 추가 언론인 사진 삭제
     * 사용자 추가 언론인 사진 삭제
     */
    async deleteJournalistPhotoRaw(requestParameters: DeleteJournalistPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteJournalistPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/photo/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 추가 언론인 사진 삭제
     * 사용자 추가 언론인 사진 삭제
     */
    async deleteJournalistPhoto(requestParameters: DeleteJournalistPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteJournalistPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 리스트
     * 언론인 리스트
     */
    async findAllJournalistsRaw(requestParameters: FindAllJournalistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageJournalistDto>> {
        if (requestParameters['searchJournalistDto'] == null) {
            throw new runtime.RequiredError(
                'searchJournalistDto',
                'Required parameter "searchJournalistDto" was null or undefined when calling findAllJournalists().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllJournalists().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchJournalistDto'] != null) {
            queryParameters['searchJournalistDto'] = requestParameters['searchJournalistDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageJournalistDtoFromJSON(jsonValue));
    }

    /**
     * 언론인 리스트
     * 언론인 리스트
     */
    async findAllJournalists(requestParameters: FindAllJournalistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageJournalistDto> {
        const response = await this.findAllJournalistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인명 자동완성, 정열 name!asc 
     * 언론인명 자동완성, pageSize로만 처리하기
     */
    async findAutoComplete1Raw(requestParameters: FindAutoComplete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListJournalistAutoCompleteDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAutoComplete1().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAutoComplete1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListJournalistAutoCompleteDtoFromJSON(jsonValue));
    }

    /**
     * 언론인명 자동완성, 정열 name!asc 
     * 언론인명 자동완성, pageSize로만 처리하기
     */
    async findAutoComplete1(requestParameters: FindAutoComplete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListJournalistAutoCompleteDto> {
        const response = await this.findAutoComplete1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 상위분야 선택 후 하위 분야 가져오기
     * 언론인 하위 분야 가져오기
     */
    async findJournalistFieldSubRaw(requestParameters: FindJournalistFieldSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListNameCountDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findJournalistFieldSub().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/field`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListNameCountDtoFromJSON(jsonValue));
    }

    /**
     * 언론인 상위분야 선택 후 하위 분야 가져오기
     * 언론인 하위 분야 가져오기
     */
    async findJournalistFieldSub(requestParameters: FindJournalistFieldSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListNameCountDto> {
        const response = await this.findJournalistFieldSubRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 ID목록으로 정보 가져오기
     * 언론인 ID목록으로 정보 가져오기
     */
    async findJournalistInfoByIdListRaw(requestParameters: FindJournalistInfoByIdListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListJournalistDto>> {
        if (requestParameters['searchJournalistIdListDto'] == null) {
            throw new runtime.RequiredError(
                'searchJournalistIdListDto',
                'Required parameter "searchJournalistIdListDto" was null or undefined when calling findJournalistInfoByIdList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/infos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchJournalistIdListDtoToJSON(requestParameters['searchJournalistIdListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListJournalistDtoFromJSON(jsonValue));
    }

    /**
     * 언론인 ID목록으로 정보 가져오기
     * 언론인 ID목록으로 정보 가져오기
     */
    async findJournalistInfoByIdList(requestParameters: FindJournalistInfoByIdListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListJournalistDto> {
        const response = await this.findJournalistInfoByIdListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 상위분야 선택 후 하위 지역 가져오기
     * 언론인 하위 지역 가져오기
     */
    async findJournalistLocationSubRaw(requestParameters: FindJournalistLocationSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListNameCountDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findJournalistLocationSub().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListNameCountDtoFromJSON(jsonValue));
    }

    /**
     * 언론인 상위분야 선택 후 하위 지역 가져오기
     * 언론인 하위 지역 가져오기
     */
    async findJournalistLocationSub(requestParameters: FindJournalistLocationSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListNameCountDto> {
        const response = await this.findJournalistLocationSubRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인분야 자동완성, Weight/분야명으로 정열
     * 언론인분야 자동완성
     */
    async findJournalistTypeAutoCompleteRaw(requestParameters: FindJournalistTypeAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListNameCountDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findJournalistTypeAutoComplete().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findJournalistTypeAutoComplete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/typeautocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListNameCountDtoFromJSON(jsonValue));
    }

    /**
     * 언론인분야 자동완성, Weight/분야명으로 정열
     * 언론인분야 자동완성
     */
    async findJournalistTypeAutoComplete(requestParameters: FindJournalistTypeAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListNameCountDto> {
        const response = await this.findJournalistTypeAutoCompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인Id(journalistId)로 정보를 가져옵니다.
     * 언론인 정보 확인
     */
    async findMedia1Raw(requestParameters: FindMedia1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonJournalistDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findMedia1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonJournalistDtoFromJSON(jsonValue));
    }

    /**
     * 언론인Id(journalistId)로 정보를 가져옵니다.
     * 언론인 정보 확인
     */
    async findMedia1(requestParameters: FindMedia1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonJournalistDto> {
        const response = await this.findMedia1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 간편검색 언론인, 정열 name!asc 
     * 간편검색 언론인, 언론인명/이메일주소 - 페이징 처리는 안됨, pageSize로만 처리하기
     */
    async findSimpleAutoComplete1Raw(requestParameters: FindSimpleAutoComplete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListJournalistAutoCompleteDto>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling findSimpleAutoComplete1().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findSimpleAutoComplete1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/simple`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListJournalistAutoCompleteDtoFromJSON(jsonValue));
    }

    /**
     * 간편검색 언론인, 정열 name!asc 
     * 간편검색 언론인, 언론인명/이메일주소 - 페이징 처리는 안됨, pageSize로만 처리하기
     */
    async findSimpleAutoComplete1(requestParameters: FindSimpleAutoComplete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListJournalistAutoCompleteDto> {
        const response = await this.findSimpleAutoComplete1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 추가 언론인의 이름/이메일이 시스템 언론인에 존재하는지 조회
     * 시스템 언론인에 이름/이메일 동일한 언론인이 존재하는지 조회
     */
    async findSystemJournalistRaw(requestParameters: FindSystemJournalistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonJournalistDto>> {
        if (requestParameters['searchNameEmailDto'] == null) {
            throw new runtime.RequiredError(
                'searchNameEmailDto',
                'Required parameter "searchNameEmailDto" was null or undefined when calling findSystemJournalist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/dupcheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchNameEmailDtoToJSON(requestParameters['searchNameEmailDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonJournalistDtoFromJSON(jsonValue));
    }

    /**
     * 사용자 추가 언론인의 이름/이메일이 시스템 언론인에 존재하는지 조회
     * 시스템 언론인에 이름/이메일 동일한 언론인이 존재하는지 조회
     */
    async findSystemJournalist(requestParameters: FindSystemJournalistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonJournalistDto> {
        const response = await this.findSystemJournalistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 추가한 언론인 정보 수정하기, 본인이 작성한 언론인만 가능
     * 사용자 추가 언론인 수정하기
     */
    async modifyJournalistInfoRaw(requestParameters: ModifyJournalistInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyJournalistInfo().'
            );
        }

        if (requestParameters['modifyJournalistDto'] == null) {
            throw new runtime.RequiredError(
                'modifyJournalistDto',
                'Required parameter "modifyJournalistDto" was null or undefined when calling modifyJournalistInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyJournalistDtoToJSON(requestParameters['modifyJournalistDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자가 추가한 언론인 정보 수정하기, 본인이 작성한 언론인만 가능
     * 사용자 추가 언론인 수정하기
     */
    async modifyJournalistInfo(requestParameters: ModifyJournalistInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyJournalistInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 추가 언론인 사진 변경
     * 사용자 추가 언론인 사진 변경
     */
    async modifyJournalistPhotoRaw(requestParameters: ModifyJournalistPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyJournalistPhoto().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling modifyJournalistPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/v1/svc/journalists/photo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 추가 언론인 사진 변경
     * 사용자 추가 언론인 사진 변경
     */
    async modifyJournalistPhoto(requestParameters: ModifyJournalistPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyJournalistPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
