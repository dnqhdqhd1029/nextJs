/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddActionRequest,
  BaseResponseCommonActionDto,
  BaseResponseCommonActionFilterDto,
  BaseResponseCommonPageActionDtoForList,
  BaseResponseCommonString,
  ModifyActionRequest,
  ModifyShareCodeOwnerDto,
  PageableDto,
  RequestActionDto,
  RequestActionExcelDto,
  RequestActionFilterDto,
  SearchActionDto,
} from '../models/index';
import {
    AddActionRequestFromJSON,
    AddActionRequestToJSON,
    BaseResponseCommonActionDtoFromJSON,
    BaseResponseCommonActionDtoToJSON,
    BaseResponseCommonActionFilterDtoFromJSON,
    BaseResponseCommonActionFilterDtoToJSON,
    BaseResponseCommonPageActionDtoForListFromJSON,
    BaseResponseCommonPageActionDtoForListToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    ModifyActionRequestFromJSON,
    ModifyActionRequestToJSON,
    ModifyShareCodeOwnerDtoFromJSON,
    ModifyShareCodeOwnerDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RequestActionDtoFromJSON,
    RequestActionDtoToJSON,
    RequestActionExcelDtoFromJSON,
    RequestActionExcelDtoToJSON,
    RequestActionFilterDtoFromJSON,
    RequestActionFilterDtoToJSON,
    SearchActionDtoFromJSON,
    SearchActionDtoToJSON,
} from '../models/index';

export interface AddActionOperationRequest {
    addActionRequest?: AddActionRequest;
}

export interface DeleteActionRequest {
    id: number;
    requestActionDto: RequestActionDto;
}

export interface DownloadActionsRequest {
    requestDto: RequestActionExcelDto;
}

export interface FindActionInfoRequest {
    id: number;
    searchDto: RequestActionDto;
}

export interface FindAllActionByCondsRequest {
    requestDto: SearchActionDto;
    pageableDto: PageableDto;
}

export interface GetActionFilters1Request {
    requestActionFilterDto: RequestActionFilterDto;
}

export interface ModifyActionOperationRequest {
    id: number;
    modifyActionRequest?: ModifyActionRequest;
}

export interface ModifyMailingNewswireRequest {
    id: number;
    modifyShareCodeOwnerDto: ModifyShareCodeOwnerDto;
}

/**
 * 
 */
export class ActionControllerApi extends runtime.BaseAPI {

    /**
     * 활동(NOTE, PROMISE, PHONE_CALL, INQUIRY) 추가
     * 활동(노트, 약속, 전화, 문의) 추가
     */
    async addActionRaw(requestParameters: AddActionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonActionDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddActionRequestToJSON(requestParameters['addActionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonActionDtoFromJSON(jsonValue));
    }

    /**
     * 활동(NOTE, PROMISE, PHONE_CALL, INQUIRY) 추가
     * 활동(노트, 약속, 전화, 문의) 추가
     */
    async addAction(requestParameters: AddActionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonActionDto> {
        const response = await this.addActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동(노트, 약속, 전화, 문의) 정보를 삭제합니다.
     * 활동 삭제(노트, 약속, 전화, 문의)
     */
    async deleteActionRaw(requestParameters: DeleteActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAction().'
            );
        }

        if (requestParameters['requestActionDto'] == null) {
            throw new runtime.RequiredError(
                'requestActionDto',
                'Required parameter "requestActionDto" was null or undefined when calling deleteAction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RequestActionDtoToJSON(requestParameters['requestActionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 활동(노트, 약속, 전화, 문의) 정보를 삭제합니다.
     * 활동 삭제(노트, 약속, 전화, 문의)
     */
    async deleteAction(requestParameters: DeleteActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동목록 엑셀 다운로드
     * 활동목록 엑셀 다운로드
     */
    async downloadActionsRaw(requestParameters: DownloadActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling downloadActions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestDto'] != null) {
            queryParameters['requestDto'] = requestParameters['requestDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action/excel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 활동목록 엑셀 다운로드
     * 활동목록 엑셀 다운로드
     */
    async downloadActions(requestParameters: DownloadActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadActionsRaw(requestParameters, initOverrides);
    }

    /**
     * 활동 정보를 가져옵니다.
     * 활동 정보 확인
     */
    async findActionInfoRaw(requestParameters: FindActionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonActionDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findActionInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findActionInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonActionDtoFromJSON(jsonValue));
    }

    /**
     * 활동 정보를 가져옵니다.
     * 활동 정보 확인
     */
    async findActionInfo(requestParameters: FindActionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonActionDto> {
        const response = await this.findActionInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동목록 리스트
     * 활동목록 리스트
     */
    async findAllActionByCondsRaw(requestParameters: FindAllActionByCondsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageActionDtoForList>> {
        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling findAllActionByConds().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllActionByConds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestDto'] != null) {
            queryParameters['requestDto'] = requestParameters['requestDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageActionDtoForListFromJSON(jsonValue));
    }

    /**
     * 활동목록 리스트
     * 활동목록 리스트
     */
    async findAllActionByConds(requestParameters: FindAllActionByCondsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageActionDtoForList> {
        const response = await this.findAllActionByCondsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동 조회 필터 목록(code, name, count) 가져오기
     * 활동 조회 필터 가져오기
     */
    async getActionFilters1Raw(requestParameters: GetActionFilters1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonActionFilterDto>> {
        if (requestParameters['requestActionFilterDto'] == null) {
            throw new runtime.RequiredError(
                'requestActionFilterDto',
                'Required parameter "requestActionFilterDto" was null or undefined when calling getActionFilters1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestActionFilterDtoToJSON(requestParameters['requestActionFilterDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonActionFilterDtoFromJSON(jsonValue));
    }

    /**
     * 활동 조회 필터 목록(code, name, count) 가져오기
     * 활동 조회 필터 가져오기
     */
    async getActionFilters1(requestParameters: GetActionFilters1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonActionFilterDto> {
        const response = await this.getActionFilters1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동(노트, 약속, 전화, 문의) 정보를 수정합니다.
     * 활동 수정(노트, 약속, 전화, 문의)
     */
    async modifyActionRaw(requestParameters: ModifyActionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyAction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyActionRequestToJSON(requestParameters['modifyActionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 활동(노트, 약속, 전화, 문의) 정보를 수정합니다.
     * 활동 수정(노트, 약속, 전화, 문의)
     */
    async modifyAction(requestParameters: ModifyActionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모든 활동에 대해 공유설정/소유자 수정
     * 모든 활동에 대해 공유설정/소유자 수정
     */
    async modifyMailingNewswireRaw(requestParameters: ModifyMailingNewswireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyMailingNewswire().'
            );
        }

        if (requestParameters['modifyShareCodeOwnerDto'] == null) {
            throw new runtime.RequiredError(
                'modifyShareCodeOwnerDto',
                'Required parameter "modifyShareCodeOwnerDto" was null or undefined when calling modifyMailingNewswire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/action/share/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyShareCodeOwnerDtoToJSON(requestParameters['modifyShareCodeOwnerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 모든 활동에 대해 공유설정/소유자 수정
     * 모든 활동에 대해 공유설정/소유자 수정
     */
    async modifyMailingNewswire(requestParameters: ModifyMailingNewswireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyMailingNewswireRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
