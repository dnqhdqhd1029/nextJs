/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonBoolean,
  BaseResponseCommonListGroupSimpleDto,
  BaseResponseCommonListString,
  BaseResponseCommonPageUserDto,
  BaseResponseCommonString,
  BaseResponseCommonUserDto,
  ChangeContactInfoDto,
  ChangePasswordDto,
  CheckEmailDto,
  CheckPasswordDto,
  CreateUserDto,
  ModifyDashboardDto,
  ModifyUserDto,
  ModifyUserFirstDto,
  ModifyUserTimezoneDto,
  PageableDto,
  RejectNewsletterDto,
  RequestConfirmOtpDto,
  RequestConfirmUserOtpDto,
  RequestEmailDto,
  RequestUserOtpDto,
  ResetPasswordDto,
  SearchUserDto,
  UserDto,
} from '../models/index';
import {
    BaseResponseCommonBooleanFromJSON,
    BaseResponseCommonBooleanToJSON,
    BaseResponseCommonListGroupSimpleDtoFromJSON,
    BaseResponseCommonListGroupSimpleDtoToJSON,
    BaseResponseCommonListStringFromJSON,
    BaseResponseCommonListStringToJSON,
    BaseResponseCommonPageUserDtoFromJSON,
    BaseResponseCommonPageUserDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    BaseResponseCommonUserDtoFromJSON,
    BaseResponseCommonUserDtoToJSON,
    ChangeContactInfoDtoFromJSON,
    ChangeContactInfoDtoToJSON,
    ChangePasswordDtoFromJSON,
    ChangePasswordDtoToJSON,
    CheckEmailDtoFromJSON,
    CheckEmailDtoToJSON,
    CheckPasswordDtoFromJSON,
    CheckPasswordDtoToJSON,
    CreateUserDtoFromJSON,
    CreateUserDtoToJSON,
    ModifyDashboardDtoFromJSON,
    ModifyDashboardDtoToJSON,
    ModifyUserDtoFromJSON,
    ModifyUserDtoToJSON,
    ModifyUserFirstDtoFromJSON,
    ModifyUserFirstDtoToJSON,
    ModifyUserTimezoneDtoFromJSON,
    ModifyUserTimezoneDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RejectNewsletterDtoFromJSON,
    RejectNewsletterDtoToJSON,
    RequestConfirmOtpDtoFromJSON,
    RequestConfirmOtpDtoToJSON,
    RequestConfirmUserOtpDtoFromJSON,
    RequestConfirmUserOtpDtoToJSON,
    RequestEmailDtoFromJSON,
    RequestEmailDtoToJSON,
    RequestUserOtpDtoFromJSON,
    RequestUserOtpDtoToJSON,
    ResetPasswordDtoFromJSON,
    ResetPasswordDtoToJSON,
    SearchUserDtoFromJSON,
    SearchUserDtoToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models/index';

export interface ChangeContactInfoRequest {
    changeContactInfoDto: ChangeContactInfoDto;
}

export interface ChangePasswdRequest {
    id: number;
    changePasswordDto: ChangePasswordDto;
}

export interface CheckDupEmailRequest {
    checkEmailDto: CheckEmailDto;
}

export interface CheckOtpCodeRequest {
    requestConfirmUserOtpDto: RequestConfirmUserOtpDto;
}

export interface CheckOtpCode1Request {
    requestConfirmOtpDto: RequestConfirmOtpDto;
}

export interface CheckpasswdRequest {
    checkPasswordDto: CheckPasswordDto;
}

export interface ConfirmAdminFirstRequest {
    id: number;
}

export interface DeleteUserInfoRequest {
    id: number;
}

export interface FindAllUserCompanyRequest {
    searchUserDto: SearchUserDto;
    pageableDto: PageableDto;
}

export interface FindUserRequest {
    id: number;
}

export interface ModifyAdminFirstRequest {
    id: number;
    modifyUserFirstDto: ModifyUserFirstDto;
}

export interface ModifyDashboardInfoRequest {
    id: number;
    modifyDashboardDto: ModifyDashboardDto;
}

export interface ModifyUserFirstRequest {
    id: number;
    modifyUserFirstDto: ModifyUserFirstDto;
}

export interface ModifyUserInfoRequest {
    id: number;
    modifyUserDto: ModifyUserDto;
}

export interface ModifyUserStatusRequest {
    id: number;
    status: boolean;
}

export interface ModifyUserTimezoneRequest {
    id: number;
    modifyUserTimezoneDto: ModifyUserTimezoneDto;
}

export interface RejectNewsletterRequest {
    rejectNewsletterDto: RejectNewsletterDto;
}

export interface ResetPasswordRequest {
    id: number;
    resetPasswordDto: ResetPasswordDto;
}

export interface ResetPasswordSendMailRequest {
    id: number;
}

export interface ResetPasswordSendMailNotLoginRequest {
    requestEmailDto: RequestEmailDto;
}

export interface SaveUserRequest {
    createUserDto: CreateUserDto;
}

export interface SelectedGroupRequest {
    id: number;
}

export interface SendMailFirstRegistRequest {
    id: number;
}

export interface SendUserOtpMailRequest {
    requestUserOtpDto: RequestUserOtpDto;
}

/**
 * 
 */
export class UserApiControllerApi extends runtime.BaseAPI {

    /**
     * 본인 연락처 정보 수정
     * 연락처 정보 수정
     */
    async changeContactInfoRaw(requestParameters: ChangeContactInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['changeContactInfoDto'] == null) {
            throw new runtime.RequiredError(
                'changeContactInfoDto',
                'Required parameter "changeContactInfoDto" was null or undefined when calling changeContactInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/contact`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeContactInfoDtoToJSON(requestParameters['changeContactInfoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 본인 연락처 정보 수정
     * 연락처 정보 수정
     */
    async changeContactInfo(requestParameters: ChangeContactInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.changeContactInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 비밀번호 변경
     * 사용자 비밀번호 변경
     */
    async changePasswdRaw(requestParameters: ChangePasswdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling changePasswd().'
            );
        }

        if (requestParameters['changePasswordDto'] == null) {
            throw new runtime.RequiredError(
                'changePasswordDto',
                'Required parameter "changePasswordDto" was null or undefined when calling changePasswd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/{id}/passwd`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordDtoToJSON(requestParameters['changePasswordDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 비밀번호 변경
     * 사용자 비밀번호 변경
     */
    async changePasswd(requestParameters: ChangePasswdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.changePasswdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자 메뉴 접근 시 가능여부 확인(이전 접속 IP와 현재 IP가 동일한지 확인)
     * 관리자 메뉴 접근 시 가능여부 확인(이전 접속 IP와 현재 IP가 동일한지 확인)
     */
    async checkAdminMenuAccessRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/admin/menu/access`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 관리자 메뉴 접근 시 가능여부 확인(이전 접속 IP와 현재 IP가 동일한지 확인)
     * 관리자 메뉴 접근 시 가능여부 확인(이전 접속 IP와 현재 IP가 동일한지 확인)
     */
    async checkAdminMenuAccess(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkAdminMenuAccessRaw(initOverrides);
        return await response.value();
    }

    /**
     * 사용중인 email 목록을 반환합니다. 정상이면 빈 배열 반환
     * 동일한 이메일 사용자 존재 여부 확인
     */
    async checkDupEmailRaw(requestParameters: CheckDupEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListString>> {
        if (requestParameters['checkEmailDto'] == null) {
            throw new runtime.RequiredError(
                'checkEmailDto',
                'Required parameter "checkEmailDto" was null or undefined when calling checkDupEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/checkemail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckEmailDtoToJSON(requestParameters['checkEmailDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListStringFromJSON(jsonValue));
    }

    /**
     * 사용중인 email 목록을 반환합니다. 정상이면 빈 배열 반환
     * 동일한 이메일 사용자 존재 여부 확인
     */
    async checkDupEmail(requestParameters: CheckDupEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListString> {
        const response = await this.checkDupEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 OTP 코드 확인
     * 사용자 OTP 코드 확인
     */
    async checkOtpCodeRaw(requestParameters: CheckOtpCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestConfirmUserOtpDto'] == null) {
            throw new runtime.RequiredError(
                'requestConfirmUserOtpDto',
                'Required parameter "requestConfirmUserOtpDto" was null or undefined when calling checkOtpCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/auth/users/check/otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestConfirmUserOtpDtoToJSON(requestParameters['requestConfirmUserOtpDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 OTP 코드 확인
     * 사용자 OTP 코드 확인
     */
    async checkOtpCode(requestParameters: CheckOtpCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkOtpCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자 입력한 OTP 코드 확인
     * 관리자 입력한 OTP 코드 확인
     */
    async checkOtpCode1Raw(requestParameters: CheckOtpCode1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestConfirmOtpDto'] == null) {
            throw new runtime.RequiredError(
                'requestConfirmOtpDto',
                'Required parameter "requestConfirmOtpDto" was null or undefined when calling checkOtpCode1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/admin/check/otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestConfirmOtpDtoToJSON(requestParameters['requestConfirmOtpDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 관리자 입력한 OTP 코드 확인
     * 관리자 입력한 OTP 코드 확인
     */
    async checkOtpCode1(requestParameters: CheckOtpCode1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkOtpCode1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 비밀번호 재확인 시 사용
     * 사용자 비밀번호 확인
     */
    async checkpasswdRaw(requestParameters: CheckpasswdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonBoolean>> {
        if (requestParameters['checkPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'checkPasswordDto',
                'Required parameter "checkPasswordDto" was null or undefined when calling checkpasswd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/checkpasswd`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckPasswordDtoToJSON(requestParameters['checkPasswordDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonBooleanFromJSON(jsonValue));
    }

    /**
     * 사용자 비밀번호 재확인 시 사용
     * 사용자 비밀번호 확인
     */
    async checkpasswd(requestParameters: CheckpasswdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonBoolean> {
        const response = await this.checkpasswdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 최초 관리자 정보 입력 후 받은 메일에서 최종 인증
     * 최초 관리자 최종 인증
     */
    async confirmAdminFirstRaw(requestParameters: ConfirmAdminFirstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling confirmAdminFirst().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/auth/users/confirm/admin/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 최초 관리자 정보 입력 후 받은 메일에서 최종 인증
     * 최초 관리자 최종 인증
     */
    async confirmAdminFirst(requestParameters: ConfirmAdminFirstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.confirmAdminFirstRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미인증 회원 삭제
     * 사용자 삭제 - 미인증 상태인 경우에만 가능
     */
    async deleteUserInfoRaw(requestParameters: DeleteUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미인증 회원 삭제
     * 사용자 삭제 - 미인증 상태인 경우에만 가능
     */
    async deleteUserInfo(requestParameters: DeleteUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [테스트]전체 사용자 목록을 가져옵니다.
     * [테스트]전체 사용자 목록
     */
    async findAllUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDtoFromJSON));
    }

    /**
     * [테스트]전체 사용자 목록을 가져옵니다.
     * [테스트]전체 사용자 목록
     */
    async findAllUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDto>> {
        const response = await this.findAllUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * 회사내 전체 사용자 목록을 가져옵니다.
     * 로그인 사용자 회사에 속한 사용자 목록
     */
    async findAllUserCompanyRaw(requestParameters: FindAllUserCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageUserDto>> {
        if (requestParameters['searchUserDto'] == null) {
            throw new runtime.RequiredError(
                'searchUserDto',
                'Required parameter "searchUserDto" was null or undefined when calling findAllUserCompany().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllUserCompany().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchUserDto'] != null) {
            queryParameters['searchUserDto'] = requestParameters['searchUserDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageUserDtoFromJSON(jsonValue));
    }

    /**
     * 회사내 전체 사용자 목록을 가져옵니다.
     * 로그인 사용자 회사에 속한 사용자 목록
     */
    async findAllUserCompany(requestParameters: FindAllUserCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageUserDto> {
        const response = await this.findAllUserCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 본인의 연락처 정보를 가져옵니다.
     * 연락처 정보 확인
     */
    async findContactInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/contact`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 본인의 연락처 정보를 가져옵니다.
     * 연락처 정보 확인
     */
    async findContactInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.findContactInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * id(email 아님)로 사용자 정보를 가져옵니다.
     * 사용자 정보 확인
     */
    async findUserRaw(requestParameters: FindUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonUserDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonUserDtoFromJSON(jsonValue));
    }

    /**
     * id(email 아님)로 사용자 정보를 가져옵니다.
     * 사용자 정보 확인
     */
    async findUser(requestParameters: FindUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonUserDto> {
        const response = await this.findUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 속한 그룹정보를 가져옵니다.
     * 사용자가 속한 그룹 정보 가져오기
     */
    async findUser1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListGroupSimpleDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListGroupSimpleDtoFromJSON(jsonValue));
    }

    /**
     * 사용자가 속한 그룹정보를 가져옵니다.
     * 사용자가 속한 그룹 정보 가져오기
     */
    async findUser1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListGroupSimpleDto> {
        const response = await this.findUser1Raw(initOverrides);
        return await response.value();
    }

    /**
     * [테스트]Logback을 이용한 로깅 테스트
     * [테스트]서버에 로그 남기기
     */
    async logtestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/logtest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * [테스트]Logback을 이용한 로깅 테스트
     * [테스트]서버에 로그 남기기
     */
    async logtest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.logtestRaw(initOverrides);
        return await response.value();
    }

    /**
     * 관리자 최초 추가 정보를 입력받습니다.(USER20 화면)
     * 인증 메일을 통해 들어온 최초 관리자 정보 최초 수정(USER20 화면)
     */
    async modifyAdminFirstRaw(requestParameters: ModifyAdminFirstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyAdminFirst().'
            );
        }

        if (requestParameters['modifyUserFirstDto'] == null) {
            throw new runtime.RequiredError(
                'modifyUserFirstDto',
                'Required parameter "modifyUserFirstDto" was null or undefined when calling modifyAdminFirst().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/auth/users/admin/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyUserFirstDtoToJSON(requestParameters['modifyUserFirstDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 관리자 최초 추가 정보를 입력받습니다.(USER20 화면)
     * 인증 메일을 통해 들어온 최초 관리자 정보 최초 수정(USER20 화면)
     */
    async modifyAdminFirst(requestParameters: ModifyAdminFirstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyAdminFirstRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 본인 대시보드 정보 수정
     * 사용자 대시보드 정보 수정
     */
    async modifyDashboardInfoRaw(requestParameters: ModifyDashboardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyDashboardInfo().'
            );
        }

        if (requestParameters['modifyDashboardDto'] == null) {
            throw new runtime.RequiredError(
                'modifyDashboardDto',
                'Required parameter "modifyDashboardDto" was null or undefined when calling modifyDashboardInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/dashboard/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyDashboardDtoToJSON(requestParameters['modifyDashboardDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 본인 대시보드 정보 수정
     * 사용자 대시보드 정보 수정
     */
    async modifyDashboardInfo(requestParameters: ModifyDashboardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyDashboardInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 추가 정보를 입력받습니다. 사용자 인증 과정(SET50-6 화면)
     * 인증 메일을 통해 들어온 사용자 정보 최초 수정(SET50-6 화면)
     */
    async modifyUserFirstRaw(requestParameters: ModifyUserFirstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyUserFirst().'
            );
        }

        if (requestParameters['modifyUserFirstDto'] == null) {
            throw new runtime.RequiredError(
                'modifyUserFirstDto',
                'Required parameter "modifyUserFirstDto" was null or undefined when calling modifyUserFirst().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/auth/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyUserFirstDtoToJSON(requestParameters['modifyUserFirstDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 추가 정보를 입력받습니다. 사용자 인증 과정(SET50-6 화면)
     * 인증 메일을 통해 들어온 사용자 정보 최초 수정(SET50-6 화면)
     */
    async modifyUserFirst(requestParameters: ModifyUserFirstRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyUserFirstRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 본인 또는 관리자가 사용자 정보를 수정합니다.
     * 사용자 정보 수정, 본인 또는 관리자 권한
     */
    async modifyUserInfoRaw(requestParameters: ModifyUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyUserInfo().'
            );
        }

        if (requestParameters['modifyUserDto'] == null) {
            throw new runtime.RequiredError(
                'modifyUserDto',
                'Required parameter "modifyUserDto" was null or undefined when calling modifyUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyUserDtoToJSON(requestParameters['modifyUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 본인 또는 관리자가 사용자 정보를 수정합니다.
     * 사용자 정보 수정, 본인 또는 관리자 권한
     */
    async modifyUserInfo(requestParameters: ModifyUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 상태를 활성화/비활성화 합니다.
     * 사용자 활성화 비활성화
     */
    async modifyUserStatusRaw(requestParameters: ModifyUserStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyUserStatus().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling modifyUserStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/{id}/status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 상태를 활성화/비활성화 합니다.
     * 사용자 활성화 비활성화
     */
    async modifyUserStatus(requestParameters: ModifyUserStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyUserStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 본인 또는 관리자가 사용자 표준시간대를 수정합니다.
     * 사용자 표준시간대 설정
     */
    async modifyUserTimezoneRaw(requestParameters: ModifyUserTimezoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyUserTimezone().'
            );
        }

        if (requestParameters['modifyUserTimezoneDto'] == null) {
            throw new runtime.RequiredError(
                'modifyUserTimezoneDto',
                'Required parameter "modifyUserTimezoneDto" was null or undefined when calling modifyUserTimezone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/timezone/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyUserTimezoneDtoToJSON(requestParameters['modifyUserTimezoneDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 본인 또는 관리자가 사용자 표준시간대를 수정합니다.
     * 사용자 표준시간대 설정
     */
    async modifyUserTimezone(requestParameters: ModifyUserTimezoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyUserTimezoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스레터 수신거부 하기
     * 뉴스레터 수신거부 하기
     */
    async rejectNewsletterRaw(requestParameters: RejectNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['rejectNewsletterDto'] == null) {
            throw new runtime.RequiredError(
                'rejectNewsletterDto',
                'Required parameter "rejectNewsletterDto" was null or undefined when calling rejectNewsletter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/auth/users/reject/newsletter`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RejectNewsletterDtoToJSON(requestParameters['rejectNewsletterDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스레터 수신거부 하기
     * 뉴스레터 수신거부 하기
     */
    async rejectNewsletter(requestParameters: RejectNewsletterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.rejectNewsletterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 비밀번호 재설정, 확인비밀번호 빈값으로 보낼시 이전 비밀번호와 동일한지 체크
     * 사용자 비밀번호 재설정
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling resetPassword().'
            );
        }

        if (requestParameters['resetPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'resetPasswordDto',
                'Required parameter "resetPasswordDto" was null or undefined when calling resetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/auth/users/{id}/resetpassword`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordDtoToJSON(requestParameters['resetPasswordDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 비밀번호 재설정, 확인비밀번호 빈값으로 보낼시 이전 비밀번호와 동일한지 체크
     * 사용자 비밀번호 재설정
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.resetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자가 사용자에게 비밀번호 재설정 메일을 보냄.
     * 관리자가 사용자에게 비밀번호 재설정 메일을 보냄
     */
    async resetPasswordSendMailRaw(requestParameters: ResetPasswordSendMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling resetPasswordSendMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/{id}/send/resetpassword`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 관리자가 사용자에게 비밀번호 재설정 메일을 보냄.
     * 관리자가 사용자에게 비밀번호 재설정 메일을 보냄
     */
    async resetPasswordSendMail(requestParameters: ResetPasswordSendMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.resetPasswordSendMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 직접 자신에게 비밀번호 재설정 메일을 보냄
     * 사용자가 직접 자신에게 비밀번호 재설정 메일을 보냄
     */
    async resetPasswordSendMailNotLoginRaw(requestParameters: ResetPasswordSendMailNotLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestEmailDto'] == null) {
            throw new runtime.RequiredError(
                'requestEmailDto',
                'Required parameter "requestEmailDto" was null or undefined when calling resetPasswordSendMailNotLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nouser/send/resetpassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestEmailDtoToJSON(requestParameters['requestEmailDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자가 직접 자신에게 비밀번호 재설정 메일을 보냄
     * 사용자가 직접 자신에게 비밀번호 재설정 메일을 보냄
     */
    async resetPasswordSendMailNotLogin(requestParameters: ResetPasswordSendMailNotLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.resetPasswordSendMailNotLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자를 추가합니다.
     * 사용자 추가
     */
    async saveUserRaw(requestParameters: SaveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['createUserDto'] == null) {
            throw new runtime.RequiredError(
                'createUserDto',
                'Required parameter "createUserDto" was null or undefined when calling saveUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(requestParameters['createUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자를 추가합니다.
     * 사용자 추가
     */
    async saveUser(requestParameters: SaveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.saveUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 다음 로그인시 선택된 그룹을 설정하기 위해 선택한 그룹ID를 저장해 놓는다
     * 서비스 화면에서 선택한 그룹ID를 사용자 정보에 설정
     */
    async selectedGroupRaw(requestParameters: SelectedGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling selectedGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 다음 로그인시 선택된 그룹을 설정하기 위해 선택한 그룹ID를 저장해 놓는다
     * 서비스 화면에서 선택한 그룹ID를 사용자 정보에 설정
     */
    async selectedGroup(requestParameters: SelectedGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.selectedGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 최초 인증 메일 재발송
     * 사용자 최초 인증 메일 재발송
     */
    async sendMailFirstRegistRaw(requestParameters: SendMailFirstRegistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sendMailFirstRegist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/users/{id}/send/firstregist`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 최초 인증 메일 재발송
     * 사용자 최초 인증 메일 재발송
     */
    async sendMailFirstRegist(requestParameters: SendMailFirstRegistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.sendMailFirstRegistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 관리자 메뉴 접속시 OTP 코드 메일 발송/재발송
     * 관리자 메뉴 접속시 OTP 코드 메일 발송/재발송
     */
    async sendOtpMailRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/admin/menu/access/otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 관리자 메뉴 접속시 OTP 코드 메일 발송/재발송
     * 관리자 메뉴 접속시 OTP 코드 메일 발송/재발송
     */
    async sendOtpMail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.sendOtpMailRaw(initOverrides);
        return await response.value();
    }

    /**
     * 사용자 계정 잠겼을 때 풀기위한 OTP 코드 메일 발송/재발송
     * 사용자 OTP 코드 메일 발송/재발송
     */
    async sendUserOtpMailRaw(requestParameters: SendUserOtpMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestUserOtpDto'] == null) {
            throw new runtime.RequiredError(
                'requestUserOtpDto',
                'Required parameter "requestUserOtpDto" was null or undefined when calling sendUserOtpMail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/auth/users/send/otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestUserOtpDtoToJSON(requestParameters['requestUserOtpDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 계정 잠겼을 때 풀기위한 OTP 코드 메일 발송/재발송
     * 사용자 OTP 코드 메일 발송/재발송
     */
    async sendUserOtpMail(requestParameters: SendUserOtpMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.sendUserOtpMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
