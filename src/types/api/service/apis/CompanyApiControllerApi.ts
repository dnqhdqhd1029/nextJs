/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonCompanyDto,
  BaseResponseCommonString,
  ModifyCompanyRequest,
} from '../models/index';
import {
    BaseResponseCommonCompanyDtoFromJSON,
    BaseResponseCommonCompanyDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    ModifyCompanyRequestFromJSON,
    ModifyCompanyRequestToJSON,
} from '../models/index';

export interface ModifyCompanyOperationRequest {
    id: number;
    modifyCompanyRequest?: ModifyCompanyRequest;
}

/**
 * 
 */
export class CompanyApiControllerApi extends runtime.BaseAPI {

    /**
     * 본인 회사정보를 조회합니다
     * 본인 회사정보 조회
     */
    async findCompanyInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonCompanyDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/company/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonCompanyDtoFromJSON(jsonValue));
    }

    /**
     * 본인 회사정보를 조회합니다
     * 본인 회사정보 조회
     */
    async findCompanyInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonCompanyDto> {
        const response = await this.findCompanyInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * 회사 정보 변경, 관리자만 가능
     * 회사 정보 변경
     */
    async modifyCompanyRaw(requestParameters: ModifyCompanyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyCompany().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/company/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyCompanyRequestToJSON(requestParameters['modifyCompanyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 회사 정보 변경, 관리자만 가능
     * 회사 정보 변경
     */
    async modifyCompany(requestParameters: ModifyCompanyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
