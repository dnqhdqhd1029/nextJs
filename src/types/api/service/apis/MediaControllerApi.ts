/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonListMediaAutoCompleteDto,
  BaseResponseCommonListMediaGroupAutoCompleteDto,
  BaseResponseCommonListMediaValueDto,
  BaseResponseCommonListNameCountDto,
  BaseResponseCommonListString,
  BaseResponseCommonLong,
  BaseResponseCommonMediaDto,
  BaseResponseCommonNameCountListDto,
  BaseResponseCommonPageMediaDto,
  BaseResponseCommonString,
  CreateMediaArrayDto,
  CreateMediaDto,
  ModifyMediaDto,
  PageableDto,
  SearchMediaDto,
  SearchMediaIdListDto,
  SearchMediaTypeDto,
  SearchNameDto,
  SearchSimpleDto,
} from '../models/index';
import {
    BaseResponseCommonListMediaAutoCompleteDtoFromJSON,
    BaseResponseCommonListMediaAutoCompleteDtoToJSON,
    BaseResponseCommonListMediaGroupAutoCompleteDtoFromJSON,
    BaseResponseCommonListMediaGroupAutoCompleteDtoToJSON,
    BaseResponseCommonListMediaValueDtoFromJSON,
    BaseResponseCommonListMediaValueDtoToJSON,
    BaseResponseCommonListNameCountDtoFromJSON,
    BaseResponseCommonListNameCountDtoToJSON,
    BaseResponseCommonListStringFromJSON,
    BaseResponseCommonListStringToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonMediaDtoFromJSON,
    BaseResponseCommonMediaDtoToJSON,
    BaseResponseCommonNameCountListDtoFromJSON,
    BaseResponseCommonNameCountListDtoToJSON,
    BaseResponseCommonPageMediaDtoFromJSON,
    BaseResponseCommonPageMediaDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CreateMediaArrayDtoFromJSON,
    CreateMediaArrayDtoToJSON,
    CreateMediaDtoFromJSON,
    CreateMediaDtoToJSON,
    ModifyMediaDtoFromJSON,
    ModifyMediaDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    SearchMediaDtoFromJSON,
    SearchMediaDtoToJSON,
    SearchMediaIdListDtoFromJSON,
    SearchMediaIdListDtoToJSON,
    SearchMediaTypeDtoFromJSON,
    SearchMediaTypeDtoToJSON,
    SearchNameDtoFromJSON,
    SearchNameDtoToJSON,
    SearchSimpleDtoFromJSON,
    SearchSimpleDtoToJSON,
} from '../models/index';

export interface AddMediaInfoRequest {
    createMediaDto: CreateMediaDto;
}

export interface AddMediaInfoArrayRequest {
    createMediaArrayDto: CreateMediaArrayDto;
}

export interface DelMediaInfoRequest {
    id: number;
}

export interface DeleteMediaLogoRequest {
    id: number;
}

export interface FindAllMediaRequest {
    searchMediaDto: SearchMediaDto;
    pageableDto: PageableDto;
}

export interface FindAutoCompleteRequest {
    searchDto: SearchNameDto;
    pageableDto: PageableDto;
}

export interface FindMediaRequest {
    id: number;
}

export interface FindMediaFieldSubRequest {
    searchDto: SearchNameDto;
}

export interface FindMediaGroupAutoCompleteRequest {
    searchDto: SearchNameDto;
    pageableDto: PageableDto;
}

export interface FindMediaLocationSubRequest {
    searchDto: SearchNameDto;
}

export interface FindMediaTypeRequest {
    requestDto: SearchMediaTypeDto;
}

export interface FindMediaTypeAutoCompleteRequest {
    searchDto: SearchNameDto;
    pageableDto: PageableDto;
}

export interface FindMediaValueInfoRequest {
    searchMediaIdListDto: SearchMediaIdListDto;
}

export interface FindSimpleAutoCompleteRequest {
    request: SearchSimpleDto;
    pageableDto: PageableDto;
}

export interface FindSystemMediaRequest {
    searchNameDto: SearchNameDto;
}

export interface ModifyMediaInfoRequest {
    id: number;
    modifyMediaDto: ModifyMediaDto;
}

export interface ModifyMediaLogoRequest {
    id: number;
    file: Blob;
}

/**
 * 
 */
export class MediaControllerApi extends runtime.BaseAPI {

    /**
     * 사용자가 미디어 추가
     * 미디어 사용자 추가
     */
    async addMediaInfoRaw(requestParameters: AddMediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createMediaDto'] == null) {
            throw new runtime.RequiredError(
                'createMediaDto',
                'Required parameter "createMediaDto" was null or undefined when calling addMediaInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMediaDtoToJSON(requestParameters['createMediaDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 사용자가 미디어 추가
     * 미디어 사용자 추가
     */
    async addMediaInfo(requestParameters: AddMediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addMediaInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 미디어 추가(배열로 여러개 추가)
     * 미디어 사용자 추가(배열로 여러개 추가)
     */
    async addMediaInfoArrayRaw(requestParameters: AddMediaInfoArrayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createMediaArrayDto'] == null) {
            throw new runtime.RequiredError(
                'createMediaArrayDto',
                'Required parameter "createMediaArrayDto" was null or undefined when calling addMediaInfoArray().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/array`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMediaArrayDtoToJSON(requestParameters['createMediaArrayDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 사용자가 미디어 추가(배열로 여러개 추가)
     * 미디어 사용자 추가(배열로 여러개 추가)
     */
    async addMediaInfoArray(requestParameters: AddMediaInfoArrayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addMediaInfoArrayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 추가한 미디어 정보 삭제하기, 본인이 작성한 미디어만 가능
     * 사용자 추가 미디어 삭제하기
     */
    async delMediaInfoRaw(requestParameters: DelMediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling delMediaInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자가 추가한 미디어 정보 삭제하기, 본인이 작성한 미디어만 가능
     * 사용자 추가 미디어 삭제하기
     */
    async delMediaInfo(requestParameters: DelMediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.delMediaInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 추가 미디어 로고 삭제
     * 사용자 추가 미디어 로고 삭제
     */
    async deleteMediaLogoRaw(requestParameters: DeleteMediaLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaLogo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/logo/delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 추가 미디어 로고 삭제
     * 사용자 추가 미디어 로고 삭제
     */
    async deleteMediaLogo(requestParameters: DeleteMediaLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteMediaLogoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [테스트용] 미디어 리스트
     * [테스트]미디어 리스트
     */
    async findAllMediaRaw(requestParameters: FindAllMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageMediaDto>> {
        if (requestParameters['searchMediaDto'] == null) {
            throw new runtime.RequiredError(
                'searchMediaDto',
                'Required parameter "searchMediaDto" was null or undefined when calling findAllMedia().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllMedia().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchMediaDto'] != null) {
            queryParameters['searchMediaDto'] = requestParameters['searchMediaDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageMediaDtoFromJSON(jsonValue));
    }

    /**
     * [테스트용] 미디어 리스트
     * [테스트]미디어 리스트
     */
    async findAllMedia(requestParameters: FindAllMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageMediaDto> {
        const response = await this.findAllMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어명 자동완성, 가치순으로 정열
     * 미디어명 자동완성
     */
    async findAutoCompleteRaw(requestParameters: FindAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMediaAutoCompleteDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAutoComplete().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAutoComplete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMediaAutoCompleteDtoFromJSON(jsonValue));
    }

    /**
     * 미디어명 자동완성, 가치순으로 정열
     * 미디어명 자동완성
     */
    async findAutoComplete(requestParameters: FindAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMediaAutoCompleteDto> {
        const response = await this.findAutoCompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * mediaId로 정보를 가져옵니다.
     * 미디어 정보 확인
     */
    async findMediaRaw(requestParameters: FindMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMediaDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findMedia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMediaDtoFromJSON(jsonValue));
    }

    /**
     * mediaId로 정보를 가져옵니다.
     * 미디어 정보 확인
     */
    async findMedia(requestParameters: FindMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMediaDto> {
        const response = await this.findMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 상위분야 선택 후 하위 분야 가져오기
     * 미디어 하위 분야 가져오기
     */
    async findMediaFieldSubRaw(requestParameters: FindMediaFieldSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNameCountListDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMediaFieldSub().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/field`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNameCountListDtoFromJSON(jsonValue));
    }

    /**
     * 미디어 상위분야 선택 후 하위 분야 가져오기
     * 미디어 하위 분야 가져오기
     */
    async findMediaFieldSub(requestParameters: FindMediaFieldSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNameCountListDto> {
        const response = await this.findMediaFieldSubRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어그룹 자동완성, 그룹명으로 정열
     * 미디어그룹 자동완성
     */
    async findMediaGroupAutoCompleteRaw(requestParameters: FindMediaGroupAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMediaGroupAutoCompleteDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMediaGroupAutoComplete().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findMediaGroupAutoComplete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/groupautocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMediaGroupAutoCompleteDtoFromJSON(jsonValue));
    }

    /**
     * 미디어그룹 자동완성, 그룹명으로 정열
     * 미디어그룹 자동완성
     */
    async findMediaGroupAutoComplete(requestParameters: FindMediaGroupAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMediaGroupAutoCompleteDto> {
        const response = await this.findMediaGroupAutoCompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 상위 지역 선택 후 하위 지역 가져오기
     * 미디어 하위 지역 가져오기
     */
    async findMediaLocationSubRaw(requestParameters: FindMediaLocationSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNameCountListDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMediaLocationSub().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNameCountListDtoFromJSON(jsonValue));
    }

    /**
     * 미디어 상위 지역 선택 후 하위 지역 가져오기
     * 미디어 하위 지역 가져오기
     */
    async findMediaLocationSub(requestParameters: FindMediaLocationSubRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNameCountListDto> {
        const response = await this.findMediaLocationSubRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어/언론인 함께 사용, 분야-INDUSTRY, 미디어지역-LOCATION
     * 분야, 지역 가져오기
     */
    async findMediaTypeRaw(requestParameters: FindMediaTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListString>> {
        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling findMediaType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestDto'] != null) {
            queryParameters['requestDto'] = requestParameters['requestDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/mediatype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListStringFromJSON(jsonValue));
    }

    /**
     * 미디어/언론인 함께 사용, 분야-INDUSTRY, 미디어지역-LOCATION
     * 분야, 지역 가져오기
     */
    async findMediaType(requestParameters: FindMediaTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListString> {
        const response = await this.findMediaTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어분야 자동완성, Weight/분야명으로 정열
     * 미디어분야 자동완성
     */
    async findMediaTypeAutoCompleteRaw(requestParameters: FindMediaTypeAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListNameCountDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMediaTypeAutoComplete().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findMediaTypeAutoComplete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/typeautocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListNameCountDtoFromJSON(jsonValue));
    }

    /**
     * 미디어분야 자동완성, Weight/분야명으로 정열
     * 미디어분야 자동완성
     */
    async findMediaTypeAutoComplete(requestParameters: FindMediaTypeAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListNameCountDto> {
        const response = await this.findMediaTypeAutoCompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 가치 정보 가져오기
     * 미디어 가치 정보 가져오기
     */
    async findMediaValueInfoRaw(requestParameters: FindMediaValueInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMediaValueDto>> {
        if (requestParameters['searchMediaIdListDto'] == null) {
            throw new runtime.RequiredError(
                'searchMediaIdListDto',
                'Required parameter "searchMediaIdListDto" was null or undefined when calling findMediaValueInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/value`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchMediaIdListDtoToJSON(requestParameters['searchMediaIdListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMediaValueDtoFromJSON(jsonValue));
    }

    /**
     * 미디어 가치 정보 가져오기
     * 미디어 가치 정보 가져오기
     */
    async findMediaValueInfo(requestParameters: FindMediaValueInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMediaValueDto> {
        const response = await this.findMediaValueInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 간편검색 - 미디어명 
     * 간편검색 미디어 - 미디어명,보조명으로 검색 
     */
    async findSimpleAutoCompleteRaw(requestParameters: FindSimpleAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMediaAutoCompleteDto>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling findSimpleAutoComplete().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findSimpleAutoComplete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/simple`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMediaAutoCompleteDtoFromJSON(jsonValue));
    }

    /**
     * 간편검색 - 미디어명 
     * 간편검색 미디어 - 미디어명,보조명으로 검색 
     */
    async findSimpleAutoComplete(requestParameters: FindSimpleAutoCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMediaAutoCompleteDto> {
        const response = await this.findSimpleAutoCompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 추가 미디어와 동일한 미디어명을 갖는 시스템 미디어 정보 가져오기
     * 미디어명 동일한 시스템 정보 가져오기
     */
    async findSystemMediaRaw(requestParameters: FindSystemMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMediaDto>> {
        if (requestParameters['searchNameDto'] == null) {
            throw new runtime.RequiredError(
                'searchNameDto',
                'Required parameter "searchNameDto" was null or undefined when calling findSystemMedia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/dupcheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchNameDtoToJSON(requestParameters['searchNameDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMediaDtoFromJSON(jsonValue));
    }

    /**
     * 사용자 추가 미디어와 동일한 미디어명을 갖는 시스템 미디어 정보 가져오기
     * 미디어명 동일한 시스템 정보 가져오기
     */
    async findSystemMedia(requestParameters: FindSystemMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMediaDto> {
        const response = await this.findSystemMediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 추가한 미디어 정보 수정하기, 본인이 작성한 미디어만 가능
     * 사용자 추가 미디어 수정하기
     */
    async modifyMediaInfoRaw(requestParameters: ModifyMediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyMediaInfo().'
            );
        }

        if (requestParameters['modifyMediaDto'] == null) {
            throw new runtime.RequiredError(
                'modifyMediaDto',
                'Required parameter "modifyMediaDto" was null or undefined when calling modifyMediaInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/media/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyMediaDtoToJSON(requestParameters['modifyMediaDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자가 추가한 미디어 정보 수정하기, 본인이 작성한 미디어만 가능
     * 사용자 추가 미디어 수정하기
     */
    async modifyMediaInfo(requestParameters: ModifyMediaInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyMediaInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자 추가 미디어 로고 변경
     * 사용자 추가 미디어 로고 변경
     */
    async modifyMediaLogoRaw(requestParameters: ModifyMediaLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyMediaLogo().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling modifyMediaLogo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/v1/svc/media/logo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자 추가 미디어 로고 변경
     * 사용자 추가 미디어 로고 변경
     */
    async modifyMediaLogo(requestParameters: ModifyMediaLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyMediaLogoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
