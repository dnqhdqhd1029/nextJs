/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonElasticSearchReturnDtoNewsDocumentDto,
  BaseResponseCommonListRequestNewsUserExcelUnitDto,
  BaseResponseCommonLong,
  BaseResponseCommonString,
  ESearchNewsCondDto,
  RequestNewsExcelDto,
  RequestNewsUserDocDto,
  RequestNewsUserExcelDocDto,
} from '../models/index';
import {
    BaseResponseCommonElasticSearchReturnDtoNewsDocumentDtoFromJSON,
    BaseResponseCommonElasticSearchReturnDtoNewsDocumentDtoToJSON,
    BaseResponseCommonListRequestNewsUserExcelUnitDtoFromJSON,
    BaseResponseCommonListRequestNewsUserExcelUnitDtoToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    ESearchNewsCondDtoFromJSON,
    ESearchNewsCondDtoToJSON,
    RequestNewsExcelDtoFromJSON,
    RequestNewsExcelDtoToJSON,
    RequestNewsUserDocDtoFromJSON,
    RequestNewsUserDocDtoToJSON,
    RequestNewsUserExcelDocDtoFromJSON,
    RequestNewsUserExcelDocDtoToJSON,
} from '../models/index';

export interface AddExcelNewsUserRequest {
    requestNewsUserExcelDocDto: RequestNewsUserExcelDocDto;
}

export interface AddNewsUserRequest {
    requestNewsUserDocDto: RequestNewsUserDocDto;
}

export interface DeleteNewsUserRequest {
    id: number;
}

export interface DownloadNewsExcelRequest {
    requestNewsExcelDto: RequestNewsExcelDto;
}

export interface EsNewsByCondRequest {
    eSearchNewsCondDto: ESearchNewsCondDto;
}

export interface ModifyNewsUserRequest {
    id: number;
    requestNewsUserDocDto: RequestNewsUserDocDto;
}

/**
 * 
 */
export class ESearchNewsDocControllerApi extends runtime.BaseAPI {

    /**
     * 사용자가 뉴스 엑셀로 추가, 배열 이용
     * 사용자 추가 뉴스 엑셀로 등록하기 - 배열 사용
     */
    async addExcelNewsUserRaw(requestParameters: AddExcelNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListRequestNewsUserExcelUnitDto>> {
        if (requestParameters['requestNewsUserExcelDocDto'] == null) {
            throw new runtime.RequiredError(
                'requestNewsUserExcelDocDto',
                'Required parameter "requestNewsUserExcelDocDto" was null or undefined when calling addExcelNewsUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/news/add/excel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestNewsUserExcelDocDtoToJSON(requestParameters['requestNewsUserExcelDocDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListRequestNewsUserExcelUnitDtoFromJSON(jsonValue));
    }

    /**
     * 사용자가 뉴스 엑셀로 추가, 배열 이용
     * 사용자 추가 뉴스 엑셀로 등록하기 - 배열 사용
     */
    async addExcelNewsUser(requestParameters: AddExcelNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListRequestNewsUserExcelUnitDto> {
        const response = await this.addExcelNewsUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 뉴스 추가
     * 사용자 추가 뉴스 등록하기
     */
    async addNewsUserRaw(requestParameters: AddNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['requestNewsUserDocDto'] == null) {
            throw new runtime.RequiredError(
                'requestNewsUserDocDto',
                'Required parameter "requestNewsUserDocDto" was null or undefined when calling addNewsUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/news/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestNewsUserDocDtoToJSON(requestParameters['requestNewsUserDocDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 사용자가 뉴스 추가
     * 사용자 추가 뉴스 등록하기
     */
    async addNewsUser(requestParameters: AddNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addNewsUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 추가한 뉴스 삭제, 본인이 작성한 것만 가능
     * 사용자 추가 뉴스 삭제하기
     */
    async deleteNewsUserRaw(requestParameters: DeleteNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteNewsUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/news/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자가 추가한 뉴스 삭제, 본인이 작성한 것만 가능
     * 사용자 추가 뉴스 삭제하기
     */
    async deleteNewsUser(requestParameters: DeleteNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteNewsUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스 엑셀 다운로드
     * Elasticsearch 뉴스 엑셀 다운로드
     */
    async downloadNewsExcelRaw(requestParameters: DownloadNewsExcelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestNewsExcelDto'] == null) {
            throw new runtime.RequiredError(
                'requestNewsExcelDto',
                'Required parameter "requestNewsExcelDto" was null or undefined when calling downloadNewsExcel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/news/download`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestNewsExcelDtoToJSON(requestParameters['requestNewsExcelDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 뉴스 엑셀 다운로드
     * Elasticsearch 뉴스 엑셀 다운로드
     */
    async downloadNewsExcel(requestParameters: DownloadNewsExcelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadNewsExcelRaw(requestParameters, initOverrides);
    }

    /**
     * 뉴스를 여러 조건으로 검색
     * Elasticsearch 뉴스 검색
     */
    async esNewsByCondRaw(requestParameters: EsNewsByCondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonElasticSearchReturnDtoNewsDocumentDto>> {
        if (requestParameters['eSearchNewsCondDto'] == null) {
            throw new runtime.RequiredError(
                'eSearchNewsCondDto',
                'Required parameter "eSearchNewsCondDto" was null or undefined when calling esNewsByCond().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/news`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ESearchNewsCondDtoToJSON(requestParameters['eSearchNewsCondDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonElasticSearchReturnDtoNewsDocumentDtoFromJSON(jsonValue));
    }

    /**
     * 뉴스를 여러 조건으로 검색
     * Elasticsearch 뉴스 검색
     */
    async esNewsByCond(requestParameters: EsNewsByCondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonElasticSearchReturnDtoNewsDocumentDto> {
        const response = await this.esNewsByCondRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사용자가 추가한 뉴스 수정, 본인이 작성한 것만 가능
     * 사용자 추가 뉴스 수정하기
     */
    async modifyNewsUserRaw(requestParameters: ModifyNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyNewsUser().'
            );
        }

        if (requestParameters['requestNewsUserDocDto'] == null) {
            throw new runtime.RequiredError(
                'requestNewsUserDocDto',
                'Required parameter "requestNewsUserDocDto" was null or undefined when calling modifyNewsUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/news/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestNewsUserDocDtoToJSON(requestParameters['requestNewsUserDocDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 사용자가 추가한 뉴스 수정, 본인이 작성한 것만 가능
     * 사용자 추가 뉴스 수정하기
     */
    async modifyNewsUser(requestParameters: ModifyNewsUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyNewsUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
