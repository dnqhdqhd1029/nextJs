/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonBlockedUserSimpleDto,
  BaseResponseCommonResponseBlockedUserDto,
  BaseResponseCommonResponseUnBlockedUserDto,
  BaseResponseCommonString,
  CreateBlockedUserDto,
  CreateUnBlockedUserDto,
  ModifyBlockedUserDto,
  RequestBlockedUserCheckDto,
  RequestBlockedUserDto,
  RequestUnBlockedUserDto,
} from '../models/index';
import {
    BaseResponseCommonBlockedUserSimpleDtoFromJSON,
    BaseResponseCommonBlockedUserSimpleDtoToJSON,
    BaseResponseCommonResponseBlockedUserDtoFromJSON,
    BaseResponseCommonResponseBlockedUserDtoToJSON,
    BaseResponseCommonResponseUnBlockedUserDtoFromJSON,
    BaseResponseCommonResponseUnBlockedUserDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CreateBlockedUserDtoFromJSON,
    CreateBlockedUserDtoToJSON,
    CreateUnBlockedUserDtoFromJSON,
    CreateUnBlockedUserDtoToJSON,
    ModifyBlockedUserDtoFromJSON,
    ModifyBlockedUserDtoToJSON,
    RequestBlockedUserCheckDtoFromJSON,
    RequestBlockedUserCheckDtoToJSON,
    RequestBlockedUserDtoFromJSON,
    RequestBlockedUserDtoToJSON,
    RequestUnBlockedUserDtoFromJSON,
    RequestUnBlockedUserDtoToJSON,
} from '../models/index';

export interface AddBlockedUserRequest {
    createBlockedUserDto: CreateBlockedUserDto;
}

export interface GetBlockInfoFromLinkRequest {
    requestDto: RequestUnBlockedUserDto;
}

export interface GetBlockedUserInfoRequest {
    requestBlockedUserCheckDto: RequestBlockedUserCheckDto;
}

export interface GetMailInfoFromLinkRequest {
    requestDto: RequestBlockedUserDto;
}

export interface RequestUnBlockedUserRequest {
    createUnBlockedUserDto: CreateUnBlockedUserDto;
}

export interface SetUnBlockedUserRequest {
    modifyBlockedUserDto: ModifyBlockedUserDto;
}

/**
 * 
 */
export class BlockedUserControllerApi extends runtime.BaseAPI {

    /**
     * 언론인이 메일Link에서 수신거부 확인시 수신거부 등록
     * 수신거부 확인시 수신거부 등록
     */
    async addBlockedUserRaw(requestParameters: AddBlockedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseBlockedUserDto>> {
        if (requestParameters['createBlockedUserDto'] == null) {
            throw new runtime.RequiredError(
                'createBlockedUserDto',
                'Required parameter "createBlockedUserDto" was null or undefined when calling addBlockedUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nomail/blockuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlockedUserDtoToJSON(requestParameters['createBlockedUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseBlockedUserDtoFromJSON(jsonValue));
    }

    /**
     * 언론인이 메일Link에서 수신거부 확인시 수신거부 등록
     * 수신거부 확인시 수신거부 등록
     */
    async addBlockedUser(requestParameters: AddBlockedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseBlockedUserDto> {
        const response = await this.addBlockedUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 수신거부해제요청 Link 클릭시 수신거부정보 응답 (https://svc.d.mediabee.kr/unblockmail?fr=XXX&to=XXX&key=XXX)
     * 이메일에서 수신거부해제요청 Link 클릭시 수신거부정보 응답
     */
    async getBlockInfoFromLinkRaw(requestParameters: GetBlockInfoFromLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseUnBlockedUserDto>> {
        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling getBlockInfoFromLink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestDto'] != null) {
            queryParameters['requestDto'] = requestParameters['requestDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nomail/blockinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseUnBlockedUserDtoFromJSON(jsonValue));
    }

    /**
     * 수신거부해제요청 Link 클릭시 수신거부정보 응답 (https://svc.d.mediabee.kr/unblockmail?fr=XXX&to=XXX&key=XXX)
     * 이메일에서 수신거부해제요청 Link 클릭시 수신거부정보 응답
     */
    async getBlockInfoFromLink(requestParameters: GetBlockInfoFromLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseUnBlockedUserDto> {
        const response = await this.getBlockInfoFromLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 수신거부여부 확인하기 - null : 수신거부안됨, not null : 수신거부 blockedUserId = key
     * 수신거부여부 확인하기
     */
    async getBlockedUserInfoRaw(requestParameters: GetBlockedUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonBlockedUserSimpleDto>> {
        if (requestParameters['requestBlockedUserCheckDto'] == null) {
            throw new runtime.RequiredError(
                'requestBlockedUserCheckDto',
                'Required parameter "requestBlockedUserCheckDto" was null or undefined when calling getBlockedUserInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/blockeduser/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestBlockedUserCheckDtoToJSON(requestParameters['requestBlockedUserCheckDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonBlockedUserSimpleDtoFromJSON(jsonValue));
    }

    /**
     * 수신거부여부 확인하기 - null : 수신거부안됨, not null : 수신거부 blockedUserId = key
     * 수신거부여부 확인하기
     */
    async getBlockedUserInfo(requestParameters: GetBlockedUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonBlockedUserSimpleDto> {
        const response = await this.getBlockedUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 수신거부 link에 포함된 정보 응답 (https://svc.d.mediabee.kr/blockmail?fr=XXX&to=XXX&key=XXX)
     * 이메일에서 수신거부 Link 클릭시 메일정보 응답
     */
    async getMailInfoFromLinkRaw(requestParameters: GetMailInfoFromLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseBlockedUserDto>> {
        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling getMailInfoFromLink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestDto'] != null) {
            queryParameters['requestDto'] = requestParameters['requestDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nomail/mailinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseBlockedUserDtoFromJSON(jsonValue));
    }

    /**
     * 수신거부 link에 포함된 정보 응답 (https://svc.d.mediabee.kr/blockmail?fr=XXX&to=XXX&key=XXX)
     * 이메일에서 수신거부 Link 클릭시 메일정보 응답
     */
    async getMailInfoFromLink(requestParameters: GetMailInfoFromLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseBlockedUserDto> {
        const response = await this.getMailInfoFromLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 수신거부해제 요청하기
     * 수신거부해제 요청하기
     */
    async requestUnBlockedUserRaw(requestParameters: RequestUnBlockedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['createUnBlockedUserDto'] == null) {
            throw new runtime.RequiredError(
                'createUnBlockedUserDto',
                'Required parameter "createUnBlockedUserDto" was null or undefined when calling requestUnBlockedUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/blockeduser/unblock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUnBlockedUserDtoToJSON(requestParameters['createUnBlockedUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 수신거부해제 요청하기
     * 수신거부해제 요청하기
     */
    async requestUnBlockedUser(requestParameters: RequestUnBlockedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.requestUnBlockedUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 수신거부해제 확인시 수신거부해제 설정
     * 수신거부해제 확인시 수신거부해제 설정
     */
    async setUnBlockedUserRaw(requestParameters: SetUnBlockedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['modifyBlockedUserDto'] == null) {
            throw new runtime.RequiredError(
                'modifyBlockedUserDto',
                'Required parameter "modifyBlockedUserDto" was null or undefined when calling setUnBlockedUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nomail/unblockuser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyBlockedUserDtoToJSON(requestParameters['modifyBlockedUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 수신거부해제 확인시 수신거부해제 설정
     * 수신거부해제 확인시 수신거부해제 설정
     */
    async setUnBlockedUser(requestParameters: SetUnBlockedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.setUnBlockedUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
