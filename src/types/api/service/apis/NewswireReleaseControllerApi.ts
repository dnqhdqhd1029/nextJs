/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddNewswireReleaseRequest,
  BaseResponseCommonCouponNewswireDto,
  BaseResponseCommonListNewswireReleaseDto,
  BaseResponseCommonNewswireReleaseDto,
  BaseResponseCommonString,
  ModifyNewswireReleaseRequest,
  NewswireResponseDtoString,
  RequestMailingDto,
  RequestNewswireReleaseDto,
  RequestNewswireStatusDto,
} from '../models/index';
import {
    AddNewswireReleaseRequestFromJSON,
    AddNewswireReleaseRequestToJSON,
    BaseResponseCommonCouponNewswireDtoFromJSON,
    BaseResponseCommonCouponNewswireDtoToJSON,
    BaseResponseCommonListNewswireReleaseDtoFromJSON,
    BaseResponseCommonListNewswireReleaseDtoToJSON,
    BaseResponseCommonNewswireReleaseDtoFromJSON,
    BaseResponseCommonNewswireReleaseDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    ModifyNewswireReleaseRequestFromJSON,
    ModifyNewswireReleaseRequestToJSON,
    NewswireResponseDtoStringFromJSON,
    NewswireResponseDtoStringToJSON,
    RequestMailingDtoFromJSON,
    RequestMailingDtoToJSON,
    RequestNewswireReleaseDtoFromJSON,
    RequestNewswireReleaseDtoToJSON,
    RequestNewswireStatusDtoFromJSON,
    RequestNewswireStatusDtoToJSON,
} from '../models/index';

export interface AddNewswireReleaseOperationRequest {
    addNewswireReleaseRequest?: AddNewswireReleaseRequest;
}

export interface DeleteNewswireRequest {
    id: number;
    requestMailingDto: RequestMailingDto;
}

export interface FindNewswireReleaseInfoRequest {
    id: number;
    searchDto: RequestNewswireReleaseDto;
}

export interface FindNewswireReleaseInfoDraftRequest {
    searchDto: RequestNewswireReleaseDto;
}

export interface GetNewswireStatusRequest {
    requestNewswireStatusDto: RequestNewswireStatusDto;
}

export interface LockBeforeWorkRequest {
    id: number;
    requestMailingDto: RequestMailingDto;
}

export interface ModifyNewswireReleaseOperationRequest {
    id: number;
    modifyNewswireReleaseRequest?: ModifyNewswireReleaseRequest;
}

export interface ReserveNewswireRequest {
    id: number;
    requestNewswireReleaseDto: RequestNewswireReleaseDto;
}

export interface UnLockAfterWorkRequest {
    id: number;
    requestMailingDto: RequestMailingDto;
}

/**
 * 
 */
export class NewswireReleaseControllerApi extends runtime.BaseAPI {

    /**
     * 뉴스와이어배포(NEWSWIRE_RELEASE) 추가(저장)
     * 뉴스와이어배포 추가(저장)
     */
    async addNewswireReleaseRaw(requestParameters: AddNewswireReleaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNewswireReleaseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNewswireReleaseRequestToJSON(requestParameters['addNewswireReleaseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNewswireReleaseDtoFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어배포(NEWSWIRE_RELEASE) 추가(저장)
     * 뉴스와이어배포 추가(저장)
     */
    async addNewswireRelease(requestParameters: AddNewswireReleaseOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNewswireReleaseDto> {
        const response = await this.addNewswireReleaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스와이어배포 정보를 삭제합니다.
     * 뉴스와이어배포 삭제
     */
    async deleteNewswireRaw(requestParameters: DeleteNewswireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteNewswire().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling deleteNewswire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어배포 정보를 삭제합니다.
     * 뉴스와이어배포 삭제
     */
    async deleteNewswire(requestParameters: DeleteNewswireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteNewswireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 본인이 최근 작성한 뉴스와이어배포에서 언론인연락처 가져오기
     * 이전 뉴스와이어배포 자료에서 언론인연락처 가져오기
     */
    async findContactPointInCompanyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/contact`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 본인이 최근 작성한 뉴스와이어배포에서 언론인연락처 가져오기
     * 이전 뉴스와이어배포 자료에서 언론인연락처 가져오기
     */
    async findContactPointInCompany(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.findContactPointInCompanyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Licensed_prod 정보에서 유효한 뉴스와이어배포 정보 응답
     * 뉴스와이어배포 유효한 쿠폰번호 가져오기
     */
    async findLicenseToProdNewswireRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonCouponNewswireDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/coupon`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonCouponNewswireDtoFromJSON(jsonValue));
    }

    /**
     * Licensed_prod 정보에서 유효한 뉴스와이어배포 정보 응답
     * 뉴스와이어배포 유효한 쿠폰번호 가져오기
     */
    async findLicenseToProdNewswire(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonCouponNewswireDto> {
        const response = await this.findLicenseToProdNewswireRaw(initOverrides);
        return await response.value();
    }

    /**
     * 뉴스와이어배포 정보를 가져옵니다.
     * 뉴스와이어배포 정보 확인
     */
    async findNewswireReleaseInfoRaw(requestParameters: FindNewswireReleaseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNewswireReleaseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findNewswireReleaseInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findNewswireReleaseInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNewswireReleaseDtoFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어배포 정보를 가져옵니다.
     * 뉴스와이어배포 정보 확인
     */
    async findNewswireReleaseInfo(requestParameters: FindNewswireReleaseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNewswireReleaseDto> {
        const response = await this.findNewswireReleaseInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 본인이 수정할 수 있는 초안 상태인 뉴스와이어배포 목록을 가져옵니다.
     * 뉴스와이어배포 초안 목록 가져오기
     */
    async findNewswireReleaseInfoDraftRaw(requestParameters: FindNewswireReleaseInfoDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListNewswireReleaseDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findNewswireReleaseInfoDraft().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/draft`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListNewswireReleaseDtoFromJSON(jsonValue));
    }

    /**
     * 본인이 수정할 수 있는 초안 상태인 뉴스와이어배포 목록을 가져옵니다.
     * 뉴스와이어배포 초안 목록 가져오기
     */
    async findNewswireReleaseInfoDraft(requestParameters: FindNewswireReleaseInfoDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListNewswireReleaseDto> {
        const response = await this.findNewswireReleaseInfoDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스와이어에서 상태 변경시 호출
     * [뉴스와이어에서 호출하는 API] 뉴스와이어에서 상태 변경시 호출
     */
    async getNewswireStatusRaw(requestParameters: GetNewswireStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewswireResponseDtoString>> {
        if (requestParameters['requestNewswireStatusDto'] == null) {
            throw new runtime.RequiredError(
                'requestNewswireStatusDto',
                'Required parameter "requestNewswireStatusDto" was null or undefined when calling getNewswireStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/api/newswire/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestNewswireStatusDtoToJSON(requestParameters['requestNewswireStatusDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewswireResponseDtoStringFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어에서 상태 변경시 호출
     * [뉴스와이어에서 호출하는 API] 뉴스와이어에서 상태 변경시 호출
     */
    async getNewswireStatus(requestParameters: GetNewswireStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewswireResponseDtoString> {
        const response = await this.getNewswireStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스와이어배포 초안 수정 시 Lock 확인 및 요청
     * 뉴스와이어배포 수정 전 Lock 요청
     */
    async lockBeforeWorkRaw(requestParameters: LockBeforeWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling lockBeforeWork().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling lockBeforeWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/lock/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어배포 초안 수정 시 Lock 확인 및 요청
     * 뉴스와이어배포 수정 전 Lock 요청
     */
    async lockBeforeWork(requestParameters: LockBeforeWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.lockBeforeWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스와이어배포 정보를 수정합니다.
     * 뉴스와이어배포 수정
     */
    async modifyNewswireReleaseRaw(requestParameters: ModifyNewswireReleaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyNewswireRelease().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyNewswireReleaseRequestToJSON(requestParameters['modifyNewswireReleaseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어배포 정보를 수정합니다.
     * 뉴스와이어배포 수정
     */
    async modifyNewswireRelease(requestParameters: ModifyNewswireReleaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyNewswireReleaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스와이어배포 연동 배포하기. 초안작성 완료 후 뉴스와이어에 게재 요청을 합니다.
     * 뉴스와이어배포 연동 배포하기
     */
    async reserveNewswireRaw(requestParameters: ReserveNewswireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reserveNewswire().'
            );
        }

        if (requestParameters['requestNewswireReleaseDto'] == null) {
            throw new runtime.RequiredError(
                'requestNewswireReleaseDto',
                'Required parameter "requestNewswireReleaseDto" was null or undefined when calling reserveNewswire().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/reserve/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestNewswireReleaseDtoToJSON(requestParameters['requestNewswireReleaseDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어배포 연동 배포하기. 초안작성 완료 후 뉴스와이어에 게재 요청을 합니다.
     * 뉴스와이어배포 연동 배포하기
     */
    async reserveNewswire(requestParameters: ReserveNewswireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.reserveNewswireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스와이어배포 수정 완료 후 unLock 설정
     * 뉴스와이어배포 수정 후 unLock 설정
     */
    async unLockAfterWorkRaw(requestParameters: UnLockAfterWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling unLockAfterWork().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling unLockAfterWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newswirerelease/unlock/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스와이어배포 수정 완료 후 unLock 설정
     * 뉴스와이어배포 수정 후 unLock 설정
     */
    async unLockAfterWork(requestParameters: UnLockAfterWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.unLockAfterWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
