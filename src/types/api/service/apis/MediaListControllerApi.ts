/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddMediaListDto,
  AddOneMediaListDto,
  BaseResponseCommonLong,
  BaseResponseCommonMediaListDto,
  BaseResponseCommonPageMediaListDto,
  BaseResponseCommonResponseListCountDto,
  BaseResponseCommonString,
  CheckMediaListNameDto,
  CopyMediaListDto,
  CreateMediaListDto,
  DelMediaInMediaListsDto,
  DeleteMediaListDto,
  EditSharePolicyMediaListDto,
  ModifyMediaListDto,
  PageableDto,
  RequestMediaSrchDto,
  RequestSearchCountDto,
  SearchMediaListDto,
} from '../models/index';
import {
    AddMediaListDtoFromJSON,
    AddMediaListDtoToJSON,
    AddOneMediaListDtoFromJSON,
    AddOneMediaListDtoToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonMediaListDtoFromJSON,
    BaseResponseCommonMediaListDtoToJSON,
    BaseResponseCommonPageMediaListDtoFromJSON,
    BaseResponseCommonPageMediaListDtoToJSON,
    BaseResponseCommonResponseListCountDtoFromJSON,
    BaseResponseCommonResponseListCountDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CheckMediaListNameDtoFromJSON,
    CheckMediaListNameDtoToJSON,
    CopyMediaListDtoFromJSON,
    CopyMediaListDtoToJSON,
    CreateMediaListDtoFromJSON,
    CreateMediaListDtoToJSON,
    DelMediaInMediaListsDtoFromJSON,
    DelMediaInMediaListsDtoToJSON,
    DeleteMediaListDtoFromJSON,
    DeleteMediaListDtoToJSON,
    EditSharePolicyMediaListDtoFromJSON,
    EditSharePolicyMediaListDtoToJSON,
    ModifyMediaListDtoFromJSON,
    ModifyMediaListDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RequestMediaSrchDtoFromJSON,
    RequestMediaSrchDtoToJSON,
    RequestSearchCountDtoFromJSON,
    RequestSearchCountDtoToJSON,
    SearchMediaListDtoFromJSON,
    SearchMediaListDtoToJSON,
} from '../models/index';

export interface AddMediaGroupRequest {
    createMediaListDto: CreateMediaListDto;
}

export interface AddMediaInMediaGroupRequest {
    addMediaListDto: AddMediaListDto;
}

export interface AddOneMediaInMediaGroupRequest {
    addOneMediaListDto: AddOneMediaListDto;
}

export interface CheckMediaListNameRequest {
    checkMediaListNameDto: CheckMediaListNameDto;
}

export interface CopyMediaGroupRequest {
    copyMediaListDto: CopyMediaListDto;
}

export interface DelMediaInMediaGroupRequest {
    delMediaInMediaListsDto: DelMediaInMediaListsDto;
}

export interface DeleteListMediaListInfoRequest {
    deleteMediaListDto: DeleteMediaListDto;
}

export interface DeleteMediaListInfo2Request {
    id: number;
}

export interface EditListMediaListSharePolicyRequest {
    editSharePolicyMediaListDto: EditSharePolicyMediaListDto;
}

export interface FindAllMedialistGroupRequest {
    searchMediaListDto: SearchMediaListDto;
    pageableDto: PageableDto;
}

export interface FindCountMediaGroupsRequest {
    request: RequestSearchCountDto;
}

export interface FindMediaListInfoRequest {
    id: number;
    searchDto: RequestMediaSrchDto;
}

export interface ModifyMediaListInfoRequest {
    id: number;
    modifyMediaListDto: ModifyMediaListDto;
}

/**
 * 
 */
export class MediaListControllerApi extends runtime.BaseAPI {

    /**
     * 미디어목록 추가
     * 미디어목록 추가
     */
    async addMediaGroupRaw(requestParameters: AddMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'createMediaListDto',
                'Required parameter "createMediaListDto" was null or undefined when calling addMediaGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMediaListDtoToJSON(requestParameters['createMediaListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 미디어목록 추가
     * 미디어목록 추가
     */
    async addMediaGroup(requestParameters: AddMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addMediaGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록에 미디어 추가(배열 처리)
     * 미디어목록에 미디어 추가(배열 처리)
     */
    async addMediaInMediaGroupRaw(requestParameters: AddMediaInMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['addMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'addMediaListDto',
                'Required parameter "addMediaListDto" was null or undefined when calling addMediaInMediaGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/media/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMediaListDtoToJSON(requestParameters['addMediaListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록에 미디어 추가(배열 처리)
     * 미디어목록에 미디어 추가(배열 처리)
     */
    async addMediaInMediaGroup(requestParameters: AddMediaInMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addMediaInMediaGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록에 미디어 추가(한건만 처리하며 에러 확인)
     * 미디어목록에 미디어 추가(한건만 처리하고 에러 확인)
     */
    async addOneMediaInMediaGroupRaw(requestParameters: AddOneMediaInMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['addOneMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'addOneMediaListDto',
                'Required parameter "addOneMediaListDto" was null or undefined when calling addOneMediaInMediaGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/media/addone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOneMediaListDtoToJSON(requestParameters['addOneMediaListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록에 미디어 추가(한건만 처리하며 에러 확인)
     * 미디어목록에 미디어 추가(한건만 처리하고 에러 확인)
     */
    async addOneMediaInMediaGroup(requestParameters: AddOneMediaInMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addOneMediaInMediaGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록 추가 변경 할 때 미디어목록 Title 존재하는지 확인
     * 미디어목록 Title 중복 확인
     */
    async checkMediaListNameRaw(requestParameters: CheckMediaListNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['checkMediaListNameDto'] == null) {
            throw new runtime.RequiredError(
                'checkMediaListNameDto',
                'Required parameter "checkMediaListNameDto" was null or undefined when calling checkMediaListName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/checkname`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckMediaListNameDtoToJSON(requestParameters['checkMediaListNameDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록 추가 변경 할 때 미디어목록 Title 존재하는지 확인
     * 미디어목록 Title 중복 확인
     */
    async checkMediaListName(requestParameters: CheckMediaListNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkMediaListNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록 복사
     * 미디어목록 복사
     */
    async copyMediaGroupRaw(requestParameters: CopyMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['copyMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'copyMediaListDto',
                'Required parameter "copyMediaListDto" was null or undefined when calling copyMediaGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/copy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyMediaListDtoToJSON(requestParameters['copyMediaListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록 복사
     * 미디어목록 복사
     */
    async copyMediaGroup(requestParameters: CopyMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.copyMediaGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 선택한 미디어목록 여려개(배열)에서 미디어(배열) 제거
     * 선택한 미디어목록(배열)에서 미디어(배열) 제거
     */
    async delMediaInMediaGroupRaw(requestParameters: DelMediaInMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['delMediaInMediaListsDto'] == null) {
            throw new runtime.RequiredError(
                'delMediaInMediaListsDto',
                'Required parameter "delMediaInMediaListsDto" was null or undefined when calling delMediaInMediaGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/media/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DelMediaInMediaListsDtoToJSON(requestParameters['delMediaInMediaListsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 선택한 미디어목록 여려개(배열)에서 미디어(배열) 제거
     * 선택한 미디어목록(배열)에서 미디어(배열) 제거
     */
    async delMediaInMediaGroup(requestParameters: DelMediaInMediaGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.delMediaInMediaGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록을 배열로 받아 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 건만 삭제됩니다.
     * 미디어목록을 배열로 받아 삭제
     */
    async deleteListMediaListInfoRaw(requestParameters: DeleteListMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['deleteMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'deleteMediaListDto',
                'Required parameter "deleteMediaListDto" was null or undefined when calling deleteListMediaListInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/list/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteMediaListDtoToJSON(requestParameters['deleteMediaListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록을 배열로 받아 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 건만 삭제됩니다.
     * 미디어목록을 배열로 받아 삭제
     */
    async deleteListMediaListInfo(requestParameters: DeleteListMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteListMediaListInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 미디어목록 삭제
     */
    async deleteMediaListInfo2Raw(requestParameters: DeleteMediaListInfo2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaListInfo2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 미디어목록 삭제
     */
    async deleteMediaListInfo2(requestParameters: DeleteMediaListInfo2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteMediaListInfo2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록을 배열로 받아 공유설정값을 한번에 수정합니다.
     * 미디어목록 공유설정을 배열로 받아 한번에 수정
     */
    async editListMediaListSharePolicyRaw(requestParameters: EditListMediaListSharePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['editSharePolicyMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'editSharePolicyMediaListDto',
                'Required parameter "editSharePolicyMediaListDto" was null or undefined when calling editListMediaListSharePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/list/share`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditSharePolicyMediaListDtoToJSON(requestParameters['editSharePolicyMediaListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록을 배열로 받아 공유설정값을 한번에 수정합니다.
     * 미디어목록 공유설정을 배열로 받아 한번에 수정
     */
    async editListMediaListSharePolicy(requestParameters: EditListMediaListSharePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.editListMediaListSharePolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록 리스트
     * 미디어목록 리스트
     */
    async findAllMedialistGroupRaw(requestParameters: FindAllMedialistGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageMediaListDto>> {
        if (requestParameters['searchMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'searchMediaListDto',
                'Required parameter "searchMediaListDto" was null or undefined when calling findAllMedialistGroup().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllMedialistGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchMediaListDto'] != null) {
            queryParameters['searchMediaListDto'] = requestParameters['searchMediaListDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageMediaListDtoFromJSON(jsonValue));
    }

    /**
     * 미디어목록 리스트
     * 미디어목록 리스트
     */
    async findAllMedialistGroup(requestParameters: FindAllMedialistGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageMediaListDto> {
        const response = await this.findAllMedialistGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록, 언론인목록 개수를 각각 응답
     * 미디어목록 개수, 언론인목록 개수 응답
     */
    async findCountMediaGroupsRaw(requestParameters: FindCountMediaGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseListCountDto>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling findCountMediaGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseListCountDtoFromJSON(jsonValue));
    }

    /**
     * 미디어목록, 언론인목록 개수를 각각 응답
     * 미디어목록 개수, 언론인목록 개수 응답
     */
    async findCountMediaGroups(requestParameters: FindCountMediaGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseListCountDto> {
        const response = await this.findCountMediaGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록 정보를 가져옵니다.
     * 미디어목록 정보 확인
     */
    async findMediaListInfoRaw(requestParameters: FindMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMediaListDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findMediaListInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMediaListInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMediaListDtoFromJSON(jsonValue));
    }

    /**
     * 미디어목록 정보를 가져옵니다.
     * 미디어목록 정보 확인
     */
    async findMediaListInfo(requestParameters: FindMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMediaListDto> {
        const response = await this.findMediaListInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어목록 정보를 수정합니다.
     * 미디어목록 수정
     */
    async modifyMediaListInfoRaw(requestParameters: ModifyMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyMediaListInfo().'
            );
        }

        if (requestParameters['modifyMediaListDto'] == null) {
            throw new runtime.RequiredError(
                'modifyMediaListDto',
                'Required parameter "modifyMediaListDto" was null or undefined when calling modifyMediaListInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediagroup/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyMediaListDtoToJSON(requestParameters['modifyMediaListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어목록 정보를 수정합니다.
     * 미디어목록 수정
     */
    async modifyMediaListInfo(requestParameters: ModifyMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyMediaListInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
