/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonByteArrayResource,
} from '../models/index';
import {
    BaseResponseCommonByteArrayResourceFromJSON,
    BaseResponseCommonByteArrayResourceToJSON,
} from '../models/index';

export interface GetPayUseGuideSendRequest {
    payRequestId: number;
}

export interface GetSampleEstimateRequest {
    payRequestId: number;
}

/**
 * 
 */
export class SampleApiApi extends runtime.BaseAPI {

    /**
     * 사용안내 발송시 결제상태 완료처리
     * 사용안내 발송 요청 테스트
     */
    async getPayUseGuideSendRaw(requestParameters: GetPayUseGuideSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonByteArrayResource>> {
        if (requestParameters['payRequestId'] == null) {
            throw new runtime.RequiredError(
                'payRequestId',
                'Required parameter "payRequestId" was null or undefined when calling getPayUseGuideSend().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/sample/payment/use_guide/{payRequestId}`.replace(`{${"payRequestId"}}`, encodeURIComponent(String(requestParameters['payRequestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonByteArrayResourceFromJSON(jsonValue));
    }

    /**
     * 사용안내 발송시 결제상태 완료처리
     * 사용안내 발송 요청 테스트
     */
    async getPayUseGuideSend(requestParameters: GetPayUseGuideSendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonByteArrayResource> {
        const response = await this.getPayUseGuideSendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 견적서 요청 테스트
     */
    async getSampleEstimateRaw(requestParameters: GetSampleEstimateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonByteArrayResource>> {
        if (requestParameters['payRequestId'] == null) {
            throw new runtime.RequiredError(
                'payRequestId',
                'Required parameter "payRequestId" was null or undefined when calling getSampleEstimate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/sample/estimate/{payRequestId}`.replace(`{${"payRequestId"}}`, encodeURIComponent(String(requestParameters['payRequestId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonByteArrayResourceFromJSON(jsonValue));
    }

    /**
     * 견적서 요청 테스트
     */
    async getSampleEstimate(requestParameters: GetSampleEstimateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonByteArrayResource> {
        const response = await this.getSampleEstimateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
