/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonListClipBookDto,
  SearchClippingDto,
} from '../models/index';
import {
    BaseResponseCommonListClipBookDtoFromJSON,
    BaseResponseCommonListClipBookDtoToJSON,
    SearchClippingDtoFromJSON,
    SearchClippingDtoToJSON,
} from '../models/index';

export interface GetClipBookInfoByNewsRequest {
    searchClippingDto: SearchClippingDto;
}

export interface GetClipBookInfoByPRRequest {
    searchClippingDto: SearchClippingDto;
}

/**
 * 
 */
export class ClippingControllerApi extends runtime.BaseAPI {

    /**
     * 뉴스ID로 해당 뉴스 클리핑한 클립북 목록 가져오기
     * 뉴스 클리핑된 클립북 가져오기
     */
    async getClipBookInfoByNewsRaw(requestParameters: GetClipBookInfoByNewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListClipBookDto>> {
        if (requestParameters['searchClippingDto'] == null) {
            throw new runtime.RequiredError(
                'searchClippingDto',
                'Required parameter "searchClippingDto" was null or undefined when calling getClipBookInfoByNews().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipping/news`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchClippingDtoToJSON(requestParameters['searchClippingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListClipBookDtoFromJSON(jsonValue));
    }

    /**
     * 뉴스ID로 해당 뉴스 클리핑한 클립북 목록 가져오기
     * 뉴스 클리핑된 클립북 가져오기
     */
    async getClipBookInfoByNews(requestParameters: GetClipBookInfoByNewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListClipBookDto> {
        const response = await this.getClipBookInfoByNewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 보도자료ID로 해당 보도자료 클리핑한 커버리지 클립북 목록 가져오기
     * 보도자료 클리핑된 커버리지 클립북 가져오기
     */
    async getClipBookInfoByPRRaw(requestParameters: GetClipBookInfoByPRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListClipBookDto>> {
        if (requestParameters['searchClippingDto'] == null) {
            throw new runtime.RequiredError(
                'searchClippingDto',
                'Required parameter "searchClippingDto" was null or undefined when calling getClipBookInfoByPR().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipping/pr`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchClippingDtoToJSON(requestParameters['searchClippingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListClipBookDtoFromJSON(jsonValue));
    }

    /**
     * 보도자료ID로 해당 보도자료 클리핑한 커버리지 클립북 목록 가져오기
     * 보도자료 클리핑된 커버리지 클립북 가져오기
     */
    async getClipBookInfoByPR(requestParameters: GetClipBookInfoByPRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListClipBookDto> {
        const response = await this.getClipBookInfoByPRRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
