/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddInquiryForNoUserRequest,
  AddInquiryForUserRequest,
  BaseResponseCommonInquiryDto,
  BaseResponseCommonPageInquiryDtoForList,
  BaseResponseCommonString,
  PageableDto,
  SearchInquiryDto,
} from '../models/index';
import {
    AddInquiryForNoUserRequestFromJSON,
    AddInquiryForNoUserRequestToJSON,
    AddInquiryForUserRequestFromJSON,
    AddInquiryForUserRequestToJSON,
    BaseResponseCommonInquiryDtoFromJSON,
    BaseResponseCommonInquiryDtoToJSON,
    BaseResponseCommonPageInquiryDtoForListFromJSON,
    BaseResponseCommonPageInquiryDtoForListToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    SearchInquiryDtoFromJSON,
    SearchInquiryDtoToJSON,
} from '../models/index';

export interface AddInquiryForNoUserOperationRequest {
    addInquiryForNoUserRequest?: AddInquiryForNoUserRequest;
}

export interface AddInquiryForUserOperationRequest {
    addInquiryForUserRequest?: AddInquiryForUserRequest;
}

export interface FindAllByUserRequest {
    requestDto: SearchInquiryDto;
    pageableDto: PageableDto;
}

export interface FindInquiryInfoRequest {
    id: number;
}

/**
 * 
 */
export class InquiryControllerApi extends runtime.BaseAPI {

    /**
     * 문의 추가(비회원용)
     * 문의 추가(비회원용)
     */
    async addInquiryForNoUserRaw(requestParameters: AddInquiryForNoUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nouser/inquiry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddInquiryForNoUserRequestToJSON(requestParameters['addInquiryForNoUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 문의 추가(비회원용)
     * 문의 추가(비회원용)
     */
    async addInquiryForNoUser(requestParameters: AddInquiryForNoUserOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addInquiryForNoUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 문의 추가(로그인한 사용자용)
     * 문의 추가(로그인한 사용자용)
     */
    async addInquiryForUserRaw(requestParameters: AddInquiryForUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/inquiry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddInquiryForUserRequestToJSON(requestParameters['addInquiryForUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 문의 추가(로그인한 사용자용)
     * 문의 추가(로그인한 사용자용)
     */
    async addInquiryForUser(requestParameters: AddInquiryForUserOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addInquiryForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 내문의 목록
     * 내문의 목록
     */
    async findAllByUserRaw(requestParameters: FindAllByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageInquiryDtoForList>> {
        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling findAllByUser().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllByUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestDto'] != null) {
            queryParameters['requestDto'] = requestParameters['requestDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/inquiry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageInquiryDtoForListFromJSON(jsonValue));
    }

    /**
     * 내문의 목록
     * 내문의 목록
     */
    async findAllByUser(requestParameters: FindAllByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageInquiryDtoForList> {
        const response = await this.findAllByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 문의 상세 정보와 답변 내용을 가져옵니다.
     * 문의 정보 확인
     */
    async findInquiryInfoRaw(requestParameters: FindInquiryInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonInquiryDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findInquiryInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/inquiry/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonInquiryDtoFromJSON(jsonValue));
    }

    /**
     * 문의 상세 정보와 답변 내용을 가져옵니다.
     * 문의 정보 확인
     */
    async findInquiryInfo(requestParameters: FindInquiryInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonInquiryDto> {
        const response = await this.findInquiryInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
