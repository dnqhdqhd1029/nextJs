/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonLong,
  BaseResponseCommonPagePayRequestForListDto,
  BaseResponseCommonPayRequestAfterPayDto,
  BaseResponseCommonPayRequestDto,
  BaseResponseCommonPayRequestInfoForFirstPayDto,
  BaseResponseCommonString,
  PageableDto,
  PayRequestForCardPayDto,
  PayRequestForCreateDto,
  PayRequestForPayDto,
  SearchPayRequestDto,
} from '../models/index';
import {
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonPagePayRequestForListDtoFromJSON,
    BaseResponseCommonPagePayRequestForListDtoToJSON,
    BaseResponseCommonPayRequestAfterPayDtoFromJSON,
    BaseResponseCommonPayRequestAfterPayDtoToJSON,
    BaseResponseCommonPayRequestDtoFromJSON,
    BaseResponseCommonPayRequestDtoToJSON,
    BaseResponseCommonPayRequestInfoForFirstPayDtoFromJSON,
    BaseResponseCommonPayRequestInfoForFirstPayDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    PayRequestForCardPayDtoFromJSON,
    PayRequestForCardPayDtoToJSON,
    PayRequestForCreateDtoFromJSON,
    PayRequestForCreateDtoToJSON,
    PayRequestForPayDtoFromJSON,
    PayRequestForPayDtoToJSON,
    SearchPayRequestDtoFromJSON,
    SearchPayRequestDtoToJSON,
} from '../models/index';

export interface CancelFirstPayRequestRequest {
    id: number;
}

export interface CancelPayRequestForAdditionRequest {
    id: number;
}

export interface CardPayRequest {
    payRequestForCardPayDto: PayRequestForCardPayDto;
}

export interface FindAllPayRequestRequest {
    request: SearchPayRequestDto;
    pageableDto: PageableDto;
}

export interface GetFirstPayRequestInfoRequest {
    id: number;
}

export interface GetPayRequestForAdditionRequest {
    id: number;
}

export interface GetPayRequestInfoRequest {
    id: number;
}

export interface MakeEstimateAndPayRequestRequest {
    payRequestForCreateDto: PayRequestForCreateDto;
}

export interface PayFirstPayRequestRequest {
    id: number;
    payRequestForPayDto: PayRequestForPayDto;
}

export interface PayPayRequestForAdditionRequest {
    id: number;
    payRequestForPayDto: PayRequestForPayDto;
}

/**
 * 
 */
export class PayRequestControllerApi extends runtime.BaseAPI {

    /**
     * 구매신청 취소(최초 구매신청취소, 로그인 안함)
     * 구매신청 취소(최초 구매신청취소, 로그인 안함)
     */
    async cancelFirstPayRequestRaw(requestParameters: CancelFirstPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cancelFirstPayRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nouser/cancel/payrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 구매신청 취소(최초 구매신청취소, 로그인 안함)
     * 구매신청 취소(최초 구매신청취소, 로그인 안함)
     */
    async cancelFirstPayRequest(requestParameters: CancelFirstPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.cancelFirstPayRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 구매신청 취소(부가서비스, 로그인 상태)
     * 구매신청 취소(부가서비스, 로그인 상태)
     */
    async cancelPayRequestForAdditionRaw(requestParameters: CancelPayRequestForAdditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cancelPayRequestForAddition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/cancel/payrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 구매신청 취소(부가서비스, 로그인 상태)
     * 구매신청 취소(부가서비스, 로그인 상태)
     */
    async cancelPayRequestForAddition(requestParameters: CancelPayRequestForAdditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.cancelPayRequestForAdditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 카드 결제 - Front에서 결제 응답 받은 걸 Admin API 쪽 호출 
     * 카드 결제 - Front에서 결제 응답 받은 걸 Admin API 쪽 호출
     */
    async cardPayRaw(requestParameters: CardPayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['payRequestForCardPayDto'] == null) {
            throw new runtime.RequiredError(
                'payRequestForCardPayDto',
                'Required parameter "payRequestForCardPayDto" was null or undefined when calling cardPay().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/api/pay/payrequest/card`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayRequestForCardPayDtoToJSON(requestParameters['payRequestForCardPayDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 카드 결제 - Front에서 결제 응답 받은 걸 Admin API 쪽 호출 
     * 카드 결제 - Front에서 결제 응답 받은 걸 Admin API 쪽 호출
     */
    async cardPay(requestParameters: CardPayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.cardPayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 내구매 목록
     * 내구매 목록
     */
    async findAllPayRequestRaw(requestParameters: FindAllPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPagePayRequestForListDto>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling findAllPayRequest().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllPayRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['request'] != null) {
            queryParameters['request'] = requestParameters['request'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/payrequest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPagePayRequestForListDtoFromJSON(jsonValue));
    }

    /**
     * 내구매 목록
     * 내구매 목록
     */
    async findAllPayRequest(requestParameters: FindAllPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPagePayRequestForListDto> {
        const response = await this.findAllPayRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제를 위한(상담 후 최초 결제하기 - 회원 등록 전) 정보 가져오기
     * 결제를 위한(상담 후 최초 결제하기, 로그인 안함) 정보 가져오기
     */
    async getFirstPayRequestInfoRaw(requestParameters: GetFirstPayRequestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPayRequestInfoForFirstPayDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFirstPayRequestInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nouser/pay/payrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPayRequestInfoForFirstPayDtoFromJSON(jsonValue));
    }

    /**
     * 결제를 위한(상담 후 최초 결제하기 - 회원 등록 전) 정보 가져오기
     * 결제를 위한(상담 후 최초 결제하기, 로그인 안함) 정보 가져오기
     */
    async getFirstPayRequestInfo(requestParameters: GetFirstPayRequestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPayRequestInfoForFirstPayDto> {
        const response = await this.getFirstPayRequestInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제를 위한(부가서비스 추가) 정보 가져오기
     * 결제를 위한(부가서비스 추가) 정보 가져오기
     */
    async getPayRequestForAdditionRaw(requestParameters: GetPayRequestForAdditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPayRequestInfoForFirstPayDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPayRequestForAddition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/pay/payrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPayRequestInfoForFirstPayDtoFromJSON(jsonValue));
    }

    /**
     * 결제를 위한(부가서비스 추가) 정보 가져오기
     * 결제를 위한(부가서비스 추가) 정보 가져오기
     */
    async getPayRequestForAddition(requestParameters: GetPayRequestForAdditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPayRequestInfoForFirstPayDto> {
        const response = await this.getPayRequestForAdditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 내구매 상세 정보 가져오기
     * 내구매 상세 정보 가져오기
     */
    async getPayRequestInfoRaw(requestParameters: GetPayRequestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPayRequestDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPayRequestInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/payrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPayRequestDtoFromJSON(jsonValue));
    }

    /**
     * 내구매 상세 정보 가져오기
     * 내구매 상세 정보 가져오기
     */
    async getPayRequestInfo(requestParameters: GetPayRequestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPayRequestDto> {
        const response = await this.getPayRequestInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제하기 - 결제정보 만들기 (회원이 부가서비스 상품 개수 선택 후)
     * 결제하기 - 결제정보 만들기 (회원이 부가서비스 상품 개수 선택 후)
     */
    async makeEstimateAndPayRequestRaw(requestParameters: MakeEstimateAndPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPayRequestDto>> {
        if (requestParameters['payRequestForCreateDto'] == null) {
            throw new runtime.RequiredError(
                'payRequestForCreateDto',
                'Required parameter "payRequestForCreateDto" was null or undefined when calling makeEstimateAndPayRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/pay/payrequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayRequestForCreateDtoToJSON(requestParameters['payRequestForCreateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPayRequestDtoFromJSON(jsonValue));
    }

    /**
     * 결제하기 - 결제정보 만들기 (회원이 부가서비스 상품 개수 선택 후)
     * 결제하기 - 결제정보 만들기 (회원이 부가서비스 상품 개수 선택 후)
     */
    async makeEstimateAndPayRequest(requestParameters: MakeEstimateAndPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPayRequestDto> {
        const response = await this.makeEstimateAndPayRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제하기(상담 후 최초 결제하기 - 회원 등록 전)
     * 결제하기(상담 후 최초 결제하기, 로그인 안함)
     */
    async payFirstPayRequestRaw(requestParameters: PayFirstPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPayRequestAfterPayDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling payFirstPayRequest().'
            );
        }

        if (requestParameters['payRequestForPayDto'] == null) {
            throw new runtime.RequiredError(
                'payRequestForPayDto',
                'Required parameter "payRequestForPayDto" was null or undefined when calling payFirstPayRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nouser/pay/payrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PayRequestForPayDtoToJSON(requestParameters['payRequestForPayDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPayRequestAfterPayDtoFromJSON(jsonValue));
    }

    /**
     * 결제하기(상담 후 최초 결제하기 - 회원 등록 전)
     * 결제하기(상담 후 최초 결제하기, 로그인 안함)
     */
    async payFirstPayRequest(requestParameters: PayFirstPayRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPayRequestAfterPayDto> {
        const response = await this.payFirstPayRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 결제하기(부가서비스, 로그인 상태)
     * 결제하기(부가서비스, 로그인 상태)
     */
    async payPayRequestForAdditionRaw(requestParameters: PayPayRequestForAdditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPayRequestAfterPayDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling payPayRequestForAddition().'
            );
        }

        if (requestParameters['payRequestForPayDto'] == null) {
            throw new runtime.RequiredError(
                'payRequestForPayDto',
                'Required parameter "payRequestForPayDto" was null or undefined when calling payPayRequestForAddition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/pay/payrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PayRequestForPayDtoToJSON(requestParameters['payRequestForPayDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPayRequestAfterPayDtoFromJSON(jsonValue));
    }

    /**
     * 결제하기(부가서비스, 로그인 상태)
     * 결제하기(부가서비스, 로그인 상태)
     */
    async payPayRequestForAddition(requestParameters: PayPayRequestForAdditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPayRequestAfterPayDto> {
        const response = await this.payPayRequestForAdditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
