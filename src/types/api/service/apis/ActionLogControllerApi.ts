/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonPageActionLogDto,
  PageableDto,
  SearchActionLogDto,
} from '../models/index';
import {
    BaseResponseCommonPageActionLogDtoFromJSON,
    BaseResponseCommonPageActionLogDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    SearchActionLogDtoFromJSON,
    SearchActionLogDtoToJSON,
} from '../models/index';

export interface FindAllByActionRequest {
    searchDto: SearchActionLogDto;
    pageableDto: PageableDto;
}

/**
 * 
 */
export class ActionLogControllerApi extends runtime.BaseAPI {

    /**
     * 활동 이력 목록을 가져옵니다. 활동에 접근 권한이 있는 지 확인하고 이력 정보를 가져옴.
     * 활동 이력 리스트
     */
    async findAllByActionRaw(requestParameters: FindAllByActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageActionLogDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllByAction().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllByAction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/actionlog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageActionLogDtoFromJSON(jsonValue));
    }

    /**
     * 활동 이력 목록을 가져옵니다. 활동에 접근 권한이 있는 지 확인하고 이력 정보를 가져옴.
     * 활동 이력 리스트
     */
    async findAllByAction(requestParameters: FindAllByActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageActionLogDto> {
        const response = await this.findAllByActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
