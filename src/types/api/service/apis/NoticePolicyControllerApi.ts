/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonNoticePolicyDto,
  BaseResponseCommonString,
  ModifyNoticePolicyDto,
} from '../models/index';
import {
    BaseResponseCommonNoticePolicyDtoFromJSON,
    BaseResponseCommonNoticePolicyDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    ModifyNoticePolicyDtoFromJSON,
    ModifyNoticePolicyDtoToJSON,
} from '../models/index';

export interface ModifyNoticePolicyRequest {
    modifyNoticePolicyDto: ModifyNoticePolicyDto;
}

/**
 * 
 */
export class NoticePolicyControllerApi extends runtime.BaseAPI {

    /**
     * 사용자의 시스템 알림 설정 가져오기
     * 시스템 알림 설정 가져오기
     */
    async findNoticePolicyInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNoticePolicyDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/noticepolicy/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNoticePolicyDtoFromJSON(jsonValue));
    }

    /**
     * 사용자의 시스템 알림 설정 가져오기
     * 시스템 알림 설정 가져오기
     */
    async findNoticePolicyInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNoticePolicyDto> {
        const response = await this.findNoticePolicyInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * 본인의 시스템 알림 설정 수정
     * 시스템 알림 설정 수정
     */
    async modifyNoticePolicyRaw(requestParameters: ModifyNoticePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['modifyNoticePolicyDto'] == null) {
            throw new runtime.RequiredError(
                'modifyNoticePolicyDto',
                'Required parameter "modifyNoticePolicyDto" was null or undefined when calling modifyNoticePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/noticepolicy/users`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyNoticePolicyDtoToJSON(requestParameters['modifyNoticePolicyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 본인의 시스템 알림 설정 수정
     * 시스템 알림 설정 수정
     */
    async modifyNoticePolicy(requestParameters: ModifyNoticePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyNoticePolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
