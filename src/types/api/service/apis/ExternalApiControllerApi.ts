/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonListNameValue,
  BaseResponseCommonResultNewsInfo,
  RequestNewsInfo,
  RequestTagCloud,
} from '../models/index';
import {
    BaseResponseCommonListNameValueFromJSON,
    BaseResponseCommonListNameValueToJSON,
    BaseResponseCommonResultNewsInfoFromJSON,
    BaseResponseCommonResultNewsInfoToJSON,
    RequestNewsInfoFromJSON,
    RequestNewsInfoToJSON,
    RequestTagCloudFromJSON,
    RequestTagCloudToJSON,
} from '../models/index';

export interface AdmTrackEmailRequest {
    ref: string;
}

export interface FindNewsInfoByUrlRequest {
    requestNewsInfo: RequestNewsInfo;
}

export interface FindTagCloudRequest {
    requestDto: RequestTagCloud;
}

export interface TrackEmailRequest {
    ref: string;
}

/**
 * 
 */
export class ExternalApiControllerApi extends runtime.BaseAPI {

    /**
     * 트래킹 픽셀(tracking pixel) 이미지 응답
     * 어드민 이메일 오픈 확인하기
     */
    async admTrackEmailRaw(requestParameters: AdmTrackEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ref'] == null) {
            throw new runtime.RequiredError(
                'ref',
                'Required parameter "ref" was null or undefined when calling admTrackEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ref'] != null) {
            queryParameters['ref'] = requestParameters['ref'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/api/tracking-email/manage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 트래킹 픽셀(tracking pixel) 이미지 응답
     * 어드민 이메일 오픈 확인하기
     */
    async admTrackEmail(requestParameters: AdmTrackEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.admTrackEmailRaw(requestParameters, initOverrides);
    }

    /**
     * 외부 뉴스 URL로 기사 정보 가져오기
     * 뉴스 URL로 기사 정보 가져오기 
     */
    async findNewsInfoByUrlRaw(requestParameters: FindNewsInfoByUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResultNewsInfo>> {
        if (requestParameters['requestNewsInfo'] == null) {
            throw new runtime.RequiredError(
                'requestNewsInfo',
                'Required parameter "requestNewsInfo" was null or undefined when calling findNewsInfoByUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/api/newsinfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestNewsInfoToJSON(requestParameters['requestNewsInfo']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResultNewsInfoFromJSON(jsonValue));
    }

    /**
     * 외부 뉴스 URL로 기사 정보 가져오기
     * 뉴스 URL로 기사 정보 가져오기 
     */
    async findNewsInfoByUrl(requestParameters: FindNewsInfoByUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResultNewsInfo> {
        const response = await this.findNewsInfoByUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 자주 사용하는 단어 가져오기
     * 언론인 자주 사용하는 단어 가져오기
     */
    async findTagCloudRaw(requestParameters: FindTagCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListNameValue>> {
        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling findTagCloud().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestDto'] != null) {
            queryParameters['requestDto'] = requestParameters['requestDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/api/findwords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListNameValueFromJSON(jsonValue));
    }

    /**
     * 언론인 자주 사용하는 단어 가져오기
     * 언론인 자주 사용하는 단어 가져오기
     */
    async findTagCloud(requestParameters: FindTagCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListNameValue> {
        const response = await this.findTagCloudRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 트래킹 픽셀(tracking pixel) 이미지 응답
     * 이메일 오픈 확인하기
     */
    async trackEmailRaw(requestParameters: TrackEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ref'] == null) {
            throw new runtime.RequiredError(
                'ref',
                'Required parameter "ref" was null or undefined when calling trackEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ref'] != null) {
            queryParameters['ref'] = requestParameters['ref'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/api/tracking-email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 트래킹 픽셀(tracking pixel) 이미지 응답
     * 이메일 오픈 확인하기
     */
    async trackEmail(requestParameters: TrackEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackEmailRaw(requestParameters, initOverrides);
    }

}
