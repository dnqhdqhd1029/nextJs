/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddMailingRequest,
  BaseResponseCommonListMailingDto,
  BaseResponseCommonListMailingForListDto,
  BaseResponseCommonListMediaListMailCountDto,
  BaseResponseCommonMailingCountDto,
  BaseResponseCommonMailingDto,
  BaseResponseCommonResponseMailingStatusDto,
  BaseResponseCommonString,
  ModifyMailingRequest,
  RequestMailingDraftDto,
  RequestMailingDto,
  RequestMailingForListDto,
  RequestMailingMailListDto,
  RequestMailingTestDto,
  RequestMediaListMailCountDto,
} from '../models/index';
import {
    AddMailingRequestFromJSON,
    AddMailingRequestToJSON,
    BaseResponseCommonListMailingDtoFromJSON,
    BaseResponseCommonListMailingDtoToJSON,
    BaseResponseCommonListMailingForListDtoFromJSON,
    BaseResponseCommonListMailingForListDtoToJSON,
    BaseResponseCommonListMediaListMailCountDtoFromJSON,
    BaseResponseCommonListMediaListMailCountDtoToJSON,
    BaseResponseCommonMailingCountDtoFromJSON,
    BaseResponseCommonMailingCountDtoToJSON,
    BaseResponseCommonMailingDtoFromJSON,
    BaseResponseCommonMailingDtoToJSON,
    BaseResponseCommonResponseMailingStatusDtoFromJSON,
    BaseResponseCommonResponseMailingStatusDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    ModifyMailingRequestFromJSON,
    ModifyMailingRequestToJSON,
    RequestMailingDraftDtoFromJSON,
    RequestMailingDraftDtoToJSON,
    RequestMailingDtoFromJSON,
    RequestMailingDtoToJSON,
    RequestMailingForListDtoFromJSON,
    RequestMailingForListDtoToJSON,
    RequestMailingMailListDtoFromJSON,
    RequestMailingMailListDtoToJSON,
    RequestMailingTestDtoFromJSON,
    RequestMailingTestDtoToJSON,
    RequestMediaListMailCountDtoFromJSON,
    RequestMediaListMailCountDtoToJSON,
} from '../models/index';

export interface AddMailingOperationRequest {
    addMailingRequest?: AddMailingRequest;
}

export interface DeleteMailingRequest {
    id: number;
    requestMailingDto: RequestMailingDto;
}

export interface FindMailingInfoRequest {
    id: number;
    searchDto: RequestMailingDto;
}

export interface FindMailingInfoDraftRequest {
    searchDto: RequestMailingDraftDto;
}

export interface FindMediaListMailCountRequest {
    requestMediaListMailCountDto: RequestMediaListMailCountDto;
}

export interface FindPressReleaseClipBookRequest {
    searchDto: RequestMailingForListDto;
}

export interface GetMailingEmailCountInfoRequest {
    requestMailingMailListDto: RequestMailingMailListDto;
}

export interface GetStatusAndRequestDateTimeRequest {
    id: number;
    searchDto: RequestMailingDto;
}

export interface LockBeforeWork1Request {
    id: number;
    requestMailingDto: RequestMailingDto;
}

export interface ModifyMailingOperationRequest {
    id: number;
    modifyMailingRequest?: ModifyMailingRequest;
}

export interface ReserveMailingRequest {
    id: number;
    requestMailingDto: RequestMailingDto;
}

export interface RunBatchJobToSendMailForMailingRequest {
    mailingId: number;
}

export interface SendCancelMailingRequest {
    id: number;
    requestMailingDto: RequestMailingDto;
}

export interface SendTestMailingRequest {
    id: number;
    requestMailingTestDto: RequestMailingTestDto;
}

export interface UnLockAfterWork1Request {
    id: number;
    requestMailingDto: RequestMailingDto;
}

/**
 * 
 */
export class MailingControllerApi extends runtime.BaseAPI {

    /**
     * 이메일/보도자료배포(MAILING, PRESS_RELEASE) 추가
     * 이메일/보도자료배포 추가
     */
    async addMailingRaw(requestParameters: AddMailingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMailingDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMailingRequestToJSON(requestParameters['addMailingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMailingDtoFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포(MAILING, PRESS_RELEASE) 추가
     * 이메일/보도자료배포 추가
     */
    async addMailing(requestParameters: AddMailingOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMailingDto> {
        const response = await this.addMailingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일/보도자료배포(MAILING, PRESS_RELEASE) 정보를 삭제합니다.
     * 이메일/보도자료배포 삭제
     */
    async deleteMailingRaw(requestParameters: DeleteMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMailing().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling deleteMailing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포(MAILING, PRESS_RELEASE) 정보를 삭제합니다.
     * 이메일/보도자료배포 삭제
     */
    async deleteMailing(requestParameters: DeleteMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteMailingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일/보도자료배포 정보를 가져옵니다. 
     * 이메일/보도자료배포 정보 확인
     */
    async findMailingInfoRaw(requestParameters: FindMailingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMailingDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findMailingInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMailingInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMailingDtoFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포 정보를 가져옵니다. 
     * 이메일/보도자료배포 정보 확인
     */
    async findMailingInfo(requestParameters: FindMailingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMailingDto> {
        const response = await this.findMailingInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 초안 상태인 이메일/보도자료배포 중 본인이 수정가능한 목록을 가져옵니다.(MAILING:이메일, PRESS_RELEASE:보도자료)
     * 이메일/보도자료배포 중 수정 가능한 초안 상태 목록 가져오기
     */
    async findMailingInfoDraftRaw(requestParameters: FindMailingInfoDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMailingDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMailingInfoDraft().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/draft`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMailingDtoFromJSON(jsonValue));
    }

    /**
     * 초안 상태인 이메일/보도자료배포 중 본인이 수정가능한 목록을 가져옵니다.(MAILING:이메일, PRESS_RELEASE:보도자료)
     * 이메일/보도자료배포 중 수정 가능한 초안 상태 목록 가져오기
     */
    async findMailingInfoDraft(requestParameters: FindMailingInfoDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMailingDto> {
        const response = await this.findMailingInfoDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일/보도자료배포 미디어목록의 메일 개수 구하기(미디어목록ID 배열 입력)
     * 이메일/보도자료배포 미디어목록의 메일 개수 구하기(미디어목록ID 배열 입력)
     */
    async findMediaListMailCountRaw(requestParameters: FindMediaListMailCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMediaListMailCountDto>> {
        if (requestParameters['requestMediaListMailCountDto'] == null) {
            throw new runtime.RequiredError(
                'requestMediaListMailCountDto',
                'Required parameter "requestMediaListMailCountDto" was null or undefined when calling findMediaListMailCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/medialist/mailcount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMediaListMailCountDtoToJSON(requestParameters['requestMediaListMailCountDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMediaListMailCountDtoFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포 미디어목록의 메일 개수 구하기(미디어목록ID 배열 입력)
     * 이메일/보도자료배포 미디어목록의 메일 개수 구하기(미디어목록ID 배열 입력)
     */
    async findMediaListMailCount(requestParameters: FindMediaListMailCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMediaListMailCountDto> {
        const response = await this.findMediaListMailCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 커버리지 클립북용 보도자료(PRESS_RELEASE) 목록 가져오기
     * 커버리지 클립북용 보도자료 목록 가져오기
     */
    async findPressReleaseClipBookRaw(requestParameters: FindPressReleaseClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMailingForListDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findPressReleaseClipBook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/pr`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMailingForListDtoFromJSON(jsonValue));
    }

    /**
     * 커버리지 클립북용 보도자료(PRESS_RELEASE) 목록 가져오기
     * 커버리지 클립북용 보도자료 목록 가져오기
     */
    async findPressReleaseClipBook(requestParameters: FindPressReleaseClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMailingForListDto> {
        const response = await this.findPressReleaseClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 메일 목록 총개수 확인(총 수신자수, 중복, 수신거부, 발송차단)
     * 메일 목록 총개수 확인(총 수신자수, 중복, 수신거부, 발송차단)
     */
    async getMailingEmailCountInfoRaw(requestParameters: GetMailingEmailCountInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMailingCountDto>> {
        if (requestParameters['requestMailingMailListDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingMailListDto',
                'Required parameter "requestMailingMailListDto" was null or undefined when calling getMailingEmailCountInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/getcount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingMailListDtoToJSON(requestParameters['requestMailingMailListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMailingCountDtoFromJSON(jsonValue));
    }

    /**
     * 메일 목록 총개수 확인(총 수신자수, 중복, 수신거부, 발송차단)
     * 메일 목록 총개수 확인(총 수신자수, 중복, 수신거부, 발송차단)
     */
    async getMailingEmailCountInfo(requestParameters: GetMailingEmailCountInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMailingCountDto> {
        const response = await this.getMailingEmailCountInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일/보도자료배포 상태 및 보내기 요청 시간 확인
     * 이메일/보도자료배포 상태 및 보내기 요청 시간 확인
     */
    async getStatusAndRequestDateTimeRaw(requestParameters: GetStatusAndRequestDateTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseMailingStatusDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getStatusAndRequestDateTime().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling getStatusAndRequestDateTime().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseMailingStatusDtoFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포 상태 및 보내기 요청 시간 확인
     * 이메일/보도자료배포 상태 및 보내기 요청 시간 확인
     */
    async getStatusAndRequestDateTime(requestParameters: GetStatusAndRequestDateTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseMailingStatusDto> {
        const response = await this.getStatusAndRequestDateTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일/보도자료배포 초안 수정 시 Lock 확인 및 요청
     * 이메일/보도자료배포 수정 전 Lock 요청
     */
    async lockBeforeWork1Raw(requestParameters: LockBeforeWork1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling lockBeforeWork1().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling lockBeforeWork1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/lock/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포 초안 수정 시 Lock 확인 및 요청
     * 이메일/보도자료배포 수정 전 Lock 요청
     */
    async lockBeforeWork1(requestParameters: LockBeforeWork1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.lockBeforeWork1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일/보도자료배포(MAILING, PRESS_RELEASE) 정보를 수정합니다.
     * 이메일/보도자료배포 수정
     */
    async modifyMailingRaw(requestParameters: ModifyMailingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMailingDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyMailing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyMailingRequestToJSON(requestParameters['modifyMailingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMailingDtoFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포(MAILING, PRESS_RELEASE) 정보를 수정합니다.
     * 이메일/보도자료배포 수정
     */
    async modifyMailing(requestParameters: ModifyMailingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMailingDto> {
        const response = await this.modifyMailingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일 보내기/보도자료배포 배포하기. 초안작성 완료 후 이메일을 보내거나 예약을 합니다.
     * 이메일 보내기/보도자료배포 배포하기
     */
    async reserveMailingRaw(requestParameters: ReserveMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling reserveMailing().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling reserveMailing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/reserve/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 이메일 보내기/보도자료배포 배포하기. 초안작성 완료 후 이메일을 보내거나 예약을 합니다.
     * 이메일 보내기/보도자료배포 배포하기
     */
    async reserveMailing(requestParameters: ReserveMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.reserveMailingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [테스트용] Mailing ID로 즉시 발송 이메일/보도자료 발송하기 (추후 Batch Job으로 분리)
     * [테스트용] Mailing ID로 즉시 발송 이메일/보도자료 발송하기 (추후 Batch Job으로 분리)
     */
    async runBatchJobToSendMailForMailingRaw(requestParameters: RunBatchJobToSendMailForMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['mailingId'] == null) {
            throw new runtime.RequiredError(
                'mailingId',
                'Required parameter "mailingId" was null or undefined when calling runBatchJobToSendMailForMailing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/batch/mailing/{mailingId}`.replace(`{${"mailingId"}}`, encodeURIComponent(String(requestParameters['mailingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * [테스트용] Mailing ID로 즉시 발송 이메일/보도자료 발송하기 (추후 Batch Job으로 분리)
     * [테스트용] Mailing ID로 즉시 발송 이메일/보도자료 발송하기 (추후 Batch Job으로 분리)
     */
    async runBatchJobToSendMailForMailing(requestParameters: RunBatchJobToSendMailForMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.runBatchJobToSendMailForMailingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일 보내기/보도자료배포 발송대기 상태에서 발송취소 하기, 초안 상태로 변경됨
     * 이메일 보내기/보도자료배포 발송 취소하기 
     */
    async sendCancelMailingRaw(requestParameters: SendCancelMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sendCancelMailing().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling sendCancelMailing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/sendcancel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 이메일 보내기/보도자료배포 발송대기 상태에서 발송취소 하기, 초안 상태로 변경됨
     * 이메일 보내기/보도자료배포 발송 취소하기 
     */
    async sendCancelMailing(requestParameters: SendCancelMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.sendCancelMailingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 보도자료배포 이메일보내기 테스트 메일을 보냅니다.
     * 보도자료배포 이메일보내기 테스트보내기 기능
     */
    async sendTestMailingRaw(requestParameters: SendTestMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sendTestMailing().'
            );
        }

        if (requestParameters['requestMailingTestDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingTestDto',
                'Required parameter "requestMailingTestDto" was null or undefined when calling sendTestMailing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/sendtest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingTestDtoToJSON(requestParameters['requestMailingTestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 보도자료배포 이메일보내기 테스트 메일을 보냅니다.
     * 보도자료배포 이메일보내기 테스트보내기 기능
     */
    async sendTestMailing(requestParameters: SendTestMailingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.sendTestMailingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이메일/보도자료배포 수정 완료 후 unLock 설정
     * 이메일/보도자료배포 수정 후 unLock 설정
     */
    async unLockAfterWork1Raw(requestParameters: UnLockAfterWork1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling unLockAfterWork1().'
            );
        }

        if (requestParameters['requestMailingDto'] == null) {
            throw new runtime.RequiredError(
                'requestMailingDto',
                'Required parameter "requestMailingDto" was null or undefined when calling unLockAfterWork1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailing/unlock/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMailingDtoToJSON(requestParameters['requestMailingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 이메일/보도자료배포 수정 완료 후 unLock 설정
     * 이메일/보도자료배포 수정 후 unLock 설정
     */
    async unLockAfterWork1(requestParameters: UnLockAfterWork1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.unLockAfterWork1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
