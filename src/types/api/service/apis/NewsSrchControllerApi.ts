/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonListResponseNewsSrchCategoryDto,
  BaseResponseCommonLong,
  BaseResponseCommonMapStringInteger,
  BaseResponseCommonNewsSrchDto,
  BaseResponseCommonPageNewsSrchDto,
  BaseResponseCommonString,
  CheckNameDto,
  CreateNewsSrchDto,
  DownloadPdfRequest,
  ModifyNewsSrchDto,
  PageableDto,
  RequestNewsSrchDto,
  SearchNewsSrchCategoryListDto,
  SearchNewsSrchCountDto,
  SearchNewsSrchDto,
  SendNewsReportMailRequest,
} from '../models/index';
import {
    BaseResponseCommonListResponseNewsSrchCategoryDtoFromJSON,
    BaseResponseCommonListResponseNewsSrchCategoryDtoToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonMapStringIntegerFromJSON,
    BaseResponseCommonMapStringIntegerToJSON,
    BaseResponseCommonNewsSrchDtoFromJSON,
    BaseResponseCommonNewsSrchDtoToJSON,
    BaseResponseCommonPageNewsSrchDtoFromJSON,
    BaseResponseCommonPageNewsSrchDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CheckNameDtoFromJSON,
    CheckNameDtoToJSON,
    CreateNewsSrchDtoFromJSON,
    CreateNewsSrchDtoToJSON,
    DownloadPdfRequestFromJSON,
    DownloadPdfRequestToJSON,
    ModifyNewsSrchDtoFromJSON,
    ModifyNewsSrchDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RequestNewsSrchDtoFromJSON,
    RequestNewsSrchDtoToJSON,
    SearchNewsSrchCategoryListDtoFromJSON,
    SearchNewsSrchCategoryListDtoToJSON,
    SearchNewsSrchCountDtoFromJSON,
    SearchNewsSrchCountDtoToJSON,
    SearchNewsSrchDtoFromJSON,
    SearchNewsSrchDtoToJSON,
    SendNewsReportMailRequestFromJSON,
    SendNewsReportMailRequestToJSON,
} from '../models/index';

export interface AddNewsSrchRequest {
    createNewsSrchDto: CreateNewsSrchDto;
}

export interface CheckNewsSrchNameRequest {
    checkNameDto: CheckNameDto;
}

export interface CountNewsSrchByTypeRequest {
    searchDto: SearchNewsSrchCountDto;
}

export interface DeleteMediaListInfoRequest {
    id: number;
}

export interface DownloadPdfOperationRequest {
    downloadPdfRequest?: DownloadPdfRequest;
}

export interface FindAllNewsSrchRequest {
    searchDto: SearchNewsSrchDto;
    pageableDto: PageableDto;
}

export interface FindAllNewsSrchByCategoryRequest {
    searchNewsSrchCategoryListDto: SearchNewsSrchCategoryListDto;
}

export interface FindNewsSrchInfoRequest {
    id: number;
    searchDto: RequestNewsSrchDto;
}

export interface ModifyNewsSrchRequest {
    id: number;
    modifyNewsSrchDto: ModifyNewsSrchDto;
}

export interface SendNewsReportMailOperationRequest {
    sendNewsReportMailRequest?: SendNewsReportMailRequest;
}

/**
 * 
 */
export class NewsSrchControllerApi extends runtime.BaseAPI {

    /**
     * 모니터링 추가
     * 모니터링 추가
     */
    async addNewsSrchRaw(requestParameters: AddNewsSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createNewsSrchDto'] == null) {
            throw new runtime.RequiredError(
                'createNewsSrchDto',
                'Required parameter "createNewsSrchDto" was null or undefined when calling addNewsSrch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNewsSrchDtoToJSON(requestParameters['createNewsSrchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 모니터링 추가
     * 모니터링 추가
     */
    async addNewsSrch(requestParameters: AddNewsSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addNewsSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모니터링을 추가 변경 할 때 타이틀명 존재하는지 확인(동일한 회사내에서 확인)
     * 모니터링 Title 중복 확인
     */
    async checkNewsSrchNameRaw(requestParameters: CheckNewsSrchNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['checkNameDto'] == null) {
            throw new runtime.RequiredError(
                'checkNameDto',
                'Required parameter "checkNameDto" was null or undefined when calling checkNewsSrchName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch/checkname`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckNameDtoToJSON(requestParameters['checkNameDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 모니터링을 추가 변경 할 때 타이틀명 존재하는지 확인(동일한 회사내에서 확인)
     * 모니터링 Title 중복 확인
     */
    async checkNewsSrchName(requestParameters: CheckNewsSrchNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkNewsSrchNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모니터링 유형별 개수 정보
     * 모니터링 유형별 개수 정보
     */
    async countNewsSrchByTypeRaw(requestParameters: CountNewsSrchByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMapStringInteger>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling countNewsSrchByType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMapStringIntegerFromJSON(jsonValue));
    }

    /**
     * 모니터링 유형별 개수 정보
     * 모니터링 유형별 개수 정보
     */
    async countNewsSrchByType(requestParameters: CountNewsSrchByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMapStringInteger> {
        const response = await this.countNewsSrchByTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모니터링을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능, 뉴스 알리미 관련 삭제 추가 
     * 모니터링 삭제
     */
    async deleteMediaListInfoRaw(requestParameters: DeleteMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaListInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 모니터링을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능, 뉴스 알리미 관련 삭제 추가 
     * 모니터링 삭제
     */
    async deleteMediaListInfo(requestParameters: DeleteMediaListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteMediaListInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 요청 데이터를 기반으로 보고서 PDF를 생성하고 다운로드합니다.
     * 보고서 PDF 다운로드
     */
    async downloadPdfRaw(requestParameters: DownloadPdfOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/report/download/pdf`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DownloadPdfRequestToJSON(requestParameters['downloadPdfRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 요청 데이터를 기반으로 보고서 PDF를 생성하고 다운로드합니다.
     * 보고서 PDF 다운로드
     */
    async downloadPdf(requestParameters: DownloadPdfOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadPdfRaw(requestParameters, initOverrides);
    }

    /**
     * 모니터링의 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 모니터링 리스트
     */
    async findAllNewsSrchRaw(requestParameters: FindAllNewsSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageNewsSrchDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllNewsSrch().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllNewsSrch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageNewsSrchDtoFromJSON(jsonValue));
    }

    /**
     * 모니터링의 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 모니터링 리스트
     */
    async findAllNewsSrch(requestParameters: FindAllNewsSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageNewsSrchDto> {
        const response = await this.findAllNewsSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모니터링 카테고리별 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 모니터링 카테고리별 리스트 조회
     */
    async findAllNewsSrchByCategoryRaw(requestParameters: FindAllNewsSrchByCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListResponseNewsSrchCategoryDto>> {
        if (requestParameters['searchNewsSrchCategoryListDto'] == null) {
            throw new runtime.RequiredError(
                'searchNewsSrchCategoryListDto',
                'Required parameter "searchNewsSrchCategoryListDto" was null or undefined when calling findAllNewsSrchByCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch/category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchNewsSrchCategoryListDtoToJSON(requestParameters['searchNewsSrchCategoryListDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListResponseNewsSrchCategoryDtoFromJSON(jsonValue));
    }

    /**
     * 모니터링 카테고리별 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 모니터링 카테고리별 리스트 조회
     */
    async findAllNewsSrchByCategory(requestParameters: FindAllNewsSrchByCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListResponseNewsSrchCategoryDto> {
        const response = await this.findAllNewsSrchByCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모니터링 상세정보를 가져옵니다.
     * 모니터링 정보 확인
     */
    async findNewsSrchInfoRaw(requestParameters: FindNewsSrchInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNewsSrchDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findNewsSrchInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findNewsSrchInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNewsSrchDtoFromJSON(jsonValue));
    }

    /**
     * 모니터링 상세정보를 가져옵니다.
     * 모니터링 정보 확인
     */
    async findNewsSrchInfo(requestParameters: FindNewsSrchInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNewsSrchDto> {
        const response = await this.findNewsSrchInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모니터링 수정,  뉴스 알리미 발송 로그 삭제 추가
     * 모니터링 수정
     */
    async modifyNewsSrchRaw(requestParameters: ModifyNewsSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyNewsSrch().'
            );
        }

        if (requestParameters['modifyNewsSrchDto'] == null) {
            throw new runtime.RequiredError(
                'modifyNewsSrchDto',
                'Required parameter "modifyNewsSrchDto" was null or undefined when calling modifyNewsSrch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyNewsSrchDtoToJSON(requestParameters['modifyNewsSrchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 모니터링 수정,  뉴스 알리미 발송 로그 삭제 추가
     * 모니터링 수정
     */
    async modifyNewsSrch(requestParameters: ModifyNewsSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyNewsSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 모니터링 보고서 메일 보내기
     * 모니터링 보고서 메일 보내기
     */
    async sendNewsReportMailRaw(requestParameters: SendNewsReportMailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/newssrch/mail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendNewsReportMailRequestToJSON(requestParameters['sendNewsReportMailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 모니터링 보고서 메일 보내기
     * 모니터링 보고서 메일 보내기
     */
    async sendNewsReportMail(requestParameters: SendNewsReportMailOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.sendNewsReportMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
