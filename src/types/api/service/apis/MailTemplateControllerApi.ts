/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonListMailTemplateDto,
  BaseResponseCommonMailTemplateDto,
  BaseResponseCommonMailTemplatesFooterDto,
  BaseResponseCommonString,
  CreateMailTemplateDto,
  UpdateMailTemplateDto,
} from '../models/index';
import {
    BaseResponseCommonListMailTemplateDtoFromJSON,
    BaseResponseCommonListMailTemplateDtoToJSON,
    BaseResponseCommonMailTemplateDtoFromJSON,
    BaseResponseCommonMailTemplateDtoToJSON,
    BaseResponseCommonMailTemplatesFooterDtoFromJSON,
    BaseResponseCommonMailTemplatesFooterDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CreateMailTemplateDtoFromJSON,
    CreateMailTemplateDtoToJSON,
    UpdateMailTemplateDtoFromJSON,
    UpdateMailTemplateDtoToJSON,
} from '../models/index';

export interface AddMailTemplateRequest {
    createMailTemplateDto: CreateMailTemplateDto;
}

export interface DeleteMailTemplateInfoRequest {
    id: number;
}

export interface FindTemplatesFooterInfoRequest {
    type: string;
}

export interface ModifyMailTemplateInfoRequest {
    id: number;
    updateMailTemplateDto: UpdateMailTemplateDto;
}

/**
 * 
 */
export class MailTemplateControllerApi extends runtime.BaseAPI {

    /**
     * 템플릿 추가
     * 템플릿 추가
     */
    async addMailTemplateRaw(requestParameters: AddMailTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMailTemplateDto>> {
        if (requestParameters['createMailTemplateDto'] == null) {
            throw new runtime.RequiredError(
                'createMailTemplateDto',
                'Required parameter "createMailTemplateDto" was null or undefined when calling addMailTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailtemplate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMailTemplateDtoToJSON(requestParameters['createMailTemplateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMailTemplateDtoFromJSON(jsonValue));
    }

    /**
     * 템플릿 추가
     * 템플릿 추가
     */
    async addMailTemplate(requestParameters: AddMailTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMailTemplateDto> {
        const response = await this.addMailTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 템플릿 삭제하기(본인이 작성한 것만 삭제 가능)
     * 템플릿 삭제하기(본인 작성 건 삭제)
     */
    async deleteMailTemplateInfoRaw(requestParameters: DeleteMailTemplateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMailTemplateInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailtemplate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 템플릿 삭제하기(본인이 작성한 것만 삭제 가능)
     * 템플릿 삭제하기(본인 작성 건 삭제)
     */
    async deleteMailTemplateInfo(requestParameters: DeleteMailTemplateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteMailTemplateInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 본인이 작성한 템플릿 목록 가져오기
     * 템플릿(보도자료, 이메일) 목록 가져오기
     */
    async findAllByUserAndIsPrRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListMailTemplateDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailtemplate/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListMailTemplateDtoFromJSON(jsonValue));
    }

    /**
     * 본인이 작성한 템플릿 목록 가져오기
     * 템플릿(보도자료, 이메일) 목록 가져오기
     */
    async findAllByUserAndIsPr(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListMailTemplateDto> {
        const response = await this.findAllByUserAndIsPrRaw(initOverrides);
        return await response.value();
    }

    /**
     * 템플릿풋터(템플릿 유형) 정보 가져오기 - 유형 : NEWSLETTER_MAIL, USER_MAIL, SHARE_MAIL, NOTIFICATION_MAIL 등
     * 템플릿풋터(템플릿 유형) 정보 가져오기
     */
    async findTemplatesFooterInfoRaw(requestParameters: FindTemplatesFooterInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMailTemplatesFooterDto>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling findTemplatesFooterInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailtemplate/footer/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMailTemplatesFooterDtoFromJSON(jsonValue));
    }

    /**
     * 템플릿풋터(템플릿 유형) 정보 가져오기 - 유형 : NEWSLETTER_MAIL, USER_MAIL, SHARE_MAIL, NOTIFICATION_MAIL 등
     * 템플릿풋터(템플릿 유형) 정보 가져오기
     */
    async findTemplatesFooterInfo(requestParameters: FindTemplatesFooterInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMailTemplatesFooterDto> {
        const response = await this.findTemplatesFooterInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 템플릿 수정하기
     * 템플릿 수정하기
     */
    async modifyMailTemplateInfoRaw(requestParameters: ModifyMailTemplateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyMailTemplateInfo().'
            );
        }

        if (requestParameters['updateMailTemplateDto'] == null) {
            throw new runtime.RequiredError(
                'updateMailTemplateDto',
                'Required parameter "updateMailTemplateDto" was null or undefined when calling modifyMailTemplateInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mailtemplate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMailTemplateDtoToJSON(requestParameters['updateMailTemplateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 템플릿 수정하기
     * 템플릿 수정하기
     */
    async modifyMailTemplateInfo(requestParameters: ModifyMailTemplateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyMailTemplateInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
