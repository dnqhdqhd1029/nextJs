/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddDelNewsAndPrDto,
  AddOneNewsInClipBook,
  BaseResponseCommonClipBookDto,
  BaseResponseCommonLong,
  BaseResponseCommonMapStringInteger,
  BaseResponseCommonPageClipBookDto,
  BaseResponseCommonString,
  CheckClipBookNameDto,
  CopyClipBookDto,
  CreateClipBookDto,
  DeleteClipBookDto,
  EditSharePolicyClipBookDto,
  ModifyClipBookDto,
  PageableDto,
  RequestMediaSrchDto,
  SearchClipBookCountDto,
  SearchClipBookDto,
} from '../models/index';
import {
    AddDelNewsAndPrDtoFromJSON,
    AddDelNewsAndPrDtoToJSON,
    AddOneNewsInClipBookFromJSON,
    AddOneNewsInClipBookToJSON,
    BaseResponseCommonClipBookDtoFromJSON,
    BaseResponseCommonClipBookDtoToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonMapStringIntegerFromJSON,
    BaseResponseCommonMapStringIntegerToJSON,
    BaseResponseCommonPageClipBookDtoFromJSON,
    BaseResponseCommonPageClipBookDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CheckClipBookNameDtoFromJSON,
    CheckClipBookNameDtoToJSON,
    CopyClipBookDtoFromJSON,
    CopyClipBookDtoToJSON,
    CreateClipBookDtoFromJSON,
    CreateClipBookDtoToJSON,
    DeleteClipBookDtoFromJSON,
    DeleteClipBookDtoToJSON,
    EditSharePolicyClipBookDtoFromJSON,
    EditSharePolicyClipBookDtoToJSON,
    ModifyClipBookDtoFromJSON,
    ModifyClipBookDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RequestMediaSrchDtoFromJSON,
    RequestMediaSrchDtoToJSON,
    SearchClipBookCountDtoFromJSON,
    SearchClipBookCountDtoToJSON,
    SearchClipBookDtoFromJSON,
    SearchClipBookDtoToJSON,
} from '../models/index';

export interface AddClipBookRequest {
    createClipBookDto: CreateClipBookDto;
}

export interface AddNewsPrInClipBookRequest {
    addDelNewsAndPrDto: AddDelNewsAndPrDto;
}

export interface AddOneNewsInClipBookRequest {
    addOneNewsInClipBook: AddOneNewsInClipBook;
}

export interface CheckClipBookNameRequest {
    checkClipBookNameDto: CheckClipBookNameDto;
}

export interface CopyClipBookRequest {
    copyClipBookDto: CopyClipBookDto;
}

export interface CountClipBookByTypeRequest {
    searchDto: SearchClipBookCountDto;
}

export interface DelNewsPrInClipBookRequest {
    addDelNewsAndPrDto: AddDelNewsAndPrDto;
}

export interface DeleteClipBookRequest {
    id: number;
}

export interface DeleteListClipBookRequest {
    deleteClipBookDto: DeleteClipBookDto;
}

export interface EditListClipBookSharePolicyRequest {
    editSharePolicyClipBookDto: EditSharePolicyClipBookDto;
}

export interface FindAllClipBookRequest {
    searchDto: SearchClipBookDto;
    pageableDto: PageableDto;
}

export interface FindClipBookInfoRequest {
    id: number;
    searchDto: RequestMediaSrchDto;
}

export interface ModifyClipBookInfoRequest {
    id: number;
    modifyClipBookDto: ModifyClipBookDto;
}

/**
 * 
 */
export class ClipBookControllerApi extends runtime.BaseAPI {

    /**
     * 클립북 추가
     * 클립북 추가
     */
    async addClipBookRaw(requestParameters: AddClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createClipBookDto'] == null) {
            throw new runtime.RequiredError(
                'createClipBookDto',
                'Required parameter "createClipBookDto" was null or undefined when calling addClipBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateClipBookDtoToJSON(requestParameters['createClipBookDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 클립북 추가
     * 클립북 추가
     */
    async addClipBook(requestParameters: AddClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북에 뉴스/보도자료 추가(배열 처리)
     * 클립북에 뉴스/보도자료 추가(배열 처리)
     */
    async addNewsPrInClipBookRaw(requestParameters: AddNewsPrInClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['addDelNewsAndPrDto'] == null) {
            throw new runtime.RequiredError(
                'addDelNewsAndPrDto',
                'Required parameter "addDelNewsAndPrDto" was null or undefined when calling addNewsPrInClipBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/newspr/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDelNewsAndPrDtoToJSON(requestParameters['addDelNewsAndPrDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북에 뉴스/보도자료 추가(배열 처리)
     * 클립북에 뉴스/보도자료 추가(배열 처리)
     */
    async addNewsPrInClipBook(requestParameters: AddNewsPrInClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addNewsPrInClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북에 뉴스 하나만 추가
     * 클립북에 뉴스 하나만 추가
     */
    async addOneNewsInClipBookRaw(requestParameters: AddOneNewsInClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['addOneNewsInClipBook'] == null) {
            throw new runtime.RequiredError(
                'addOneNewsInClipBook',
                'Required parameter "addOneNewsInClipBook" was null or undefined when calling addOneNewsInClipBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/newspr/addone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOneNewsInClipBookToJSON(requestParameters['addOneNewsInClipBook']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북에 뉴스 하나만 추가
     * 클립북에 뉴스 하나만 추가
     */
    async addOneNewsInClipBook(requestParameters: AddOneNewsInClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addOneNewsInClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북 추가/변경 할 때 클립북 Title 존재하는지 확인
     * 클립북 Title 중복 확인
     */
    async checkClipBookNameRaw(requestParameters: CheckClipBookNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['checkClipBookNameDto'] == null) {
            throw new runtime.RequiredError(
                'checkClipBookNameDto',
                'Required parameter "checkClipBookNameDto" was null or undefined when calling checkClipBookName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/checkname`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckClipBookNameDtoToJSON(requestParameters['checkClipBookNameDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북 추가/변경 할 때 클립북 Title 존재하는지 확인
     * 클립북 Title 중복 확인
     */
    async checkClipBookName(requestParameters: CheckClipBookNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkClipBookNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북 복사
     * 클립북 복사
     */
    async copyClipBookRaw(requestParameters: CopyClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['copyClipBookDto'] == null) {
            throw new runtime.RequiredError(
                'copyClipBookDto',
                'Required parameter "copyClipBookDto" was null or undefined when calling copyClipBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/copy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyClipBookDtoToJSON(requestParameters['copyClipBookDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북 복사
     * 클립북 복사
     */
    async copyClipBook(requestParameters: CopyClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.copyClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북 유형별 개수 정보(전체 / NORMAL / COVERAGE)
     * 클립북 유형별 개수 정보(전체 / NORMAL / COVERAGE)
     */
    async countClipBookByTypeRaw(requestParameters: CountClipBookByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMapStringInteger>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling countClipBookByType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMapStringIntegerFromJSON(jsonValue));
    }

    /**
     * 클립북 유형별 개수 정보(전체 / NORMAL / COVERAGE)
     * 클립북 유형별 개수 정보(전체 / NORMAL / COVERAGE)
     */
    async countClipBookByType(requestParameters: CountClipBookByTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMapStringInteger> {
        const response = await this.countClipBookByTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북에 뉴스/보도자료 제거
     * 클립북에 뉴스/보도자료 제거
     */
    async delNewsPrInClipBookRaw(requestParameters: DelNewsPrInClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['addDelNewsAndPrDto'] == null) {
            throw new runtime.RequiredError(
                'addDelNewsAndPrDto',
                'Required parameter "addDelNewsAndPrDto" was null or undefined when calling delNewsPrInClipBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/newspr/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDelNewsAndPrDtoToJSON(requestParameters['addDelNewsAndPrDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북에 뉴스/보도자료 제거
     * 클립북에 뉴스/보도자료 제거
     */
    async delNewsPrInClipBook(requestParameters: DelNewsPrInClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.delNewsPrInClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 클립북 삭제
     */
    async deleteClipBookRaw(requestParameters: DeleteClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteClipBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 클립북 삭제
     */
    async deleteClipBook(requestParameters: DeleteClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북을 배열로 받아 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 건만 삭제됩니다.
     * 클립북을 배열로 받아 삭제
     */
    async deleteListClipBookRaw(requestParameters: DeleteListClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['deleteClipBookDto'] == null) {
            throw new runtime.RequiredError(
                'deleteClipBookDto',
                'Required parameter "deleteClipBookDto" was null or undefined when calling deleteListClipBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/list/del`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteClipBookDtoToJSON(requestParameters['deleteClipBookDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북을 배열로 받아 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 건만 삭제됩니다.
     * 클립북을 배열로 받아 삭제
     */
    async deleteListClipBook(requestParameters: DeleteListClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteListClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북을 배열로 받아 공유설정값을 한번에 수정합니다.
     * 클립북 공유설정을 배열로 받아 한번에 수정
     */
    async editListClipBookSharePolicyRaw(requestParameters: EditListClipBookSharePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['editSharePolicyClipBookDto'] == null) {
            throw new runtime.RequiredError(
                'editSharePolicyClipBookDto',
                'Required parameter "editSharePolicyClipBookDto" was null or undefined when calling editListClipBookSharePolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/list/share`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditSharePolicyClipBookDtoToJSON(requestParameters['editSharePolicyClipBookDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북을 배열로 받아 공유설정값을 한번에 수정합니다.
     * 클립북 공유설정을 배열로 받아 한번에 수정
     */
    async editListClipBookSharePolicy(requestParameters: EditListClipBookSharePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.editListClipBookSharePolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북 리스트
     * 클립북 리스트
     */
    async findAllClipBookRaw(requestParameters: FindAllClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageClipBookDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllClipBook().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllClipBook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageClipBookDtoFromJSON(jsonValue));
    }

    /**
     * 클립북 리스트
     * 클립북 리스트
     */
    async findAllClipBook(requestParameters: FindAllClipBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageClipBookDto> {
        const response = await this.findAllClipBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북 정보를 가져옵니다.
     * 클립북 정보 확인
     */
    async findClipBookInfoRaw(requestParameters: FindClipBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonClipBookDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findClipBookInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findClipBookInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonClipBookDtoFromJSON(jsonValue));
    }

    /**
     * 클립북 정보를 가져옵니다.
     * 클립북 정보 확인
     */
    async findClipBookInfo(requestParameters: FindClipBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonClipBookDto> {
        const response = await this.findClipBookInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 클립북 정보를 수정합니다.
     * 클립북 수정
     */
    async modifyClipBookInfoRaw(requestParameters: ModifyClipBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyClipBookInfo().'
            );
        }

        if (requestParameters['modifyClipBookDto'] == null) {
            throw new runtime.RequiredError(
                'modifyClipBookDto',
                'Required parameter "modifyClipBookDto" was null or undefined when calling modifyClipBookInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/clipbook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyClipBookDtoToJSON(requestParameters['modifyClipBookDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 클립북 정보를 수정합니다.
     * 클립북 수정
     */
    async modifyClipBookInfo(requestParameters: ModifyClipBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyClipBookInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
