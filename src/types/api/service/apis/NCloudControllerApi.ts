/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonApiResponseEmailSendResponse,
  BaseResponseCommonString,
  FileUploadToMailerRequest,
  SendTestMailDto,
} from '../models/index';
import {
    BaseResponseCommonApiResponseEmailSendResponseFromJSON,
    BaseResponseCommonApiResponseEmailSendResponseToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    FileUploadToMailerRequestFromJSON,
    FileUploadToMailerRequestToJSON,
    SendTestMailDtoFromJSON,
    SendTestMailDtoToJSON,
} from '../models/index';

export interface FileUploadToMailerOperationRequest {
    fileUploadToMailerRequest?: FileUploadToMailerRequest;
}

export interface GetActionFiltersRequest {
    sendTestMailDto: SendTestMailDto;
}

/**
 * 
 */
export class NCloudControllerApi extends runtime.BaseAPI {

    /**
     *  메일 보내기 위한 mailer 파일 업로드(Local PC 파일 업로드) 
     *  메일보내기 위한 mailer 파일 업로드(Local PC 파일 업로드) 
     */
    async fileUploadToMailerRaw(requestParameters: FileUploadToMailerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nouser/upload/mailer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileUploadToMailerRequestToJSON(requestParameters['fileUploadToMailerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     *  메일 보내기 위한 mailer 파일 업로드(Local PC 파일 업로드) 
     *  메일보내기 위한 mailer 파일 업로드(Local PC 파일 업로드) 
     */
    async fileUploadToMailer(requestParameters: FileUploadToMailerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.fileUploadToMailerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [테스트] 테스트로 메일 보내기용, 운영에서는 사용 안하도록 함
     * [테스트] 메일 보내기
     */
    async getActionFiltersRaw(requestParameters: GetActionFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonApiResponseEmailSendResponse>> {
        if (requestParameters['sendTestMailDto'] == null) {
            throw new runtime.RequiredError(
                'sendTestMailDto',
                'Required parameter "sendTestMailDto" was null or undefined when calling getActionFilters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/sendmail/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendTestMailDtoToJSON(requestParameters['sendTestMailDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonApiResponseEmailSendResponseFromJSON(jsonValue));
    }

    /**
     * [테스트] 테스트로 메일 보내기용, 운영에서는 사용 안하도록 함
     * [테스트] 메일 보내기
     */
    async getActionFilters(requestParameters: GetActionFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonApiResponseEmailSendResponse> {
        const response = await this.getActionFiltersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
