/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonBoolean,
  BaseResponseCommonNewsAlertDto,
  BaseResponseCommonNewsAlertScheduleDto,
  BaseResponseCommonPageNewsAlertListDto,
  BaseResponseCommonString,
  NewsAlertDto,
  NewsAlertReceiveActiveDto,
  NewsAlertScheduleDto,
  PageableDto,
  SearchNewsAlertDto,
} from '../models/index';
import {
    BaseResponseCommonBooleanFromJSON,
    BaseResponseCommonBooleanToJSON,
    BaseResponseCommonNewsAlertDtoFromJSON,
    BaseResponseCommonNewsAlertDtoToJSON,
    BaseResponseCommonNewsAlertScheduleDtoFromJSON,
    BaseResponseCommonNewsAlertScheduleDtoToJSON,
    BaseResponseCommonPageNewsAlertListDtoFromJSON,
    BaseResponseCommonPageNewsAlertListDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    NewsAlertDtoFromJSON,
    NewsAlertDtoToJSON,
    NewsAlertReceiveActiveDtoFromJSON,
    NewsAlertReceiveActiveDtoToJSON,
    NewsAlertScheduleDtoFromJSON,
    NewsAlertScheduleDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    SearchNewsAlertDtoFromJSON,
    SearchNewsAlertDtoToJSON,
} from '../models/index';

export interface GetNewsAlertListRequest {
    searchNewsAlertDto: SearchNewsAlertDto;
    pageableDto: PageableDto;
}

export interface GetNewsAlertScheduleRequest {
    alertId: number;
}

export interface GetNewsAlertSettingRequest {
    newsSrchId: number;
}

export interface SaveNewsAlertScheduleRequest {
    newsAlertScheduleDto: NewsAlertScheduleDto;
}

export interface SaveNewsAlertSettingRequest {
    newsAlertDto: NewsAlertDto;
}

export interface SetReceiveNewsAlertRequest {
    newsAlertReceiveActiveDto: NewsAlertReceiveActiveDto;
}

export interface UpdateNewsAlertScheduleRequest {
    newsAlertScheduleDto: NewsAlertScheduleDto;
}

export interface UpdateNewsAlertSchedule1Request {
    alertId: number;
}

export interface UpdateNewsAlertSettingRequest {
    newsAlertDto: NewsAlertDto;
}

/**
 * 
 */
export class NewsAlertControllerApi extends runtime.BaseAPI {

    /**
     * 뉴스 알리미 목록과 요일별 시간 데이터를 반환합니다.
     * 8. 뉴스 알리미 목록 조회
     */
    async getNewsAlertListRaw(requestParameters: GetNewsAlertListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageNewsAlertListDto>> {
        if (requestParameters['searchNewsAlertDto'] == null) {
            throw new runtime.RequiredError(
                'searchNewsAlertDto',
                'Required parameter "searchNewsAlertDto" was null or undefined when calling getNewsAlertList().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling getNewsAlertList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchNewsAlertDto'] != null) {
            queryParameters['searchNewsAlertDto'] = requestParameters['searchNewsAlertDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageNewsAlertListDtoFromJSON(jsonValue));
    }

    /**
     * 뉴스 알리미 목록과 요일별 시간 데이터를 반환합니다.
     * 8. 뉴스 알리미 목록 조회
     */
    async getNewsAlertList(requestParameters: GetNewsAlertListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageNewsAlertListDto> {
        const response = await this.getNewsAlertListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 특정 알리미 ID의 스케줄을 조회합니다.
     * 5. 뉴스 알리미 스케줄 조회
     */
    async getNewsAlertScheduleRaw(requestParameters: GetNewsAlertScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNewsAlertScheduleDto>> {
        if (requestParameters['alertId'] == null) {
            throw new runtime.RequiredError(
                'alertId',
                'Required parameter "alertId" was null or undefined when calling getNewsAlertSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/{alertId}/schedules`.replace(`{${"alertId"}}`, encodeURIComponent(String(requestParameters['alertId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNewsAlertScheduleDtoFromJSON(jsonValue));
    }

    /**
     * 특정 알리미 ID의 스케줄을 조회합니다.
     * 5. 뉴스 알리미 스케줄 조회
     */
    async getNewsAlertSchedule(requestParameters: GetNewsAlertScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNewsAlertScheduleDto> {
        const response = await this.getNewsAlertScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 제목, 설명, 뉴스 정렬 조회
     * 1. 알리미 설정 조회
     */
    async getNewsAlertSettingRaw(requestParameters: GetNewsAlertSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonNewsAlertDto>> {
        if (requestParameters['newsSrchId'] == null) {
            throw new runtime.RequiredError(
                'newsSrchId',
                'Required parameter "newsSrchId" was null or undefined when calling getNewsAlertSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/{newsSrchId}`.replace(`{${"newsSrchId"}}`, encodeURIComponent(String(requestParameters['newsSrchId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonNewsAlertDtoFromJSON(jsonValue));
    }

    /**
     * 제목, 설명, 뉴스 정렬 조회
     * 1. 알리미 설정 조회
     */
    async getNewsAlertSetting(requestParameters: GetNewsAlertSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonNewsAlertDto> {
        const response = await this.getNewsAlertSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스알리미 이메일 수신 설정을 조회합니다.
     * 9. 뉴스알리미 이메일 수신 설정 조회
     */
    async getReceiveNewsAlertRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonBoolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/receive-email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonBooleanFromJSON(jsonValue));
    }

    /**
     * 뉴스알리미 이메일 수신 설정을 조회합니다.
     * 9. 뉴스알리미 이메일 수신 설정 조회
     */
    async getReceiveNewsAlert(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonBoolean> {
        const response = await this.getReceiveNewsAlertRaw(initOverrides);
        return await response.value();
    }

    /**
     * 새로운 스케줄을 저장합니다.
     * 6. 뉴스 알리미 스케줄 저장
     */
    async saveNewsAlertScheduleRaw(requestParameters: SaveNewsAlertScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['newsAlertScheduleDto'] == null) {
            throw new runtime.RequiredError(
                'newsAlertScheduleDto',
                'Required parameter "newsAlertScheduleDto" was null or undefined when calling saveNewsAlertSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewsAlertScheduleDtoToJSON(requestParameters['newsAlertScheduleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 새로운 스케줄을 저장합니다.
     * 6. 뉴스 알리미 스케줄 저장
     */
    async saveNewsAlertSchedule(requestParameters: SaveNewsAlertScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.saveNewsAlertScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 제목, 설명, 뉴스 정렬 저장
     * 2. 알리미 설정 저장
     */
    async saveNewsAlertSettingRaw(requestParameters: SaveNewsAlertSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['newsAlertDto'] == null) {
            throw new runtime.RequiredError(
                'newsAlertDto',
                'Required parameter "newsAlertDto" was null or undefined when calling saveNewsAlertSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewsAlertDtoToJSON(requestParameters['newsAlertDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 제목, 설명, 뉴스 정렬 저장
     * 2. 알리미 설정 저장
     */
    async saveNewsAlertSetting(requestParameters: SaveNewsAlertSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.saveNewsAlertSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스알리미 이메일 수신 설정을 변경합니다.
     * 10. 뉴스알리미 이메일 수신 설정 수정
     */
    async setReceiveNewsAlertRaw(requestParameters: SetReceiveNewsAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['newsAlertReceiveActiveDto'] == null) {
            throw new runtime.RequiredError(
                'newsAlertReceiveActiveDto',
                'Required parameter "newsAlertReceiveActiveDto" was null or undefined when calling setReceiveNewsAlert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/receive-email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewsAlertReceiveActiveDtoToJSON(requestParameters['newsAlertReceiveActiveDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스알리미 이메일 수신 설정을 변경합니다.
     * 10. 뉴스알리미 이메일 수신 설정 수정
     */
    async setReceiveNewsAlert(requestParameters: SetReceiveNewsAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.setReceiveNewsAlertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 기존 뉴스 알리미 스케줄을 수정합니다.
     * 7. 뉴스 알리미 스케줄 수정
     */
    async updateNewsAlertScheduleRaw(requestParameters: UpdateNewsAlertScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['newsAlertScheduleDto'] == null) {
            throw new runtime.RequiredError(
                'newsAlertScheduleDto',
                'Required parameter "newsAlertScheduleDto" was null or undefined when calling updateNewsAlertSchedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/schedule`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewsAlertScheduleDtoToJSON(requestParameters['newsAlertScheduleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 기존 뉴스 알리미 스케줄을 수정합니다.
     * 7. 뉴스 알리미 스케줄 수정
     */
    async updateNewsAlertSchedule(requestParameters: UpdateNewsAlertScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.updateNewsAlertScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 뉴스 알리미 삭제시 스케줄도 삭제됩니다.
     * 4. 뉴스 알리미 삭제
     */
    async updateNewsAlertSchedule1Raw(requestParameters: UpdateNewsAlertSchedule1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['alertId'] == null) {
            throw new runtime.RequiredError(
                'alertId',
                'Required parameter "alertId" was null or undefined when calling updateNewsAlertSchedule1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts/{alertId}`.replace(`{${"alertId"}}`, encodeURIComponent(String(requestParameters['alertId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 뉴스 알리미 삭제시 스케줄도 삭제됩니다.
     * 4. 뉴스 알리미 삭제
     */
    async updateNewsAlertSchedule1(requestParameters: UpdateNewsAlertSchedule1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.updateNewsAlertSchedule1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 제목, 설명, 뉴스 정렬 옵션 수정
     * 3. 뉴스 알리미 수정
     */
    async updateNewsAlertSettingRaw(requestParameters: UpdateNewsAlertSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['newsAlertDto'] == null) {
            throw new runtime.RequiredError(
                'newsAlertDto',
                'Required parameter "newsAlertDto" was null or undefined when calling updateNewsAlertSetting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/news-alerts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewsAlertDtoToJSON(requestParameters['newsAlertDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 제목, 설명, 뉴스 정렬 옵션 수정
     * 3. 뉴스 알리미 수정
     */
    async updateNewsAlertSetting(requestParameters: UpdateNewsAlertSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.updateNewsAlertSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
