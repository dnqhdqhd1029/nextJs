/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonListResponseTaggingDto,
  BaseResponseCommonString,
  RequestTaggingDto,
  RequestTaggingExceptDto,
  SearchTaggingDto,
} from '../models/index';
import {
    BaseResponseCommonListResponseTaggingDtoFromJSON,
    BaseResponseCommonListResponseTaggingDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    RequestTaggingDtoFromJSON,
    RequestTaggingDtoToJSON,
    RequestTaggingExceptDtoFromJSON,
    RequestTaggingExceptDtoToJSON,
    SearchTaggingDtoFromJSON,
    SearchTaggingDtoToJSON,
} from '../models/index';

export interface AddTaggingRequest {
    requestTaggingDto: RequestTaggingDto;
}

export interface DeleteTaggingRequest {
    id: number;
}

export interface ExceptTaggingRequest {
    requestTaggingExceptDto: RequestTaggingExceptDto;
}

export interface FindTaggingTagsRequest {
    searchDto: SearchTaggingDto;
}

export interface ResetTaggingRequest {
    requestTaggingDto: RequestTaggingDto;
}

/**
 * 
 */
export class TaggingControllerApi extends runtime.BaseAPI {

    /**
     * 태깅 
     * 태깅 추가 , category : NEWS / ACTION
     */
    async addTaggingRaw(requestParameters: AddTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestTaggingDto'] == null) {
            throw new runtime.RequiredError(
                'requestTaggingDto',
                'Required parameter "requestTaggingDto" was null or undefined when calling addTagging().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tagging`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestTaggingDtoToJSON(requestParameters['requestTaggingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 태깅 
     * 태깅 추가 , category : NEWS / ACTION
     */
    async addTagging(requestParameters: AddTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addTaggingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태깅된 것을 삭제합니다. 
     * 태깅 하나 삭제
     */
    async deleteTaggingRaw(requestParameters: DeleteTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTagging().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tagging/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 태깅된 것을 삭제합니다. 
     * 태깅 하나 삭제
     */
    async deleteTagging(requestParameters: DeleteTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteTaggingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 선택한 태깅을 대상에서 제거 
     * 태깅 제외  , category : NEWS / ACTION
     */
    async exceptTaggingRaw(requestParameters: ExceptTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestTaggingExceptDto'] == null) {
            throw new runtime.RequiredError(
                'requestTaggingExceptDto',
                'Required parameter "requestTaggingExceptDto" was null or undefined when calling exceptTagging().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tagging/except`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestTaggingExceptDtoToJSON(requestParameters['requestTaggingExceptDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 선택한 태깅을 대상에서 제거 
     * 태깅 제외  , category : NEWS / ACTION
     */
    async exceptTagging(requestParameters: ExceptTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.exceptTaggingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태그 리스트, 해당 그룹내에서 보여짐
     * 태깅한 태그 리스트, category : NEWS / ACTION
     */
    async findTaggingTagsRaw(requestParameters: FindTaggingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListResponseTaggingDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findTaggingTags().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tagging`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListResponseTaggingDtoFromJSON(jsonValue));
    }

    /**
     * 태그 리스트, 해당 그룹내에서 보여짐
     * 태깅한 태그 리스트, category : NEWS / ACTION
     */
    async findTaggingTags(requestParameters: FindTaggingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListResponseTaggingDto> {
        const response = await this.findTaggingTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 기존 태깅을 모두 삭제하고 선택된 태그로 태깅하기 
     * 태깅 전체 다시 적용 , category : NEWS / ACTION
     */
    async resetTaggingRaw(requestParameters: ResetTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['requestTaggingDto'] == null) {
            throw new runtime.RequiredError(
                'requestTaggingDto',
                'Required parameter "requestTaggingDto" was null or undefined when calling resetTagging().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tagging/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestTaggingDtoToJSON(requestParameters['requestTaggingDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 기존 태깅을 모두 삭제하고 선택된 태그로 태깅하기 
     * 태깅 전체 다시 적용 , category : NEWS / ACTION
     */
    async resetTagging(requestParameters: ResetTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.resetTaggingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
