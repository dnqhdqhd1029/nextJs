/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonJournalistSrchDto,
  BaseResponseCommonLong,
  BaseResponseCommonPageJournalistSrchDto,
  BaseResponseCommonString,
  CheckNameDto,
  CreateJournalistSrchDto,
  ModifyJournalistSrchDto,
  PageableDto,
  RequestJournalistSrchDto,
  SearchJournalistSrchDto,
} from '../models/index';
import {
    BaseResponseCommonJournalistSrchDtoFromJSON,
    BaseResponseCommonJournalistSrchDtoToJSON,
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonPageJournalistSrchDtoFromJSON,
    BaseResponseCommonPageJournalistSrchDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CheckNameDtoFromJSON,
    CheckNameDtoToJSON,
    CreateJournalistSrchDtoFromJSON,
    CreateJournalistSrchDtoToJSON,
    ModifyJournalistSrchDtoFromJSON,
    ModifyJournalistSrchDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RequestJournalistSrchDtoFromJSON,
    RequestJournalistSrchDtoToJSON,
    SearchJournalistSrchDtoFromJSON,
    SearchJournalistSrchDtoToJSON,
} from '../models/index';

export interface AddJournalistSrchRequest {
    createJournalistSrchDto: CreateJournalistSrchDto;
}

export interface CheckJournalistSrchNameRequest {
    checkNameDto: CheckNameDto;
}

export interface DeleteJournalistListInfoRequest {
    id: number;
}

export interface FindAllJournalistSrchRequest {
    searchDto: SearchJournalistSrchDto;
    pageableDto: PageableDto;
}

export interface FindJournalistSrchInfoRequest {
    id: number;
    searchDto: RequestJournalistSrchDto;
}

export interface ModifyJournalistSrchRequest {
    id: number;
    modifyJournalistSrchDto: ModifyJournalistSrchDto;
}

/**
 * 
 */
export class JournalistSrchControllerApi extends runtime.BaseAPI {

    /**
     * 언론인 맞춤 검색 추가
     * 언론인 맞춤 검색 추가
     */
    async addJournalistSrchRaw(requestParameters: AddJournalistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createJournalistSrchDto'] == null) {
            throw new runtime.RequiredError(
                'createJournalistSrchDto',
                'Required parameter "createJournalistSrchDto" was null or undefined when calling addJournalistSrch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalistsrch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateJournalistSrchDtoToJSON(requestParameters['createJournalistSrchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 언론인 맞춤 검색 추가
     * 언론인 맞춤 검색 추가
     */
    async addJournalistSrch(requestParameters: AddJournalistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addJournalistSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 맞춤 검색을 추가 변경 할 때 타이틀명 존재하는지 확인(동일한 회사내에서 확인)
     * 언론인 맞춤 검색 Title 중복 확인
     */
    async checkJournalistSrchNameRaw(requestParameters: CheckJournalistSrchNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['checkNameDto'] == null) {
            throw new runtime.RequiredError(
                'checkNameDto',
                'Required parameter "checkNameDto" was null or undefined when calling checkJournalistSrchName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalistsrch/checkname`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckNameDtoToJSON(requestParameters['checkNameDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 언론인 맞춤 검색을 추가 변경 할 때 타이틀명 존재하는지 확인(동일한 회사내에서 확인)
     * 언론인 맞춤 검색 Title 중복 확인
     */
    async checkJournalistSrchName(requestParameters: CheckJournalistSrchNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkJournalistSrchNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 맞춤 검색을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 언론인 맞춤 검색 삭제
     */
    async deleteJournalistListInfoRaw(requestParameters: DeleteJournalistListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteJournalistListInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalistsrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 언론인 맞춤 검색을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 언론인 맞춤 검색 삭제
     */
    async deleteJournalistListInfo(requestParameters: DeleteJournalistListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteJournalistListInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 맞춤 검색의 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 언론인 맞춤 검색 리스트
     */
    async findAllJournalistSrchRaw(requestParameters: FindAllJournalistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageJournalistSrchDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllJournalistSrch().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllJournalistSrch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalistsrch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageJournalistSrchDtoFromJSON(jsonValue));
    }

    /**
     * 언론인 맞춤 검색의 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 언론인 맞춤 검색 리스트
     */
    async findAllJournalistSrch(requestParameters: FindAllJournalistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageJournalistSrchDto> {
        const response = await this.findAllJournalistSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 맞춤 검색 상세정보를 가져옵니다.
     * 언론인 맞춤 검색 정보 확인
     */
    async findJournalistSrchInfoRaw(requestParameters: FindJournalistSrchInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonJournalistSrchDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findJournalistSrchInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findJournalistSrchInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalistsrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonJournalistSrchDtoFromJSON(jsonValue));
    }

    /**
     * 언론인 맞춤 검색 상세정보를 가져옵니다.
     * 언론인 맞춤 검색 정보 확인
     */
    async findJournalistSrchInfo(requestParameters: FindJournalistSrchInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonJournalistSrchDto> {
        const response = await this.findJournalistSrchInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 언론인 맞춤 검색 수정
     * 언론인 맞춤 검색 수정
     */
    async modifyJournalistSrchRaw(requestParameters: ModifyJournalistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyJournalistSrch().'
            );
        }

        if (requestParameters['modifyJournalistSrchDto'] == null) {
            throw new runtime.RequiredError(
                'modifyJournalistSrchDto',
                'Required parameter "modifyJournalistSrchDto" was null or undefined when calling modifyJournalistSrch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/journalistsrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyJournalistSrchDtoToJSON(requestParameters['modifyJournalistSrchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 언론인 맞춤 검색 수정
     * 언론인 맞춤 검색 수정
     */
    async modifyJournalistSrch(requestParameters: ModifyJournalistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyJournalistSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
