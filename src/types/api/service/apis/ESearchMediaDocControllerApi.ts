/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonElasticSearchReturnDtoMediaDocumentDto,
  BaseResponseCommonListResponseMediaValuePoint,
  ESearchMediaCondDto,
  RequestMediaExcelDto,
} from '../models/index';
import {
    BaseResponseCommonElasticSearchReturnDtoMediaDocumentDtoFromJSON,
    BaseResponseCommonElasticSearchReturnDtoMediaDocumentDtoToJSON,
    BaseResponseCommonListResponseMediaValuePointFromJSON,
    BaseResponseCommonListResponseMediaValuePointToJSON,
    ESearchMediaCondDtoFromJSON,
    ESearchMediaCondDtoToJSON,
    RequestMediaExcelDtoFromJSON,
    RequestMediaExcelDtoToJSON,
} from '../models/index';

export interface DownloadMediaExcelRequest {
    requestMediaExcelDto: RequestMediaExcelDto;
}

export interface EsMediaByCondRequest {
    eSearchMediaCondDto: ESearchMediaCondDto;
}

/**
 * 
 */
export class ESearchMediaDocControllerApi extends runtime.BaseAPI {

    /**
     * 미디어 엑셀 다운로드
     * Elasticsearch 미디어 엑셀 다운로드
     */
    async downloadMediaExcelRaw(requestParameters: DownloadMediaExcelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestMediaExcelDto'] == null) {
            throw new runtime.RequiredError(
                'requestMediaExcelDto',
                'Required parameter "requestMediaExcelDto" was null or undefined when calling downloadMediaExcel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/media/download`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestMediaExcelDtoToJSON(requestParameters['requestMediaExcelDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 미디어 엑셀 다운로드
     * Elasticsearch 미디어 엑셀 다운로드
     */
    async downloadMediaExcel(requestParameters: DownloadMediaExcelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadMediaExcelRaw(requestParameters, initOverrides);
    }

    /**
     * 미디어명으로 검색
     * Elasticsearch 미디어 검색
     */
    async esMediaByCondRaw(requestParameters: EsMediaByCondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonElasticSearchReturnDtoMediaDocumentDto>> {
        if (requestParameters['eSearchMediaCondDto'] == null) {
            throw new runtime.RequiredError(
                'eSearchMediaCondDto',
                'Required parameter "eSearchMediaCondDto" was null or undefined when calling esMediaByCond().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ESearchMediaCondDtoToJSON(requestParameters['eSearchMediaCondDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonElasticSearchReturnDtoMediaDocumentDtoFromJSON(jsonValue));
    }

    /**
     * 미디어명으로 검색
     * Elasticsearch 미디어 검색
     */
    async esMediaByCond(requestParameters: EsMediaByCondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonElasticSearchReturnDtoMediaDocumentDto> {
        const response = await this.esMediaByCondRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 가치 기준별 point
     * 미디어 가치 기준별 point
     */
    async getMediaValuePointsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListResponseMediaValuePoint>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/media/valuepoints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListResponseMediaValuePointFromJSON(jsonValue));
    }

    /**
     * 미디어 가치 기준별 point
     * 미디어 가치 기준별 point
     */
    async getMediaValuePoints(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListResponseMediaValuePoint> {
        const response = await this.getMediaValuePointsRaw(initOverrides);
        return await response.value();
    }

}
