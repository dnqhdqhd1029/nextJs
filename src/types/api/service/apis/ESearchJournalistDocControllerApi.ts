/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonElasticSearchReturnDtoJournalistDocumentDto,
  BaseResponseCommonElasticSearchReturnFilterDto,
  BaseResponseCommonListResponseJournalistNewsDto,
  ESearchJournalistCondDto,
  RequestJournalistByNewsDto,
  RequestJournalistForExcelDto,
} from '../models/index';
import {
    BaseResponseCommonElasticSearchReturnDtoJournalistDocumentDtoFromJSON,
    BaseResponseCommonElasticSearchReturnDtoJournalistDocumentDtoToJSON,
    BaseResponseCommonElasticSearchReturnFilterDtoFromJSON,
    BaseResponseCommonElasticSearchReturnFilterDtoToJSON,
    BaseResponseCommonListResponseJournalistNewsDtoFromJSON,
    BaseResponseCommonListResponseJournalistNewsDtoToJSON,
    ESearchJournalistCondDtoFromJSON,
    ESearchJournalistCondDtoToJSON,
    RequestJournalistByNewsDtoFromJSON,
    RequestJournalistByNewsDtoToJSON,
    RequestJournalistForExcelDtoFromJSON,
    RequestJournalistForExcelDtoToJSON,
} from '../models/index';

export interface DownloadJournalistExcelRequest {
    requestJournalistForExcelDto: RequestJournalistForExcelDto;
}

export interface EsJournalistByCondRequest {
    eSearchJournalistCondDto: ESearchJournalistCondDto;
}

export interface FindJournalistNewsRequest {
    requestJournalistByNewsDto: RequestJournalistByNewsDto;
}

/**
 * 
 */
export class ESearchJournalistDocControllerApi extends runtime.BaseAPI {

    /**
     * 언론인 엑셀 다운로드
     * Elasticsearch 언론인 엑셀 다운로드
     */
    async downloadJournalistExcelRaw(requestParameters: DownloadJournalistExcelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestJournalistForExcelDto'] == null) {
            throw new runtime.RequiredError(
                'requestJournalistForExcelDto',
                'Required parameter "requestJournalistForExcelDto" was null or undefined when calling downloadJournalistExcel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/journalist/download`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestJournalistForExcelDtoToJSON(requestParameters['requestJournalistForExcelDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 언론인 엑셀 다운로드
     * Elasticsearch 언론인 엑셀 다운로드
     */
    async downloadJournalistExcel(requestParameters: DownloadJournalistExcelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadJournalistExcelRaw(requestParameters, initOverrides);
    }

    /**
     * 언론인을 여러 조건으로 검색
     * Elasticsearch 언론인 검색
     */
    async esJournalistByCondRaw(requestParameters: EsJournalistByCondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonElasticSearchReturnDtoJournalistDocumentDto>> {
        if (requestParameters['eSearchJournalistCondDto'] == null) {
            throw new runtime.RequiredError(
                'eSearchJournalistCondDto',
                'Required parameter "eSearchJournalistCondDto" was null or undefined when calling esJournalistByCond().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/journalist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ESearchJournalistCondDtoToJSON(requestParameters['eSearchJournalistCondDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonElasticSearchReturnDtoJournalistDocumentDtoFromJSON(jsonValue));
    }

    /**
     * 언론인을 여러 조건으로 검색
     * Elasticsearch 언론인 검색
     */
    async esJournalistByCond(requestParameters: EsJournalistByCondRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonElasticSearchReturnDtoJournalistDocumentDto> {
        const response = await this.esJournalistByCondRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elasticsearch 언론인 전체 필터 생성, 검색 화면에서 검색필드 항목-개수 생성 
     * Elasticsearch 언론인 필터
     */
    async esJournalistFilterRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonElasticSearchReturnFilterDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/journalist/filter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonElasticSearchReturnFilterDtoFromJSON(jsonValue));
    }

    /**
     * Elasticsearch 언론인 전체 필터 생성, 검색 화면에서 검색필드 항목-개수 생성 
     * Elasticsearch 언론인 필터
     */
    async esJournalistFilter(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonElasticSearchReturnFilterDto> {
        const response = await this.esJournalistFilterRaw(initOverrides);
        return await response.value();
    }

    /**
     * 언론인 뉴스 검색시 언론인 목록 응답 후, 상세 뉴스 가져오기
     * Elasticsearch 언론인 상세 뉴스 가져오기
     */
    async findJournalistNewsRaw(requestParameters: FindJournalistNewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListResponseJournalistNewsDto>> {
        if (requestParameters['requestJournalistByNewsDto'] == null) {
            throw new runtime.RequiredError(
                'requestJournalistByNewsDto',
                'Required parameter "requestJournalistByNewsDto" was null or undefined when calling findJournalistNews().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/elastic/journalist/news`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestJournalistByNewsDtoToJSON(requestParameters['requestJournalistByNewsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListResponseJournalistNewsDtoFromJSON(jsonValue));
    }

    /**
     * 언론인 뉴스 검색시 언론인 목록 응답 후, 상세 뉴스 가져오기
     * Elasticsearch 언론인 상세 뉴스 가져오기
     */
    async findJournalistNews(requestParameters: FindJournalistNewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListResponseJournalistNewsDto> {
        const response = await this.findJournalistNewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
