/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonListSettingsDto,
  BaseResponseCommonSettingsDto,
} from '../models/index';
import {
    BaseResponseCommonListSettingsDtoFromJSON,
    BaseResponseCommonListSettingsDtoToJSON,
    BaseResponseCommonSettingsDtoFromJSON,
    BaseResponseCommonSettingsDtoToJSON,
} from '../models/index';

export interface FindByFieldNameInSectionRequest {
    fieldname: string;
}

export interface FindByFieldNameInSectionNoLoginRequest {
    fieldname: string;
}

/**
 * 
 */
export class SettingsControllerApi extends runtime.BaseAPI {

    /**
     * 서비스 허용값 전체 가져오기
     * 서비스 허용값 전체 가져오기
     */
    async findAllBySectionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonListSettingsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/settings/service`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonListSettingsDtoFromJSON(jsonValue));
    }

    /**
     * 서비스 허용값 전체 가져오기
     * 서비스 허용값 전체 가져오기
     */
    async findAllBySection(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonListSettingsDto> {
        const response = await this.findAllBySectionRaw(initOverrides);
        return await response.value();
    }

    /**
     * 서비스 허용값 가져오기
     * 서비스 허용값 가져오기
     */
    async findByFieldNameInSectionRaw(requestParameters: FindByFieldNameInSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonSettingsDto>> {
        if (requestParameters['fieldname'] == null) {
            throw new runtime.RequiredError(
                'fieldname',
                'Required parameter "fieldname" was null or undefined when calling findByFieldNameInSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/settings/service/{fieldname}`.replace(`{${"fieldname"}}`, encodeURIComponent(String(requestParameters['fieldname']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonSettingsDtoFromJSON(jsonValue));
    }

    /**
     * 서비스 허용값 가져오기
     * 서비스 허용값 가져오기
     */
    async findByFieldNameInSection(requestParameters: FindByFieldNameInSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonSettingsDto> {
        const response = await this.findByFieldNameInSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 서비스 허용값 가져오기(비로그인) - 로그인 실패 회수 등 가져오기
     * 서비스 허용값 가져오기(비로그인)
     */
    async findByFieldNameInSectionNoLoginRaw(requestParameters: FindByFieldNameInSectionNoLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonSettingsDto>> {
        if (requestParameters['fieldname'] == null) {
            throw new runtime.RequiredError(
                'fieldname',
                'Required parameter "fieldname" was null or undefined when calling findByFieldNameInSectionNoLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/nouser/settings/service/{fieldname}`.replace(`{${"fieldname"}}`, encodeURIComponent(String(requestParameters['fieldname']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonSettingsDtoFromJSON(jsonValue));
    }

    /**
     * 서비스 허용값 가져오기(비로그인) - 로그인 실패 회수 등 가져오기
     * 서비스 허용값 가져오기(비로그인)
     */
    async findByFieldNameInSectionNoLogin(requestParameters: FindByFieldNameInSectionNoLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonSettingsDto> {
        const response = await this.findByFieldNameInSectionNoLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
