/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonPageActionCommentDto,
  BaseResponseCommonString,
  CreateActionCommentDto,
  ModifyActionCommentDto,
  PageableDto,
  SearchActionCommentDto,
} from '../models/index';
import {
    BaseResponseCommonPageActionCommentDtoFromJSON,
    BaseResponseCommonPageActionCommentDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CreateActionCommentDtoFromJSON,
    CreateActionCommentDtoToJSON,
    ModifyActionCommentDtoFromJSON,
    ModifyActionCommentDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    SearchActionCommentDtoFromJSON,
    SearchActionCommentDtoToJSON,
} from '../models/index';

export interface AddActionCommentRequest {
    createActionCommentDto: CreateActionCommentDto;
}

export interface DeleteActionCommentRequest {
    id: number;
}

export interface FindAllByAction1Request {
    searchDto: SearchActionCommentDto;
    pageableDto: PageableDto;
}

export interface ModifyActionCommentRequest {
    id: number;
    modifyActionCommentDto: ModifyActionCommentDto;
}

/**
 * 
 */
export class ActionCommentControllerApi extends runtime.BaseAPI {

    /**
     * 활동 댓글 추가
     * 활동 댓글 추가
     */
    async addActionCommentRaw(requestParameters: AddActionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['createActionCommentDto'] == null) {
            throw new runtime.RequiredError(
                'createActionCommentDto',
                'Required parameter "createActionCommentDto" was null or undefined when calling addActionComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/actioncomment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateActionCommentDtoToJSON(requestParameters['createActionCommentDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 활동 댓글 추가
     * 활동 댓글 추가
     */
    async addActionComment(requestParameters: AddActionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.addActionCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동 댓글 삭제
     * 활동 댓글 삭제
     */
    async deleteActionCommentRaw(requestParameters: DeleteActionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteActionComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/actioncomment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 활동 댓글 삭제
     * 활동 댓글 삭제
     */
    async deleteActionComment(requestParameters: DeleteActionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteActionCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동 댓글 목록을 가져옵니다. 활동에 접근 권한이 있는 지 확인하고 댓글 목록을 가져옴.
     * 활동 댓글 리스트
     */
    async findAllByAction1Raw(requestParameters: FindAllByAction1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageActionCommentDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllByAction1().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllByAction1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/actioncomment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageActionCommentDtoFromJSON(jsonValue));
    }

    /**
     * 활동 댓글 목록을 가져옵니다. 활동에 접근 권한이 있는 지 확인하고 댓글 목록을 가져옴.
     * 활동 댓글 리스트
     */
    async findAllByAction1(requestParameters: FindAllByAction1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageActionCommentDto> {
        const response = await this.findAllByAction1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 활동 댓글 수정
     * 활동 댓글 수정
     */
    async modifyActionCommentRaw(requestParameters: ModifyActionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyActionComment().'
            );
        }

        if (requestParameters['modifyActionCommentDto'] == null) {
            throw new runtime.RequiredError(
                'modifyActionCommentDto',
                'Required parameter "modifyActionCommentDto" was null or undefined when calling modifyActionComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/actioncomment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyActionCommentDtoToJSON(requestParameters['modifyActionCommentDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 활동 댓글 수정
     * 활동 댓글 수정
     */
    async modifyActionComment(requestParameters: ModifyActionCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyActionCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
