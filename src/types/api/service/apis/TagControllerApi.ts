/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonPageResponseTagDto,
  BaseResponseCommonPageTagDto,
  BaseResponseCommonString,
  BaseResponseCommonTagDto,
  CheckTagNameDto,
  CreateTagDto,
  ModifyTagDto,
  PageableDto,
  SearchNameDto,
  SearchNameOnTaggingDto,
  SearchTagDto,
} from '../models/index';
import {
    BaseResponseCommonPageResponseTagDtoFromJSON,
    BaseResponseCommonPageResponseTagDtoToJSON,
    BaseResponseCommonPageTagDtoFromJSON,
    BaseResponseCommonPageTagDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    BaseResponseCommonTagDtoFromJSON,
    BaseResponseCommonTagDtoToJSON,
    CheckTagNameDtoFromJSON,
    CheckTagNameDtoToJSON,
    CreateTagDtoFromJSON,
    CreateTagDtoToJSON,
    ModifyTagDtoFromJSON,
    ModifyTagDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    SearchNameDtoFromJSON,
    SearchNameDtoToJSON,
    SearchNameOnTaggingDtoFromJSON,
    SearchNameOnTaggingDtoToJSON,
    SearchTagDtoFromJSON,
    SearchTagDtoToJSON,
} from '../models/index';

export interface AutoCompleteTagRequest {
    searchDto: SearchNameDto;
    pageableDto: PageableDto;
}

export interface AutoCompleteTagOnTaggingRequest {
    searchDto: SearchNameOnTaggingDto;
    pageableDto: PageableDto;
}

export interface CheckTagNameRequest {
    checkTagNameDto: CheckTagNameDto;
}

export interface DeleteTagRequest {
    id: number;
}

export interface FindAllTagRequest {
    searchDto: SearchTagDto;
    pageableDto: PageableDto;
}

export interface MakeTagRequest {
    createTagDto: CreateTagDto;
}

export interface ModifyTagRequest {
    id: number;
    modifyTagDto: ModifyTagDto;
}

/**
 * 
 */
export class TagControllerApi extends runtime.BaseAPI {

    /**
     * 태그명으로 자동완성 리스트 응답
     * 태그 자동완성 리스트, category : NEWS / ACTION / NEWSWIRE 
     */
    async autoCompleteTagRaw(requestParameters: AutoCompleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageResponseTagDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling autoCompleteTag().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling autoCompleteTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tag/autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageResponseTagDtoFromJSON(jsonValue));
    }

    /**
     * 태그명으로 자동완성 리스트 응답
     * 태그 자동완성 리스트, category : NEWS / ACTION / NEWSWIRE 
     */
    async autoCompleteTag(requestParameters: AutoCompleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageResponseTagDto> {
        const response = await this.autoCompleteTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태깅된 대상에 대해 태그명으로 자동완성 리스트 응답
     * 태깅된 대상내 태그 자동완성 리스트, category : NEWS / ACTION / NEWSWIRE 
     */
    async autoCompleteTagOnTaggingRaw(requestParameters: AutoCompleteTagOnTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageResponseTagDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling autoCompleteTagOnTagging().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling autoCompleteTagOnTagging().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tag/autocomplete/tagging`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageResponseTagDtoFromJSON(jsonValue));
    }

    /**
     * 태깅된 대상에 대해 태그명으로 자동완성 리스트 응답
     * 태깅된 대상내 태그 자동완성 리스트, category : NEWS / ACTION / NEWSWIRE 
     */
    async autoCompleteTagOnTagging(requestParameters: AutoCompleteTagOnTaggingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageResponseTagDto> {
        const response = await this.autoCompleteTagOnTaggingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태그 이름 중복 확인(같은 그룹내에서 검사)
     * 태그 이름 중복 확인
     */
    async checkTagNameRaw(requestParameters: CheckTagNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['checkTagNameDto'] == null) {
            throw new runtime.RequiredError(
                'checkTagNameDto',
                'Required parameter "checkTagNameDto" was null or undefined when calling checkTagName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tag/checkname`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckTagNameDtoToJSON(requestParameters['checkTagNameDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 태그 이름 중복 확인(같은 그룹내에서 검사)
     * 태그 이름 중복 확인
     */
    async checkTagName(requestParameters: CheckTagNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkTagNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태그를 삭제합니다. 같은 그룹내 누구나 가능
     * 태그 삭제
     */
    async deleteTagRaw(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tag/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 태그를 삭제합니다. 같은 그룹내 누구나 가능
     * 태그 삭제
     */
    async deleteTag(requestParameters: DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태그 리스트, 해당 그룹내에서 보여짐
     * 태그 리스트, category : NEWS / ACTION / NEWSWIRE
     */
    async findAllTagRaw(requestParameters: FindAllTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageTagDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllTag().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageTagDtoFromJSON(jsonValue));
    }

    /**
     * 태그 리스트, 해당 그룹내에서 보여짐
     * 태그 리스트, category : NEWS / ACTION / NEWSWIRE
     */
    async findAllTag(requestParameters: FindAllTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageTagDto> {
        const response = await this.findAllTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태그 추가
     * 태그 추가 , category : NEWS / ACTION / NEWSWIRE
     */
    async makeTagRaw(requestParameters: MakeTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonTagDto>> {
        if (requestParameters['createTagDto'] == null) {
            throw new runtime.RequiredError(
                'createTagDto',
                'Required parameter "createTagDto" was null or undefined when calling makeTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTagDtoToJSON(requestParameters['createTagDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonTagDtoFromJSON(jsonValue));
    }

    /**
     * 태그 추가
     * 태그 추가 , category : NEWS / ACTION / NEWSWIRE
     */
    async makeTag(requestParameters: MakeTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonTagDto> {
        const response = await this.makeTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 태그 수정
     * 태그 수정
     */
    async modifyTagRaw(requestParameters: ModifyTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyTag().'
            );
        }

        if (requestParameters['modifyTagDto'] == null) {
            throw new runtime.RequiredError(
                'modifyTagDto',
                'Required parameter "modifyTagDto" was null or undefined when calling modifyTag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/tag/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyTagDtoToJSON(requestParameters['modifyTagDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 태그 수정
     * 태그 수정
     */
    async modifyTag(requestParameters: ModifyTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
