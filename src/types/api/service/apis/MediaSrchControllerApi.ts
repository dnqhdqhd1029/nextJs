/* tslint:disable */
/* eslint-disable */
/**
 * MediaBee Service API
 * MediaBee Service API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseResponseCommonLong,
  BaseResponseCommonMediaSrchDto,
  BaseResponseCommonPageMediaSrchDto,
  BaseResponseCommonResponseSearchCountDto,
  BaseResponseCommonString,
  CheckNameDto,
  CreateMediaSrchDto,
  ModifyMediaSrchDto,
  PageableDto,
  RequestMediaSrchDto,
  RequestSearchCountDto,
  SearchMediaSrchDto,
} from '../models/index';
import {
    BaseResponseCommonLongFromJSON,
    BaseResponseCommonLongToJSON,
    BaseResponseCommonMediaSrchDtoFromJSON,
    BaseResponseCommonMediaSrchDtoToJSON,
    BaseResponseCommonPageMediaSrchDtoFromJSON,
    BaseResponseCommonPageMediaSrchDtoToJSON,
    BaseResponseCommonResponseSearchCountDtoFromJSON,
    BaseResponseCommonResponseSearchCountDtoToJSON,
    BaseResponseCommonStringFromJSON,
    BaseResponseCommonStringToJSON,
    CheckNameDtoFromJSON,
    CheckNameDtoToJSON,
    CreateMediaSrchDtoFromJSON,
    CreateMediaSrchDtoToJSON,
    ModifyMediaSrchDtoFromJSON,
    ModifyMediaSrchDtoToJSON,
    PageableDtoFromJSON,
    PageableDtoToJSON,
    RequestMediaSrchDtoFromJSON,
    RequestMediaSrchDtoToJSON,
    RequestSearchCountDtoFromJSON,
    RequestSearchCountDtoToJSON,
    SearchMediaSrchDtoFromJSON,
    SearchMediaSrchDtoToJSON,
} from '../models/index';

export interface AddMediaSrchRequest {
    createMediaSrchDto: CreateMediaSrchDto;
}

export interface CheckMediaSrchNameRequest {
    checkNameDto: CheckNameDto;
}

export interface DeleteMediaListInfo1Request {
    id: number;
}

export interface FindAllMediaSrchRequest {
    searchDto: SearchMediaSrchDto;
    pageableDto: PageableDto;
}

export interface FindCountMediaJouranlistSrchRequest {
    searchDto: RequestSearchCountDto;
}

export interface FindMediaSrchInfoRequest {
    id: number;
    searchDto: RequestMediaSrchDto;
}

export interface ModifyMediaSrchRequest {
    id: number;
    modifyMediaSrchDto: ModifyMediaSrchDto;
}

/**
 * 
 */
export class MediaSrchControllerApi extends runtime.BaseAPI {

    /**
     * 미디어 맞춤 검색 추가
     * 미디어 맞춤 검색 추가
     */
    async addMediaSrchRaw(requestParameters: AddMediaSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonLong>> {
        if (requestParameters['createMediaSrchDto'] == null) {
            throw new runtime.RequiredError(
                'createMediaSrchDto',
                'Required parameter "createMediaSrchDto" was null or undefined when calling addMediaSrch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediasrch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMediaSrchDtoToJSON(requestParameters['createMediaSrchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonLongFromJSON(jsonValue));
    }

    /**
     * 미디어 맞춤 검색 추가
     * 미디어 맞춤 검색 추가
     */
    async addMediaSrch(requestParameters: AddMediaSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonLong> {
        const response = await this.addMediaSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 맞춤 검색을 추가 변경 할 때 타이틀명 존재하는지 확인(동일한 회사내에서 확인)
     * 미디어 맞춤 검색 Title 중복 확인
     */
    async checkMediaSrchNameRaw(requestParameters: CheckMediaSrchNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['checkNameDto'] == null) {
            throw new runtime.RequiredError(
                'checkNameDto',
                'Required parameter "checkNameDto" was null or undefined when calling checkMediaSrchName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediasrch/checkname`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckNameDtoToJSON(requestParameters['checkNameDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어 맞춤 검색을 추가 변경 할 때 타이틀명 존재하는지 확인(동일한 회사내에서 확인)
     * 미디어 맞춤 검색 Title 중복 확인
     */
    async checkMediaSrchName(requestParameters: CheckMediaSrchNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.checkMediaSrchNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 맞춤 검색을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 미디어 맞춤 검색 삭제
     */
    async deleteMediaListInfo1Raw(requestParameters: DeleteMediaListInfo1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMediaListInfo1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediasrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어 맞춤 검색을 삭제합니다. 소유자가 본인이거나 공유설정이 WRITABLE 인 경우만 가능
     * 미디어 맞춤 검색 삭제
     */
    async deleteMediaListInfo1(requestParameters: DeleteMediaListInfo1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.deleteMediaListInfo1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 맞춤 검색의 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 미디어 맞춤 검색 리스트
     */
    async findAllMediaSrchRaw(requestParameters: FindAllMediaSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonPageMediaSrchDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findAllMediaSrch().'
            );
        }

        if (requestParameters['pageableDto'] == null) {
            throw new runtime.RequiredError(
                'pageableDto',
                'Required parameter "pageableDto" was null or undefined when calling findAllMediaSrch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        if (requestParameters['pageableDto'] != null) {
            queryParameters['pageableDto'] = requestParameters['pageableDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediasrch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonPageMediaSrchDtoFromJSON(jsonValue));
    }

    /**
     * 미디어 맞춤 검색의 리스트를 가져옵니다. 공유대상(이그룹/전체그룹), 공유설정(비공개/수정/공개)에 따라 보여짐
     * 미디어 맞춤 검색 리스트
     */
    async findAllMediaSrch(requestParameters: FindAllMediaSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonPageMediaSrchDto> {
        const response = await this.findAllMediaSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 맞춤 검색 개수 구하기(미디어/언론인 맞춤검색 개수)
     * 맞춤 검색 개수 구하기(미디어/언론인 맞춤검색 개수)
     */
    async findCountMediaJouranlistSrchRaw(requestParameters: FindCountMediaJouranlistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonResponseSearchCountDto>> {
        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findCountMediaJouranlistSrch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediasrch/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonResponseSearchCountDtoFromJSON(jsonValue));
    }

    /**
     * 맞춤 검색 개수 구하기(미디어/언론인 맞춤검색 개수)
     * 맞춤 검색 개수 구하기(미디어/언론인 맞춤검색 개수)
     */
    async findCountMediaJouranlistSrch(requestParameters: FindCountMediaJouranlistSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonResponseSearchCountDto> {
        const response = await this.findCountMediaJouranlistSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 맞춤 검색 상세정보를 가져옵니다.
     * 미디어 맞춤 검색 정보 확인
     */
    async findMediaSrchInfoRaw(requestParameters: FindMediaSrchInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonMediaSrchDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findMediaSrchInfo().'
            );
        }

        if (requestParameters['searchDto'] == null) {
            throw new runtime.RequiredError(
                'searchDto',
                'Required parameter "searchDto" was null or undefined when calling findMediaSrchInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchDto'] != null) {
            queryParameters['searchDto'] = requestParameters['searchDto'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediasrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonMediaSrchDtoFromJSON(jsonValue));
    }

    /**
     * 미디어 맞춤 검색 상세정보를 가져옵니다.
     * 미디어 맞춤 검색 정보 확인
     */
    async findMediaSrchInfo(requestParameters: FindMediaSrchInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonMediaSrchDto> {
        const response = await this.findMediaSrchInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 미디어 맞춤 검색 추가
     * 미디어 맞춤 검색 수정
     */
    async modifyMediaSrchRaw(requestParameters: ModifyMediaSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponseCommonString>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifyMediaSrch().'
            );
        }

        if (requestParameters['modifyMediaSrchDto'] == null) {
            throw new runtime.RequiredError(
                'modifyMediaSrchDto',
                'Required parameter "modifyMediaSrchDto" was null or undefined when calling modifyMediaSrch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/svc/mediasrch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifyMediaSrchDtoToJSON(requestParameters['modifyMediaSrchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseCommonStringFromJSON(jsonValue));
    }

    /**
     * 미디어 맞춤 검색 추가
     * 미디어 맞춤 검색 수정
     */
    async modifyMediaSrch(requestParameters: ModifyMediaSrchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponseCommonString> {
        const response = await this.modifyMediaSrchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
